(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    989861,      19911]
NotebookOptionsPosition[    967014,      19190]
NotebookOutlinePosition[    967389,      19206]
CellTagsIndexPosition[    967346,      19203]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Dear Wolfram Recruiters and Managers,", "Subsubsection",
 CellChangeTimes->{{3.6627141315321445`*^9, 3.662714135836391*^9}, {
  3.662714331267569*^9, 3.6627143410271273`*^9}}],

Cell["\<\
Thank you for your time and consideration in analyzing the following code and \
considering me for a position at Wolfram Research. The challenges were \
engaging and I had a blast completing them. For the most part, I managed to \
make practicable functions, even where pseudocode was all that was required. \
In any event, I very much hope to hear from you soon!
\t\t\t\t\t\t\t\t\t\tRegards,
\t\t\t\t\t\t\t\t\t\tKyle Wardlow\
\>", "Text",
 CellChangeTimes->{{3.6627143586911373`*^9, 3.662714610217524*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Challenge 1", "Section",
 CellChangeTimes->{{3.642779758480568*^9, 3.6427797688526773`*^9}}],

Cell[TextData[{
 "Given a function f(x), determine if it can be written in the form a*Sin[b x \
+ c] + d. If so return the period, phase shift, amplitude, and midline. \
(These terms are defined ",
 ButtonBox["here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.purplemath.com/modules/grphtrig.htm"], None},
  ButtonNote->"http://www.purplemath.com/modules/grphtrig.htm"],
 ".)"
}], "Text",
 CellChangeTimes->{{3.642779786054988*^9, 3.642779843557962*^9}, {
  3.642779883401971*^9, 3.64277989500169*^9}, {3.642780567534336*^9, 
  3.642780568435185*^9}, {3.6427807038910217`*^9, 3.642780704880052*^9}}],

Cell[TextData[{
 "More explicitally, write a function called ",
 StyleBox["TrigProperties", "Input"],
 " that takes in a function (f) and a variable (x)."
}], "Text",
 CellChangeTimes->{{3.6427799013064823`*^9, 3.6427800033843517`*^9}}],

Cell[TextData[{
 "This function returns ",
 StyleBox["$Failed", "Input"],
 " if f cannot be expressed in the form a*Sin[b x + c] + d, otherwise it \
returns"
}], "Text",
 CellChangeTimes->{{3.6427799013064823`*^9, 3.642780021247897*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\"\<Period\>\"", "\[Rule]", "per"}], ",", 
   RowBox[{"\"\<Amplitude\>\"", "\[Rule]", "am"}], ",", 
   RowBox[{"\"\<PhaseShift\>\"", "\[Rule]", "ph"}], ",", 
   RowBox[{"\"\<Midline\>\"", "\[Rule]", "md"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.642780023788734*^9, 3.642780055393031*^9}, {
  3.6427805704535437`*^9, 3.642780571342936*^9}}],

Cell["Examples:", "Text",
 CellChangeTimes->{{3.6427800621828613`*^9, 3.642780063598791*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{"TrigProperties", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x", "^", "2"}], "+", "1"}], ",", "x"}], "]"}], 
  "Input"]], "Input",
 CellChangeTimes->{{3.6427800655898867`*^9, 3.642780074136196*^9}}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.642780087479331*^9, 3.6427800919711*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["TrigProperties", "Input"], 
  StyleBox["[", "Input"], 
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox["2", "Input"], 
     RowBox[{"Sin", "[", 
      RowBox[{"x", "-", 
       RowBox[{"\[Pi]", "/", "12"}]}], "]"}]}], "+", "5"}], ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.642780093662624*^9, 3.642780119328973*^9}, {
  3.642780267181033*^9, 3.6427802949224787`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Period\"\>", "\[Rule]", 
    RowBox[{"2", " ", "\[Pi]"}]}], ",", 
   RowBox[{"\<\"Amplitude\"\>", "\[Rule]", 
    RowBox[{"-", "2"}]}], ",", 
   RowBox[{"\<\"PhaseShift\"\>", "\[Rule]", 
    FractionBox["\[Pi]", "12"]}], ",", 
   RowBox[{"\<\"Midline\"\>", "\[Rule]", "5"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.642780254883972*^9, 3.642780295522772*^9}, 
   3.6427805805498123`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["TrigProperties", "Input"], 
  StyleBox["[", "Input"], 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", "x", "]"}], "^", "2"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.642780115232382*^9, 3.64278011750567*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Period\"\>", "\[Rule]", "\[Pi]"}], ",", 
   RowBox[{"\<\"Amplitude\"\>", "\[Rule]", 
    FractionBox["1", "2"]}], ",", 
   RowBox[{"\<\"PhaseShift\"\>", "\[Rule]", 
    RowBox[{"-", 
     FractionBox["\[Pi]", "4"]}]}], ",", 
   RowBox[{"\<\"Midline\"\>", "\[Rule]", 
    FractionBox["1", "2"]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.642780498983704*^9, {3.642780581351479*^9, 3.6427805916003017`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operational Function", "Subsection",
 CellChangeTimes->{{3.6623018682913094`*^9, 3.662301895482865*^9}, {
   3.662301936954237*^9, 3.6623019371942506`*^9}, 3.6624921674658227`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Here", " ", "is", " ", "the", " ", "operational", " ", "TrigProperties", 
    " ", "Function"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"TrigProperties", "[", 
     RowBox[{"functionInput_", ",", "variableInput_"}], "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "SimplifiedFunction", ",", "FourieredFunctionList", ",", 
         "SpectralAnalyzer", ",", "ph", ",", "am", ",", "md", ",", "per"}], 
        "}"}], ",", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"First", ",", " ", 
          RowBox[{
          "we", " ", "handle", " ", "the", " ", "case", " ", "of", " ", 
           RowBox[{"constants", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SimplifiedFunction", "=", 
          RowBox[{"FullSimplify", "[", "functionInput", "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"NumberQ", "[", "SimplifiedFunction", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"\"\<Period\>\"", "\[Rule]", "\"\<N/A\>\""}], ",", 
             RowBox[{"\"\<Amplitude\>\"", "\[Rule]", "0"}], ",", 
             RowBox[{"\"\<PhaseShift\>\"", "\[Rule]", "\"\<N/A\>\""}], ",", 
             RowBox[{"\"\<Midline\>\"", "\[Rule]", "SimplifiedFunction"}]}], 
            "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{"Second", ",", " ", 
             RowBox[{
             "we", " ", "need", " ", "to", " ", "deal", " ", "with", " ", 
              "functions", " ", "that", " ", "have", " ", 
              RowBox[{"poles", "/", 
               RowBox[{"divergences", ".", " ", "These"}]}], " ", "cannot", 
              " ", "be", " ", "represented", " ", "in", " ", "the", " ", 
              "above", " ", "fashion", " ", "and", " ", "so", " ", "we", " ", 
              "can", " ", "eliminate", " ", "potentially", " ", "problematic",
               " ", "input", " ", "by", " ", "filtering", " ", "for", " ", 
              "these", " ", 
              RowBox[{"first", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"Resolve", "[", 
              RowBox[{"Exists", "[", 
               RowBox[{"variableInput", ",", 
                RowBox[{
                 FractionBox["1", "functionInput"], "\[Equal]", "0"}]}], 
               "]"}], "]"}], ",", "\[IndentingNewLine]", "$Failed", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{
                RowBox[{
                "The", " ", "next", " ", "class", " ", "of", " ", 
                 "disqualified", " ", "functions", " ", "are", " ", "any", 
                 " ", "that", " ", "go", " ", "to"}], " ", "\[PlusMinus]", 
                RowBox[{"\[Infinity]", " ", "as", " ", "x"}]}], "\[Rule]", 
               " ", 
               RowBox[{
                RowBox[{"\[PlusMinus]", 
                 RowBox[{"\[Infinity]", ".", " ", "Mostly"}]}], " ", "here", 
                " ", 
                RowBox[{"we", "'"}], "re", " ", "weeding", " ", "out", " ", 
                "polynomials", " ", "and", " ", "other", " ", "divergent", 
                " ", "functions", " ", "missed", " ", "by", " ", "the", " ", 
                "first", " ", "filter", " ", "because", " ", "of", " ", 
                RowBox[{"\[Infinity]", "."}]}]}], "*)"}], 
             "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"ContainsAny", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"Limit", "[", 
                    RowBox[{"functionInput", ",", 
                    RowBox[{"variableInput", "\[Rule]", "#"}]}], "]"}], "&"}],
                   "/@", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], 
                   "}"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], 
                  "}"}]}], "]"}], ",", "\[IndentingNewLine]", "$Failed", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "Once", " ", "these", " ", "disqualified", " ", "functions", 
                  " ", "have", " ", "been", " ", "removed"}], ",", " ", 
                 RowBox[{
                  RowBox[{
                  "we", " ", "must", " ", "determine", " ", "if", " ", "the", 
                   " ", "function", " ", "has", " ", "any", " ", "part", " ", 
                   "which", " ", "does", " ", "not", " ", "arise", " ", 
                   "from", " ", "a", " ", "purely", " ", "trigonometric", " ", 
                   RowBox[{"function", ".", " ", "Functions"}], " ", 
                   "composed", " ", "of", " ", "sines", " ", "and", " ", 
                   "cosines", " ", "will", " ", "break", " ", "down", " ", 
                   "into", " ", "a", " ", "weighted", " ", "sum", " ", "of", 
                   " ", "\[Delta]", " ", "functions"}], ";", " ", 
                  RowBox[{
                  "we", " ", "can", " ", "filter", " ", "out", " ", 
                   "anything", " ", "that", " ", "does", " ", "not", " ", 
                   "look", " ", "like", " ", 
                   RowBox[{"this", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"FourieredFunctionList", "=", 
                 RowBox[{"Apply", "[", 
                  RowBox[{"List", ",", 
                   RowBox[{"Collect", "[", 
                    RowBox[{
                    RowBox[{"FourierTransform", "[", 
                    RowBox[{
                    RowBox[{"FullSimplify", "[", "functionInput", "]"}], ",", 
                    "variableInput", ",", "\[Omega]", ",", 
                    RowBox[{"FourierParameters", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"DiracDelta", "[", 
                    RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], 
                  "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Cases", "[", 
                    RowBox[{"FourieredFunctionList", ",", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_.", "*", 
                    RowBox[{"DiracDelta", "[", 
                    RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}], 
                   "\[NotEqual]", 
                   RowBox[{"{", "}"}]}], ",", "$Failed", ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{
                    RowBox[{
                    "Now", " ", "that", " ", "we", " ", "have", " ", "weeded",
                     " ", "out", " ", "anything", " ", "that", " ", "does", 
                    " ", "not", " ", "decompose", " ", "into", " ", 
                    RowBox[{"sines", "/", "cosines"}]}], ",", " ", 
                    RowBox[{
                    "we", " ", "go", " ", "about", " ", "the", " ", "final", 
                    " ", "task", " ", "of", " ", "using", " ", "the", " ", 
                    "spectrum", " ", "given", " ", "by", " ", "the", " ", 
                    "Fourier", " ", "analysis", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"i", ".", "e", ".", " ", "the"}], " ", 
                    "arguments", " ", "of", " ", "the", " ", "\[Delta]", " ", 
                    "functions"}], ")"}], " ", "to", " ", "determine", " ", 
                    "whether", " ", "or", " ", "not", " ", "the", " ", 
                    "input", " ", "can", " ", "be", " ", "represented", " ", 
                    "as", " ", 
                    StyleBox["one",
                    FontSlant->"Italic"], " ", "sine", " ", 
                    RowBox[{"function", ".", " ", "We"}], " ", "only", " ", 
                    "need", " ", "to", " ", "count", " ", "how", " ", "many", 
                    " ", "terms", " ", "are", " ", "in", " ", "the", " ", 
                    "resulting", " ", "transform", " ", "to", " ", 
                    "determine", " ", 
                    RowBox[{"this", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"SpectralAnalyzer", "=", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Level", "[", 
                    RowBox[{"FourieredFunctionList", ",", "3"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "+", "\[Omega]"}], "|", "\[Omega]"}]}], 
                    "]"}], "-", "\[Omega]"}], ",", "0"}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "SpectralAnalyzer", "]"}], ">", 
                    "2"}], ",", "$Failed", ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"NumericQ", "[", 
                    RowBox[{"First", "[", 
                    RowBox[{"Level", "[", 
                    RowBox[{"FourieredFunctionList", ",", "2"}], "]"}], "]"}],
                     "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ph", "=", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Arg", "[", 
                    RowBox[{
                    RowBox[{"Level", "[", 
                    RowBox[{"FourieredFunctionList", ",", "2"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "+", 
                    FractionBox["\[Pi]", "2"]}]}], ";"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ph", "=", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Arg", "[", "1", "]"}]}], "+", 
                    FractionBox["\[Pi]", "2"]}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"am", "=", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MaxValue", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}], 
                    "-", 
                    RowBox[{"MinValue", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}]}], 
                    ")"}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"md", "=", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MaxValue", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}], 
                    "+", 
                    RowBox[{"MinValue", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}]}], 
                    ")"}]}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"per", "=", 
                    RowBox[{"FunctionPeriod", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}]}], 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<Period\>\"", "\[Rule]", "per"}], ",", 
                    RowBox[{"\"\<Amplitude\>\"", "\[Rule]", "am"}], ",", 
                    RowBox[{"\"\<PhaseShift\>\"", "\[Rule]", "ph"}], ",", 
                    RowBox[{"\"\<Midline\>\"", "\[Rule]", "md"}]}], "}"}]}]}],
                     "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                 "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", ")"}]}], "]"}], ")"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.6622997819181786`*^9, 3.662299833154109*^9}, {
   3.6623010096263995`*^9, 3.6623012039853134`*^9}, {3.662301505902582*^9, 
   3.6623015060695915`*^9}, {3.6623017538437634`*^9, 
   3.6623017661134653`*^9}, {3.662301842827853*^9, 3.6623018501392717`*^9}, {
   3.66230190099518*^9, 3.6623019258105993`*^9}, 3.6623020665556498`*^9, {
   3.662328627634502*^9, 3.662328631497723*^9}, {3.6624915900277953`*^9, 
   3.6624915904588203`*^9}, {3.6625125062791367`*^9, 3.662512532336627*^9}, {
   3.663034510090754*^9, 3.663034550116043*^9}, 3.6630350328576546`*^9, {
   3.6630350939121466`*^9, 3.6630351770229006`*^9}, {3.6630358650592537`*^9, 
   3.6630358908857307`*^9}, {3.663073142940538*^9, 3.6630731707701297`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Brainstorm", "Subsection",
 CellChangeTimes->{{3.6623283808273854`*^9, 3.662328382491481*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
    "The", " ", "function", " ", "must", " ", "be", " ", "able", " ", "to", 
     " ", "take", " ", "any", " ", "functional", " ", "input", " ", "and", 
     " ", "test", " ", "whether", " ", "or", " ", "not", " ", "it", " ", 
     "can", " ", "be", " ", "represented", " ", "as", " ", "a", "*", 
     RowBox[{"Sin", "[", 
      RowBox[{
       RowBox[{"b", " ", "x"}], "+", "c"}], "]"}]}], "+", 
    RowBox[{
     RowBox[{"d", ".", " ", "One"}], " ", "way", " ", "of", " ", "doing", " ",
      "this", " ", "would", " ", "be", " ", "to", " ", "Fourier", " ", 
     "transform", " ", "the", " ", "function", "\[IndentingNewLine]", "and", 
     " ", "determine", " ", "how", " ", "many", " ", "frequency", " ", 
     "components", " ", "there", " ", 
     RowBox[{"are", ".", " ", "If"}], " ", "the", " ", "transform", " ", 
     "returns", " ", "more", " ", "that", " ", "one", " ", "non"}], "-", 
    RowBox[{"zero", " ", "Fourier", " ", "mode"}]}], ",", " ", 
   RowBox[{
    RowBox[{
    "then", " ", "the", " ", "function", " ", "cannot", " ", "be", " ", 
     "represented", " ", "in", " ", "the", " ", "above", " ", "form", " ", 
     "and", " ", "so", " ", "should", " ", "return", " ", 
     RowBox[{"$Failed", ".", " ", "The"}], " ", "problem", " ", "with", " ", 
     "this", " ", "is", " ", "of", " ", "course", " ", "with", " ", 
     "functions", " ", "that", " ", "diverge", " ", "as", " ", "they", " ", 
     "approach"}], " ", "\[PlusMinus]", 
    RowBox[{
     RowBox[{"\[Infinity]", ".", " ", "The"}], " ", "native", " ", 
     "FourierTransform", " ", "function", " ", "times", " ", "out", " ", 
     "and", " ", "will", " ", "not", " ", "evaluate", " ", "in", " ", "a", 
     " ", "timely", " ", "fashion"}]}], ",", " ", 
   RowBox[{
   "so", " ", "we", " ", "have", " ", "to", " ", "first", " ", "eliminate", 
    " ", "functions", " ", "that", " ", "have", " ", 
    RowBox[{"singularities", ".", " ", "Naturally"}]}], ",", " ", 
   RowBox[{
    RowBox[{
    "these", " ", "functions", " ", "cannot", " ", "be", " ", "represented", 
     " ", "as", " ", "a", "*", 
     RowBox[{"Sin", "[", 
      RowBox[{
       RowBox[{"b", " ", "x"}], "+", "c"}], "]"}]}], "+", "d"}], ",", " ", 
   RowBox[{
   "so", " ", "this", " ", "will", " ", "be", " ", "our", " ", "first", " ", 
    RowBox[{"filter", "."}]}]}], " ", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.662328388439821*^9, 3.6623284776909256`*^9}, {
  3.662328509362737*^9, 3.6623285238585663`*^9}, {3.662328646098558*^9, 
  3.6623287184966993`*^9}, {3.662328820008505*^9, 3.662328896431876*^9}, {
  3.6623310900333433`*^9, 3.662331157480201*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Function Development & Testing", "Subsection",
 CellChangeTimes->{{3.6623019465787873`*^9, 3.662301955298286*^9}, {
  3.662301999753829*^9, 3.662302004082076*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Building", " ", "TrigProperties", " ", "functionality", " ", "and", " ", 
   "testing", " ", "the", " ", "function", " ", "against", " ", "various", 
   " ", "permutations", " ", "and", " ", "representations", " ", "of", " ", 
   "sinusoidal", " ", "functions"}], "*)"}]], "Input",
 CellChangeTimes->{{3.662301957183394*^9, 3.662302032714714*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Here", " ", "is", " ", "the", " ", "operation", " ", "TrigProperties", 
    " ", "Function"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"TrigProperties", "[", 
     RowBox[{"functionInput_", ",", "variableInput_"}], "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"First", ",", " ", 
       RowBox[{"we", " ", "handle", " ", "the", " ", "case", " ", "of", " ", 
        RowBox[{"constants", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SimplifiedFunction", "=", 
       RowBox[{"FullSimplify", "[", "functionInput", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", "SimplifiedFunction", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Period\>\"", "\[Rule]", "\"\<N/A\>\""}], ",", 
          RowBox[{"\"\<Amplitude\>\"", "\[Rule]", "0"}], ",", 
          RowBox[{"\"\<PhaseShift\>\"", "\[Rule]", "\"\<N/A\>\""}], ",", 
          RowBox[{"\"\<Midline\>\"", "\[Rule]", "SimplifiedFunction"}]}], 
         "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Second", ",", " ", 
          RowBox[{
          "we", " ", "need", " ", "to", " ", "deal", " ", "with", " ", 
           "functions", " ", "that", " ", "have", " ", 
           RowBox[{"poles", "/", 
            RowBox[{"divergences", ".", " ", "These"}]}], " ", "cannot", " ", 
           "be", " ", "represented", " ", "in", " ", "the", " ", "above", " ",
            "fashion", " ", "and", " ", "so", " ", "we", " ", "can", " ", 
           "eliminate", " ", "potentially", " ", "problematic", " ", "input", 
           " ", "by", " ", "filtering", " ", "for", " ", "these", " ", 
           RowBox[{"first", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Resolve", "[", 
           RowBox[{"Exists", "[", 
            RowBox[{"variableInput", ",", 
             RowBox[{
              FractionBox["1", "functionInput"], "\[Equal]", "0"}]}], "]"}], 
           "]"}], ",", "\[IndentingNewLine]", "$Failed", ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{
             RowBox[{
             "The", " ", "next", " ", "class", " ", "of", " ", "disqualified",
               " ", "functions", " ", "are", " ", "any", " ", "that", " ", 
              "go", " ", "to"}], " ", "\[PlusMinus]", 
             RowBox[{"\[Infinity]", " ", "as", " ", "x"}]}], "\[Rule]", " ", 
            RowBox[{
             RowBox[{"\[PlusMinus]", 
              RowBox[{"\[Infinity]", ".", " ", "Mostly"}]}], " ", "here", " ", 
             RowBox[{"we", "'"}], "re", " ", "weeding", " ", "out", " ", 
             "polynomials", " ", "and", " ", "other", " ", "divergent", " ", 
             "functions", " ", "missed", " ", "by", " ", "the", " ", "first", 
             " ", "filter", " ", "because", " ", "of", " ", 
             RowBox[{"\[Infinity]", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"ContainsAny", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Limit", "[", 
                 RowBox[{"functionInput", ",", 
                  RowBox[{"variableInput", "\[Rule]", "#"}]}], "]"}], "&"}], "/@", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], 
              ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], 
             "]"}], ",", "\[IndentingNewLine]", "$Failed", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
              "Once", " ", "these", " ", "disqualified", " ", "functions", 
               " ", "have", " ", "been", " ", "removed"}], ",", " ", 
              RowBox[{
               RowBox[{
               "we", " ", "must", " ", "determine", " ", "if", " ", "the", 
                " ", "function", " ", "has", " ", "any", " ", "part", " ", 
                "which", " ", "does", " ", "not", " ", "arise", " ", "from", 
                " ", "a", " ", "purely", " ", "trigonometric", " ", 
                RowBox[{"function", ".", " ", "Functions"}], " ", "composed", 
                " ", "of", " ", "sines", " ", "and", " ", "cosines", " ", 
                "will", " ", "break", " ", "down", " ", "into", " ", "a", " ",
                 "weighted", " ", "sum", " ", "of", " ", "\[Delta]", " ", 
                "functions"}], ";", " ", 
               RowBox[{
               "we", " ", "can", " ", "filter", " ", "out", " ", "anything", 
                " ", "that", " ", "does", " ", "not", " ", "look", " ", 
                "like", " ", 
                RowBox[{"this", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"FourieredFunctionList", "=", 
              RowBox[{"Apply", "[", 
               RowBox[{"List", ",", 
                RowBox[{"Collect", "[", 
                 RowBox[{
                  RowBox[{"FourierTransform", "[", 
                   RowBox[{
                    RowBox[{"FullSimplify", "[", "functionInput", "]"}], ",", 
                    "variableInput", ",", "\[Omega]", ",", 
                    RowBox[{"FourierParameters", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], 
                  ",", 
                  RowBox[{"DiracDelta", "[", 
                   RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}]}],
              ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Cases", "[", 
                 RowBox[{"FourieredFunctionList", ",", 
                  RowBox[{"Except", "[", 
                   RowBox[{"_.", "*", 
                    RowBox[{"DiracDelta", "[", 
                    RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}], 
                "\[NotEqual]", 
                RowBox[{"{", "}"}]}], ",", "$Failed", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{
                 RowBox[{
                 "Now", " ", "that", " ", "we", " ", "have", " ", "weeded", 
                  " ", "out", " ", "anything", " ", "that", " ", "does", " ", 
                  "not", " ", "decompose", " ", "into", " ", 
                  RowBox[{"sines", "/", "cosines"}]}], ",", " ", 
                 RowBox[{
                 "we", " ", "go", " ", "about", " ", "the", " ", "final", " ",
                   "task", " ", "of", " ", "using", " ", "the", " ", 
                  "spectrum", " ", "given", " ", "by", " ", "the", " ", 
                  "Fourier", " ", "analysis", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"i", ".", "e", ".", " ", "the"}], " ", 
                    "arguments", " ", "of", " ", "the", " ", "\[Delta]", " ", 
                    "functions"}], ")"}], " ", "to", " ", "determine", " ", 
                  "whether", " ", "or", " ", "not", " ", "the", " ", "input", 
                  " ", "can", " ", "be", " ", "represented", " ", "as", " ", 
                  StyleBox["one",
                   FontSlant->"Italic"], " ", "sine", " ", 
                  RowBox[{"function", ".", " ", "We"}], " ", "only", " ", 
                  "need", " ", "to", " ", "count", " ", "how", " ", "many", 
                  " ", "terms", " ", "are", " ", "in", " ", "the", " ", 
                  "resulting", " ", "transform", " ", "to", " ", "determine", 
                  " ", 
                  RowBox[{"this", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"SpectralAnalyzer", "=", 
                 RowBox[{"DeleteCases", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Level", "[", 
                    RowBox[{"FourieredFunctionList", ",", "3"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"_", "+", "\[Omega]"}], "|", "\[Omega]"}]}], 
                    "]"}], "-", "\[Omega]"}], ",", "0"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Length", "[", "SpectralAnalyzer", "]"}], ">", 
                   "2"}], ",", "$Failed", ",", "\[IndentingNewLine]", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"NumericQ", "[", 
                    RowBox[{"First", "[", 
                    RowBox[{"Level", "[", 
                    RowBox[{"FourieredFunctionList", ",", "2"}], "]"}], "]"}],
                     "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ph", "=", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Arg", "[", 
                    RowBox[{
                    RowBox[{"Level", "[", 
                    RowBox[{"FourieredFunctionList", ",", "2"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "+", 
                    FractionBox["\[Pi]", "2"]}]}], ";"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"ph", "=", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Arg", "[", "1", "]"}]}], "+", 
                    FractionBox["\[Pi]", "2"]}]}], ";"}]}], 
                    "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
                   RowBox[{"am", "=", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MaxValue", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}], 
                    "-", 
                    RowBox[{"MinValue", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}]}], 
                    ")"}]}]}], ";", "\[IndentingNewLine]", 
                   RowBox[{"md", "=", 
                    RowBox[{
                    FractionBox["1", "2"], 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MaxValue", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}], 
                    "+", 
                    RowBox[{"MinValue", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}]}], 
                    ")"}]}]}], ";", "\[IndentingNewLine]", 
                   RowBox[{"per", "=", 
                    RowBox[{"FunctionPeriod", "[", 
                    RowBox[{"functionInput", ",", "variableInput"}], "]"}]}], 
                   ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                   "\[IndentingNewLine]", "\[IndentingNewLine]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<Period\>\"", "\[Rule]", "per"}], ",", 
                    RowBox[{"\"\<Amplitude\>\"", "\[Rule]", "am"}], ",", 
                    RowBox[{"\"\<PhaseShift\>\"", "\[Rule]", "ph"}], ",", 
                    RowBox[{"\"\<Midline\>\"", "\[Rule]", "md"}]}], "}"}]}]}],
                  "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     "\[IndentingNewLine]", ")"}]}], ";"}]}]], "Input",
 CellChangeTimes->{{3.6622997819181786`*^9, 3.662299833154109*^9}, {
   3.6623010096263995`*^9, 3.6623012039853134`*^9}, {3.662301505902582*^9, 
   3.6623015060695915`*^9}, {3.6623017538437634`*^9, 
   3.6623017661134653`*^9}, {3.662301842827853*^9, 3.6623018501392717`*^9}, {
   3.66230190099518*^9, 3.6623019258105993`*^9}, 3.6623020665556498`*^9, 
   3.6623286222901964`*^9, {3.6623289195681996`*^9, 3.662328931958908*^9}, {
   3.6623300335439157`*^9, 3.662330175712047*^9}, {3.6623311799964886`*^9, 
   3.662331593367132*^9}, {3.662331651567461*^9, 3.6623316534625697`*^9}, {
   3.662335375996486*^9, 3.662335381412796*^9}, {3.6623397870777855`*^9, 
   3.662339901019303*^9}, {3.662339981971933*^9, 3.662340037781125*^9}, {
   3.662340474025077*^9, 3.6623405308413267`*^9}, {3.6623437599710217`*^9, 
   3.662343810962939*^9}, {3.662344589853489*^9, 3.6623445983419743`*^9}, {
   3.662344637924238*^9, 3.662344766587597*^9}, {3.6623456839090652`*^9, 
   3.662345709900552*^9}, {3.6623457637016287`*^9, 3.6623461943612614`*^9}, {
   3.6623463114819603`*^9, 3.662346339609569*^9}, {3.6623464823547335`*^9, 
   3.6623465059450827`*^9}, {3.662346536256817*^9, 3.6623465379269123`*^9}, {
   3.662346595392199*^9, 3.6623465971913023`*^9}, {3.6623466490312667`*^9, 
   3.6623466545425825`*^9}, {3.66234669210373*^9, 3.6623467075266128`*^9}, {
   3.662346778204655*^9, 3.6623467914374123`*^9}, 3.662346967727495*^9, {
   3.662346998845275*^9, 3.662347040619664*^9}, {3.662347350946414*^9, 
   3.662347352857524*^9}, {3.6623474366253147`*^9, 3.662347476872617*^9}, {
   3.6623475146477776`*^9, 3.662347524145321*^9}, {3.662347586038861*^9, 
   3.6623475867118993`*^9}, 3.662389215841675*^9, {3.662392266338153*^9, 
   3.6623922664351587`*^9}, {3.6623927238683224`*^9, 
   3.6623927755152764`*^9}, {3.6624073694380007`*^9, 
   3.6624074044050007`*^9}, {3.662488830473958*^9, 3.662488928353556*^9}, {
   3.6624890152735276`*^9, 3.6624890574739413`*^9}, 3.6624890945210605`*^9, {
   3.6624891780388374`*^9, 3.662489215848*^9}, 3.66248930116788*^9, {
   3.6624893791413393`*^9, 3.662489382134511*^9}, {3.6624894203026943`*^9, 
   3.6624895144620795`*^9}, {3.6624898683643217`*^9, 
   3.6624899925214233`*^9}, {3.6624900230271683`*^9, 3.662490211984976*^9}, {
   3.662490330584759*^9, 3.662490333781942*^9}, {3.662495135126563*^9, 
   3.662495159936982*^9}, {3.662511314218954*^9, 3.6625113346731243`*^9}, {
   3.6625113664259405`*^9, 3.6625114002568755`*^9}, {3.6625114369849763`*^9, 
   3.662511452823882*^9}, {3.662511552199566*^9, 3.6625115601830225`*^9}, {
   3.6625116062236557`*^9, 3.6625116346552825`*^9}, {3.6625116800318775`*^9, 
   3.6625117151738873`*^9}, {3.6625117623595867`*^9, 3.662511823502084*^9}, {
   3.6625118593901367`*^9, 3.6625118699507403`*^9}, {3.662511913453229*^9, 
   3.6625119205486345`*^9}, {3.662511995172903*^9, 3.662512107755342*^9}, 
   3.662512141323262*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   RowBox[{"Tan", "[", "x", "]"}], ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{"x", ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   RowBox[{"BesselJ", "[", 
    RowBox[{"2", ",", "x"}], "]"}], ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{"4", ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   RowBox[{"Cos", "[", "x", "]"}], ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Sin", "[", "x", "]"}], "3"], ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Sin", "[", "x", "]"}], "2"], ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "+", 
    RowBox[{"Cos", "[", 
     RowBox[{"4", "x"}], "]"}]}], ",", "x"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   RowBox[{"LegendreP", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Cos", "[", "x", "]"}]}], "]"}], ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"4", 
     SuperscriptBox[
      RowBox[{"Sin", "[", "x", "]"}], "2"]}], "+", 
    RowBox[{"3", 
     SuperscriptBox[
      RowBox[{"Sin", "[", "x", "]"}], "2"]}], "+", 
    RowBox[{"7", 
     SuperscriptBox[
      RowBox[{"Cos", "[", "x", "]"}], "2"]}]}], ",", "x"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"TrigProperties", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Exp", "[", 
     RowBox[{"I", " ", "\[Pi]"}], "]"}], "-", "1"}], ",", "x"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.66233018240843*^9, 3.6623301949431467`*^9}, {
  3.662346560476202*^9, 3.6623465636353827`*^9}, {3.662346608731962*^9, 
  3.662346627035009*^9}, {3.662346722402464*^9, 3.6623467230585012`*^9}, {
  3.6625114779583197`*^9, 3.6625114838216553`*^9}, {3.6625119410188055`*^9, 
  3.662511941306822*^9}, {3.6625121555450754`*^9, 3.662512185544791*^9}, {
  3.6625123309291067`*^9, 3.662512370600376*^9}, {3.6625124016561527`*^9, 
  3.6625124807916784`*^9}}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.6630376128552217`*^9}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.6630376128572226`*^9}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.6630376128602223`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Period\"\>", "\[Rule]", "\<\"N/A\"\>"}], ",", 
   RowBox[{"\<\"Amplitude\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"PhaseShift\"\>", "\[Rule]", "\<\"N/A\"\>"}], ",", 
   RowBox[{"\<\"Midline\"\>", "\[Rule]", "4"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.6630376128622227`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Period\"\>", "\[Rule]", 
    RowBox[{"2", " ", "\[Pi]"}]}], ",", 
   RowBox[{"\<\"Amplitude\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"PhaseShift\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"Midline\"\>", "\[Rule]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.6630376129682283`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Period\"\>", "\[Rule]", 
    RowBox[{"2", " ", "\[Pi]"}]}], ",", 
   RowBox[{"\<\"Amplitude\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"PhaseShift\"\>", "\[Rule]", 
    FractionBox["\[Pi]", "2"]}], ",", 
   RowBox[{"\<\"Midline\"\>", "\[Rule]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.663037613029232*^9}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.663037613043233*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Period\"\>", "\[Rule]", "\[Pi]"}], ",", 
   RowBox[{"\<\"Amplitude\"\>", "\[Rule]", 
    FractionBox["1", "2"]}], ",", 
   RowBox[{"\<\"PhaseShift\"\>", "\[Rule]", 
    RowBox[{"-", 
     FractionBox["\[Pi]", "2"]}]}], ",", 
   RowBox[{"\<\"Midline\"\>", "\[Rule]", 
    FractionBox["1", "2"]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.6630376131762404`*^9}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.6630376131892414`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Period\"\>", "\[Rule]", 
    RowBox[{"2", " ", "\[Pi]"}]}], ",", 
   RowBox[{"\<\"Amplitude\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"PhaseShift\"\>", "\[Rule]", 
    FractionBox["\[Pi]", "2"]}], ",", 
   RowBox[{"\<\"Midline\"\>", "\[Rule]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.6630376132512445`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Period\"\>", "\[Rule]", "\<\"N/A\"\>"}], ",", 
   RowBox[{"\<\"Amplitude\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"PhaseShift\"\>", "\[Rule]", "\<\"N/A\"\>"}], ",", 
   RowBox[{"\<\"Midline\"\>", "\[Rule]", "7"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.663037613253245*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Period\"\>", "\[Rule]", "\<\"N/A\"\>"}], ",", 
   RowBox[{"\<\"Amplitude\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"PhaseShift\"\>", "\[Rule]", "\<\"N/A\"\>"}], ",", 
   RowBox[{"\<\"Midline\"\>", "\[Rule]", 
    RowBox[{"-", "2"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6625119643311386`*^9, {3.662512005348485*^9, 3.662512028828828*^9}, 
   3.6625120806447916`*^9, 3.662512111647565*^9, 3.662512149626737*^9, 
   3.6625121876969147`*^9, {3.66251234514892*^9, 3.6625123714294233`*^9}, 
   3.662512432315906*^9, {3.6625124636917005`*^9, 3.6625124722771916`*^9}, 
   3.663035943108718*^9, 3.6630361089522038`*^9, 3.6630361393559427`*^9, 
   3.66303707118824*^9, 3.6630373757846622`*^9, 3.6630374208742414`*^9, 
   3.663037613254245*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Abs", "[", 
    RowBox[{
     RowBox[{"#", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "-", "\[Omega]"}], "]"}], "&"}], "/@", 
  RowBox[{"(", 
   RowBox[{"Apply", "[", 
    RowBox[{"List", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"#", ",", "FourierOutputPattern"}], "]"}], ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"DiracDelta", "[", 
          RowBox[{
           RowBox[{"-", "4"}], "+", "\[Omega]"}], "]"}]}], "+", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"DiracDelta", "[", 
          RowBox[{
           RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}]}], "-", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"DiracDelta", "[", 
          RowBox[{
           RowBox[{"-", "6"}], "+", "\[Omega]"}], "]"}]}], "+", 
        FractionBox[
         RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], "2"], "-", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"DiracDelta", "[", 
          RowBox[{"6", "+", "\[Omega]"}], "]"}]}]}], ")"}]}]}], "]"}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.662341671791585*^9, 3.662341694342875*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", "4", ",", "3", ",", "0", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.6623376843445163`*^9, 3.6623416521014585`*^9, 
  3.6623436891349707`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Gather", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Abs", "[", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "-", "\[Omega]"}], "]"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{"Apply", "[", 
      RowBox[{"List", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"#", ",", "FourierOutputPattern"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"FourierTransform", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sin", "[", 
             RowBox[{"2", "x"}], "]"}], "+", 
            RowBox[{"Sin", "[", 
             RowBox[{"3", "x"}], "]"}], "+", "1"}], ",", "x", ",", "\[Omega]",
            ",", 
           RowBox[{"FourierParameters", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], 
         ")"}]}]}], "]"}], ")"}]}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6623368547280645`*^9, 3.662336898240554*^9}, {
   3.662337296173314*^9, 3.662337316061452*^9}, {3.6623375637256174`*^9, 
   3.662337609564239*^9}, {3.662340573783783*^9, 3.6623406201624355`*^9}, 
   3.66234078808504*^9, {3.662340828692363*^9, 3.6623409161103625`*^9}, {
   3.662341026091653*^9, 3.662341042379585*^9}, 3.6623436981684875`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partd"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Part specification \
\[NoBreak]\\!\\(\\*RowBox[{\\\"Null\\\", \\\"\[LeftDoubleBracket]\\\", \
\\\"1\\\", \\\"\[RightDoubleBracket]\\\"}]\\)\[NoBreak] is longer than depth \
of object. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\
\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/partd\\\", ButtonNote -> \
\\\"Part::partd\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{
  3.6623410439736757`*^9, {3.6623436917241187`*^9, 3.6623436986085124`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Abs", "[", 
     RowBox[{
      RowBox[{"-", "\[Omega]"}], "+", 
      RowBox[{
      "Null", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "]"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6623410339991055`*^9, 3.662341043976676*^9}, {
  3.662343691726119*^9, 3.6623436986105127`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{"Apply", "[", 
   RowBox[{"List", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", "FourierOutputPattern"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", 
     RowBox[{"(", 
      RowBox[{"FourierTransform", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"2", "x"}], "]"}], "+", 
         RowBox[{"Sin", "[", 
          RowBox[{"3", "x"}], "]"}], "+", "1"}], ",", "x", ",", "\[Omega]", 
        ",", 
        RowBox[{"FourierParameters", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ")"}]}]}], 
   "]"}], ")"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"2", "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6623410918774157`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{"Apply", "[", 
   RowBox[{"List", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MatchQ", "[", 
         RowBox[{"#", ",", "FourierOutputPattern"}], "]"}], ",", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", 
     RowBox[{"(", 
      RowBox[{"FourierTransform", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"2", "x"}], "]"}], "+", 
         RowBox[{"Sin", "[", 
          RowBox[{"3", "x"}], "]"}]}], ",", "x", ",", "\[Omega]", ",", 
        RowBox[{"FourierParameters", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ")"}]}]}], 
   "]"}], ")"}]], "Input",
 CellChangeTimes->{{3.662340698429912*^9, 3.662340747645727*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"2", "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.662340651873249*^9, {3.6623407174059973`*^9, 3.6623407345579786`*^9}, 
   3.662343728789239*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"Level", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
        RowBox[{"DiracDelta", "[", 
         RowBox[{
          RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}]}], ",", 
       RowBox[{
        FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
        RowBox[{"DiracDelta", "[", 
         RowBox[{
          RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}]}], ",", 
       RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
        RowBox[{"DiracDelta", "[", 
         RowBox[{"2", "+", "\[Omega]"}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
        RowBox[{"DiracDelta", "[", 
         RowBox[{"3", "+", "\[Omega]"}], "]"}]}]}], "}"}], ",", "3"}], "]"}], 
   ",", 
   RowBox[{
    RowBox[{"_", "+", "\[Omega]"}], "|", "\[Omega]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6623425066723375`*^9, 3.6623426291773443`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "3"}], "+", "\[Omega]"}], ",", 
   RowBox[{
    RowBox[{"-", "2"}], "+", "\[Omega]"}], ",", "\[Omega]", ",", 
   RowBox[{"2", "+", "\[Omega]"}], ",", 
   RowBox[{"3", "+", "\[Omega]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.662342629483362*^9, 3.662343499792141*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Apply", "[", 
  RowBox[{"List", ",", 
   RowBox[{"FourierTransform", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{
        RowBox[{"-", "2"}], "x"}], "]"}], "+", 
      RowBox[{"Sin", "[", 
       RowBox[{"3", "x"}], "]"}], "+", "1"}], ",", "x", ",", "\[Omega]", ",", 
     RowBox[{"FourierParameters", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Level", "[", 
  RowBox[{
   RowBox[{"Apply", "[", 
    RowBox[{"List", ",", 
     RowBox[{"FourierTransform", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{
          RowBox[{"-", "2"}], "x"}], "]"}], "+", 
        RowBox[{"Sin", "[", 
         RowBox[{"3", "x"}], "]"}], "+", "1"}], ",", "x", ",", "\[Omega]", 
       ",", 
       RowBox[{"FourierParameters", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]}], "]"}], ",",
    "3"}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6623435362422256`*^9, 3.6623436576801715`*^9}, {
  3.6623438358563623`*^9, 3.662343890782504*^9}, {3.662343924823451*^9, 
  3.66234392795163*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{
      RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}]}], ",", 
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
   RowBox[{
    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"2", "+", "\[Omega]"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"3", "+", "\[Omega]"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6623435011512184`*^9, {3.662343538923379*^9, 3.6623435821228495`*^9}, 
   3.6623436276224523`*^9, 3.6623436586582274`*^9, {3.662343868422225*^9, 
   3.6623438914225407`*^9}, 3.6623439284096565`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["\[ImaginaryI]", "2"], ",", 
   RowBox[{
    RowBox[{"-", "3"}], "+", "\[Omega]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{
    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}]}], ",", 
   RowBox[{"-", 
    FractionBox["\[ImaginaryI]", "2"]}], ",", 
   RowBox[{
    RowBox[{"-", "2"}], "+", "\[Omega]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{
      RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}]}], ",", "\[Omega]", ",", 
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
   FractionBox["\[ImaginaryI]", "2"], ",", 
   RowBox[{"2", "+", "\[Omega]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"2", "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{
    FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"2", "+", "\[Omega]"}], "]"}]}], ",", 
   RowBox[{"-", 
    FractionBox["\[ImaginaryI]", "2"]}], ",", 
   RowBox[{"3", "+", "\[Omega]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"3", "+", "\[Omega]"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6623435011512184`*^9, {3.662343538923379*^9, 3.6623435821228495`*^9}, 
   3.6623436276224523`*^9, 3.6623436586582274`*^9, {3.662343868422225*^9, 
   3.6623438914225407`*^9}, 3.6623439284336576`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Apply", "[", 
  RowBox[{"List", ",", 
   RowBox[{"FourierTransform", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"BesselJ", "[", 
       RowBox[{"1", ",", "x"}], "]"}], "+", "1"}], ",", "x", ",", "\[Omega]", 
     ",", 
     RowBox[{"FourierParameters", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Level", "[", 
  RowBox[{
   RowBox[{"Apply", "[", 
    RowBox[{"List", ",", 
     RowBox[{"FourierTransform", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"BesselJ", "[", 
         RowBox[{"1", ",", "x"}], "]"}], "+", "1"}], ",", "x", ",", 
       "\[Omega]", ",", 
       RowBox[{"FourierParameters", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]}], "]"}], ",",
    "2"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"Level", "[", 
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"List", ",", 
       RowBox[{"FourierTransform", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"BesselJ", "[", 
           RowBox[{"1", ",", "x"}], "]"}], "+", "1"}], ",", "x", ",", 
         "\[Omega]", ",", 
         RowBox[{"FourierParameters", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]}], "]"}], 
     ",", "3"}], "]"}], ",", 
   RowBox[{
    RowBox[{"_", "+", "\[Omega]"}], "|", "\[Omega]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"DeleteCases", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"Level", "[", 
       RowBox[{
        RowBox[{"Apply", "[", 
         RowBox[{"List", ",", 
          RowBox[{"FourierTransform", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"BesselJ", "[", 
              RowBox[{"1", ",", "x"}], "]"}], "+", "1"}], ",", "x", ",", 
            "\[Omega]", ",", 
            RowBox[{"FourierParameters", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]}], "]"}],
         ",", "2"}], "]"}], ",", 
      RowBox[{
       RowBox[{"_", "+", "\[Omega]"}], "|", "\[Omega]"}]}], "]"}], "-", 
    "\[Omega]"}], ",", "0"}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.662343974408287*^9, 3.6623440273353148`*^9}, 
   3.6623440585030975`*^9, {3.6623441433179483`*^9, 3.6623441439569845`*^9}, {
   3.662344182533191*^9, 3.6623441889245567`*^9}, {3.6623450556981335`*^9, 
   3.6623450717360506`*^9}, {3.662345721788232*^9, 3.662345724466385*^9}, {
   3.6623463621358576`*^9, 3.662346362813896*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", "\[Omega]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"HeavisideTheta", "[", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}]}], "+", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{"1", "+", "\[Omega]"}], "]"}]}], ")"}]}], 
    RowBox[{"\[Pi]", " ", 
     SqrtBox[
      RowBox[{"1", "-", 
       SuperscriptBox["\[Omega]", "2"]}]]}]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6623439870350094`*^9, 3.66234402795035*^9, 3.6623440595911593`*^9, 
   3.6623441443420067`*^9, 3.662344189257576*^9, {3.6623450614134607`*^9, 
   3.662345072353086*^9}, 3.6623462180606165`*^9, 3.662346365480049*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[Omega]", ",", 
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", "\[ImaginaryI]", ",", 
   FractionBox["1", "\[Pi]"], ",", "\[Omega]", ",", 
   FractionBox["1", 
    SqrtBox[
     RowBox[{"1", "-", 
      SuperscriptBox["\[Omega]", "2"]}]]], ",", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"HeavisideTheta", "[", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}]}], "+", 
    RowBox[{"HeavisideTheta", "[", 
     RowBox[{"1", "+", "\[Omega]"}], "]"}]}], ",", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", "\[Omega]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"HeavisideTheta", "[", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}]}], "+", 
       RowBox[{"HeavisideTheta", "[", 
        RowBox[{"1", "+", "\[Omega]"}], "]"}]}], ")"}]}], 
    RowBox[{"\[Pi]", " ", 
     SqrtBox[
      RowBox[{"1", "-", 
       SuperscriptBox["\[Omega]", "2"]}]]}]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6623439870350094`*^9, 3.66234402795035*^9, 3.6623440595911593`*^9, 
   3.6623441443420067`*^9, 3.662344189257576*^9, {3.6623450614134607`*^9, 
   3.662345072353086*^9}, 3.6623462180606165`*^9, 3.6623463654850492`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[Omega]", ",", "\[Omega]"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6623439870350094`*^9, 3.66234402795035*^9, 3.6623440595911593`*^9, 
   3.6623441443420067`*^9, 3.662344189257576*^9, {3.6623450614134607`*^9, 
   3.662345072353086*^9}, 3.6623462180606165`*^9, 3.6623463654930496`*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{
  3.6623439870350094`*^9, 3.66234402795035*^9, 3.6623440595911593`*^9, 
   3.6623441443420067`*^9, 3.662344189257576*^9, {3.6623450614134607`*^9, 
   3.662345072353086*^9}, 3.6623462180606165`*^9, 3.6623463654950495`*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.6623450683028545`*^9}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Not", " ", "working", " ", "for", " ", "other", " ", "special", " ", 
   RowBox[{"functions", ".", " ", "Must"}], " ", "isolation", " ", "Dirac", 
   " ", "deltas", " ", "as", " ", "they", " ", "contain", " ", "the", " ", 
   "info", " ", "on", " ", "the", " ", "pure", " ", "freq", " ", "spectrum", 
   " ", "of", " ", "the", " ", "original", " ", 
   RowBox[{"function", "."}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.6623443981605244`*^9, 3.662344449258447*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Level", "[", 
  RowBox[{
   RowBox[{"Apply", "[", 
    RowBox[{"List", ",", 
     RowBox[{"FourierTransform", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"2", 
         RowBox[{"Cos", "[", 
          RowBox[{
           RowBox[{"-", "2"}], "x"}], "]"}]}], "+", "1"}], ",", "x", ",", 
       "\[Omega]", ",", 
       RowBox[{"FourierParameters", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]}], "]"}], ",",
    "2"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"Level", "[", 
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"List", ",", 
       RowBox[{"FourierTransform", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{
            RowBox[{"-", "2"}], "x"}], "]"}], "+", 
          RowBox[{"Sin", "[", 
           RowBox[{"3", "x"}], "]"}], "+", "1"}], ",", "x", ",", "\[Omega]", 
         ",", 
         RowBox[{"FourierParameters", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]}], "]"}], 
     ",", "2"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", "_", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.662344308892419*^9, 3.6623443834746847`*^9}, {
  3.6624937004535046`*^9, 3.662493895826679*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "2"}], "+", "\[Omega]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}], ",", "\[Omega]", ",", 
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
   RowBox[{"2", "+", "\[Omega]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"2", "+", "\[Omega]"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.662493722123744*^9, 3.662493896503718*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"2", "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.662493722123744*^9, 3.662493896519719*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"2", "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Check", ",", " ", 
    RowBox[{"Dirac", " ", 
     RowBox[{"\[Delta]", "'"}], "s", " ", "isolated"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.662344460970117*^9, 3.662344473530835*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Try", " ", "on", " ", "Bessel", " ", "functions", " ", "again"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Need", " ", "to", " ", "take", " ", "care", " ", "of", " ", "false", " ",
      "$Failed", " ", "calls"}], ",", " ", 
    RowBox[{
    "so", " ", "we", " ", "need", " ", "to", " ", "reject", " ", "ANY", " ", 
     "function", " ", "that", " ", "has", " ", "anything", " ", "but", " ", 
     RowBox[{"DiracDelta", "'"}], "s", " ", "in", " ", "the", " ", "Fourier", 
     " ", 
     RowBox[{"transform", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"Apply", "[", 
       RowBox[{"List", ",", 
        RowBox[{"FourierTransform", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Sin", "[", 
            RowBox[{
             RowBox[{"-", "2"}], "x"}], "]"}], "+", 
           RowBox[{"Sin", "[", 
            RowBox[{"3", "x"}], "]"}], "+", "1"}], ",", "x", ",", "\[Omega]", 
          ",", 
          RowBox[{"FourierParameters", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"1", ",", " ", "1"}], "}"}]}]}], "]"}]}], "]"}], ",", 
      RowBox[{"Except", "[", 
       RowBox[{"_.", "*", 
        RowBox[{"DiracDelta", "[", "_", "]"}]}], "]"}]}], "]"}], "\[Equal]", 
    RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"Apply", "[", 
       RowBox[{"List", ",", 
        RowBox[{"FourierTransform", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"BesselJ", "[", 
            RowBox[{"2", ",", "x"}], "]"}], "+", "1"}], ",", "x", ",", 
          "\[Omega]", ",", 
          RowBox[{"FourierParameters", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"1", ",", " ", "1"}], "}"}]}]}], "]"}]}], "]"}], ",", 
      RowBox[{"Except", "[", 
       RowBox[{"_.", "*", 
        RowBox[{"DiracDelta", "[", "_", "]"}]}], "]"}]}], "]"}], "\[Equal]", 
    RowBox[{"{", "}"}]}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6623444897147613`*^9, 3.662344555985552*^9}, {
  3.662345088138989*^9, 3.662345155709854*^9}, {3.662345196662196*^9, 
  3.6623454203719916`*^9}, {3.662345456476057*^9, 3.6623454755161457`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.6623445184874067`*^9, 3.662344560207793*^9, 3.6623451565459013`*^9, {
   3.662345202568534*^9, 3.662345238811607*^9}, {3.662345300214119*^9, 
   3.662345363706751*^9}, {3.6623454025889745`*^9, 3.662345476678212*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.6623445184874067`*^9, 3.662344560207793*^9, 3.6623451565459013`*^9, {
   3.662345202568534*^9, 3.662345238811607*^9}, {3.662345300214119*^9, 
   3.662345363706751*^9}, {3.6623454025889745`*^9, 3.6623454766862125`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteCases", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"Level", "[", 
       RowBox[{
        RowBox[{"Apply", "[", 
         RowBox[{"List", ",", 
          RowBox[{"FourierTransform", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Sin", "[", 
              RowBox[{"3", "x"}], "]"}], "+", 
             RowBox[{"Cos", "[", 
              RowBox[{"3", "x"}], "]"}], "+", 
             SuperscriptBox[
              RowBox[{"Cos", "[", 
               RowBox[{"6", "x"}], "]"}], "4"]}], ",", "x", ",", "\[Omega]", 
            ",", 
            RowBox[{"FourierParameters", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]}], "]"}],
         ",", "3"}], "]"}], ",", 
      RowBox[{
       RowBox[{"_", "+", "\[Omega]"}], "|", "\[Omega]"}]}], "]"}], "-", 
    "\[Omega]"}], ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.6623464007880683`*^9, 3.662346448300786*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "24"}], ",", 
   RowBox[{"-", "12"}], ",", 
   RowBox[{"-", "3"}], ",", "3", ",", "12", ",", "24"}], "}"}]], "Output",
 CellChangeTimes->{{3.662346431393819*^9, 3.662346450054886*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "This", " ", "condition", " ", "should", " ", "suffice", " ", "as", " ", 
   "the", " ", "next", " ", "level", " ", "of", " ", "filter"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.662345482965572*^9, 3.6623454839796295`*^9}, {
  3.6623456423616886`*^9, 3.6623456616737933`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FourierTransform", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"2", "x"}], "]"}], "+", 
    RowBox[{"Sin", "[", 
     RowBox[{"3", "x"}], "]"}]}], ",", "x", ",", "\[Omega]", ",", 
   RowBox[{"FourierParameters", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"FourierTransform", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"2", "x"}], "]"}], "+", 
    RowBox[{"Sin", "[", 
     RowBox[{"3", "x"}], "]"}]}], ",", "x", ",", "\[Omega]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.6623407642846785`*^9, 3.6623407676368704`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}]}], "+", 
  RowBox[{
   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}]}], "-", 
  RowBox[{
   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"2", "+", "\[Omega]"}], "]"}]}], "-", 
  RowBox[{
   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.662340756671243*^9, 3.662340768099897*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[ImaginaryI]", " ", 
   SqrtBox[
    FractionBox["\[Pi]", "2"]], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}]}], "+", 
  RowBox[{"\[ImaginaryI]", " ", 
   SqrtBox[
    FractionBox["\[Pi]", "2"]], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "2"}], "+", "\[Omega]"}], "]"}]}], "-", 
  RowBox[{"\[ImaginaryI]", " ", 
   SqrtBox[
    FractionBox["\[Pi]", "2"]], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"2", "+", "\[Omega]"}], "]"}]}], "-", 
  RowBox[{"\[ImaginaryI]", " ", 
   SqrtBox[
    FractionBox["\[Pi]", "2"]], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.662340756671243*^9, 3.662340768121898*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"#", "&"}], "/@", 
  RowBox[{"(", 
   RowBox[{"Apply", "[", 
    RowBox[{"List", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{"#", ",", "FourierOutputPattern"}], "]"}], ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "4"]}], " ", 
         RowBox[{"DiracDelta", "[", 
          RowBox[{
           RowBox[{"-", "6"}], "+", "\[Omega]"}], "]"}]}], "+", 
        FractionBox[
         RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], "2"], "-", 
        RowBox[{
         FractionBox["1", "4"], " ", 
         RowBox[{"DiracDelta", "[", 
          RowBox[{"6", "+", "\[Omega]"}], "]"}]}]}], ")"}]}]}], "]"}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.6623357388302393`*^9, 3.662335875823075*^9}, {
  3.6623359480792074`*^9, 3.6623359722555904`*^9}, {3.662336003639385*^9, 
  3.6623360645828714`*^9}, {3.6623360990948453`*^9, 3.6623361323017445`*^9}, {
  3.6623361763432636`*^9, 3.662336185772803*^9}, {3.662336615083358*^9, 
  3.6623366176265035`*^9}, {3.662336648602275*^9, 3.6623368438484426`*^9}, {
  3.662336920168808*^9, 3.66233698734365*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "6"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"6", "+", "\[Omega]"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.662336965581405*^9, 3.6623369877896757`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"FunctionPeriod", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Sin", "[", "x", "]"}], "3"], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.662329422977993*^9, 3.6623294814763393`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Resolve", "[", 
  RowBox[{"Exists", "[", 
   RowBox[{"x", ",", 
    RowBox[{
     FractionBox["1", 
      SuperscriptBox[
       RowBox[{"Sin", "[", "x", "]"}], "3"]], "\[Equal]", "0"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6623299452288637`*^9, 3.6623300105846024`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.6623299702892976`*^9, 3.6623300111766357`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"ContainsAny", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Limit", "[", 
        RowBox[{
         SuperscriptBox["x", "3"], ",", 
         RowBox[{"x", "\[Rule]", "#"}]}], "]"}], "&"}], "/@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], "]"}], 
   ",", "$Failed", ","}]}]], "Input",
 CellChangeTimes->{{3.6623401500805483`*^9, 3.6623401654414268`*^9}, {
  3.6623402621049557`*^9, 3.662340267288252*^9}, {3.6623404539599295`*^9, 
  3.6623404624074125`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ContainsAny", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Limit", "[", 
      RowBox[{
       SuperscriptBox["x", "3"], ",", 
       RowBox[{"x", "\[Rule]", "#"}]}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"ContainsAny", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Limit", "[", 
      RowBox[{
       RowBox[{"Sin", "[", "x", "]"}], ",", 
       RowBox[{"x", "\[Rule]", "#"}]}], "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]"}], "}"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.6623402058887405`*^9, 3.662340239076638*^9}, {
  3.662340414040646*^9, 3.662340441471215*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.6623401667785034`*^9, 3.66234024050472*^9, {3.6623404244392405`*^9, 
   3.6623404428582945`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.6623401667785034`*^9, 3.66234024050472*^9, {3.6623404244392405`*^9, 
   3.662340442873295*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"md", "=", 
  RowBox[{
   FractionBox["1", "2"], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"MaxValue", "[", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"Cos", "[", 
         RowBox[{"4", "x"}], "]"}], "2"], ",", "x"}], "]"}], "+", 
     RowBox[{"MinValue", "[", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"Cos", "[", 
         RowBox[{"4", "x"}], "]"}], "2"], ",", "x"}], "]"}]}], 
    ")"}]}]}]], "Input",
 CellChangeTimes->{{3.6623476329415436`*^9, 3.66234764704635*^9}}],

Cell[BoxData[
 FractionBox["1", "2"]], "Output",
 CellChangeTimes->{3.662347647451373*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FunctionPeriod", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Cos", "[", 
     RowBox[{"4", "x"}], "]"}], "2"], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.662347727488951*^9, 3.6623477498272285`*^9}}],

Cell[BoxData[
 FractionBox["\[Pi]", "4"]], "Output",
 CellChangeTimes->{{3.6623477461240172`*^9, 3.6623477502912555`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox[
      RowBox[{"Cos", "[", 
       RowBox[{"4", "x"}], "]"}], "2"], "-", 
     FractionBox["1", "2"]}], "\[Equal]", "0"}], ",", "x", ",", 
   RowBox[{"x", "\[LessEqual]", 
    FractionBox["\[Pi]", "4"]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.662347549436767*^9, 3.6623475636765814`*^9}, {
   3.6623476565238924`*^9, 3.6623477201405306`*^9}, 3.6623477613798895`*^9, {
   3.66234787188421*^9, 3.662347875850437*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NSolve", "::", "bdomv"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Warning: \[NoBreak]\\!\\(\\*RowBox[{\\\"x\\\", \\\"\
\[LessEqual]\\\", FractionBox[\\\"\[Pi]\\\", \\\"4\\\"]}]\\)\[NoBreak] is not \
a valid domain specification. Assuming it is a variable to eliminate. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/NSolve\\\", ButtonNote -> \
\\\"NSolve::bdomv\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6623477630359845`*^9, 3.662347876554477*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NSolve", "::", "ivar"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(\\*RowBox[{\\\"x\\\", \
\\\"\[LessEqual]\\\", FractionBox[\\\"\[Pi]\\\", \\\"4\\\"]}]\\)\[NoBreak] is \
not a valid variable. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/ivar\\\", ButtonNote -> \
\\\"NSolve::ivar\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6623477630359845`*^9, 3.6623478765894794`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"ForAll", "[", 
    RowBox[{"x", ",", 
     RowBox[{"0", "\[LessEqual]", "x", "\[LessEqual]", 
      FractionBox["\[Pi]", "4"]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", "2"]}], "+", 
       SuperscriptBox[
        RowBox[{"Cos", "[", 
         RowBox[{"4", " ", "x"}], "]"}], "2"]}], "\[Equal]", "0"}]}], "]"}], 
   ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.662347922643113*^9, 3.662348023217866*^9}, {
   3.662348159025634*^9, 3.662348160696729*^9}, 3.662348221793224*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Solve", "::", "ratnz"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Solve was unable to solve the system with inexact \
coefficients. The answer was obtained by solving a corresponding exact system \
and numericizing the result. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/Solve\\\", ButtonNote -> \
\\\"Solve::ratnz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6623481617647905`*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{
  3.662347953687889*^9, {3.6623479980794277`*^9, 3.662348023787898*^9}, 
   3.6623481617667904`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FindRoot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "2"]}], "+", 
    SuperscriptBox[
     RowBox[{"Cos", "[", 
      RowBox[{"4", " ", "x"}], "]"}], "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0.01"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     FractionBox["1", "2"]}], "+", 
    SuperscriptBox[
     RowBox[{"Cos", "[", 
      RowBox[{"4", " ", "x"}], "]"}], "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6623480264470506`*^9, 3.662348131393053*^9}, {
  3.6623481698982553`*^9, 3.6623482088174815`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", "0.19634954084936207`"}], "}"}]], "Output",
 CellChangeTimes->{{3.6623480777869873`*^9, 3.6623480953629923`*^9}, 
   3.6623481319770865`*^9, {3.6623481725784087`*^9, 3.662348209294509*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwU2nc8V98fB3A7JElCpZL6qiRRKllv7SijklREkqRIJUlbKSFFskKS7E1L
eN/svednXXvPjy3jd3/++Tzej3M+5957zvk4z9fjcTda3Dp9lYuDg4PFy8Hx
/08dbeFD/zYKEI8GF6k/ElZdfzrCv16AED1TnstH1S1uIyHiawQIS60LO9fO
kRAfffnEZnEBIv2ijL3GFAn3i2qmlUQFiDy9kWrbERIO9hyKBGEBwkKuOTu+
mwRh/u9ndAUFiF3sPTjLIKF5iyznRT4BQujUpwfGVSREHPNPtOYSIOwdK1ML
/pJw6xq/ieMCP1G0Llv3aAoJqq8fCLyc5Sf4CJsTTaEk8EX1/fCe5CeIkZaS
x+4kVBdctPzM5if2dssIqDiQENxVtiJhiJ+Q3CN+md+EBGs+Tczo4yec4uxO
jBwgYeGI9JqGNn4iXCtIbxk/CcVXvQvbWfzEmlGewSM9LPB15bo3SuMnOkTL
t4YUsGB7fkelUC0/0aUaXJD0mAWTHWcfr6nkJ97vexxwy4gFOTyFcltL+Yng
+3LdRjtYYHw4xvVQLj+R/LlBIrKeCZss1+w+hfxExasw/ZVRTBh64dFy6Q8/
MeT3ICnVkQmuubZqzmn8hM2IcvEHESakHtw1mvyVn9DTzApX2cmAxxZfQ7M/
8xOe79N93rHpcNxF7GTZJ37iSd/T/bvT6UD+nYzs/sBPHBUdYt/aRQehA39M
1r/kJ2q4z/zeuZYGjebygvLP+InJ8drjJtXNEP4s5Of+R/yEhdDvjEnXZthP
PBU968BP8Cdv+Pm6rwms4HCRhyU1Hn+GVdiXRlAy+34v0JyfKDh9JPnviUaY
eyK7KcqEn/gh5r3JabwBPmTzP8kx5Cd2nd1D/32gAQiN8t0zh/kJ8fQGN7my
OlirbvTZ6j9+YuvPlxa136rhir3cqQ0b+Qk5/4pr87uqIS5igatJip8Qybvi
N5BdBWrLoqy0xfiJ9Eclt+5HVsJF1tQOeW5+4qWArcUqZil8ehaYOdqyhOgJ
+nhYcTgX1uYzmh8FLyG0IhKPNEAgXJlJ9tgTQNUCrzQl0t5D3A5XjaEPS4hn
l6uX6uo8AzW/HV/MPJYQLdaG2/8MP8eL155YH3ReQgS8XtUY5fMNPwlITy0x
XkJI3UuVOJPyB9fqXRH7sHIJUZDb8+AcsxwD3DIu+i5fQhwX0Mp5k12B4rkr
vn5cuoR4dKnuUnVIJYqoEEoB3EsIn1NrXyjHVSGfzDr9kDE+YvV+rnXrz9Xg
CxMHv9BhPsJeiUtLF2uQw7+U+bmfjzh388rOU7K1+G+p883wdj5CT55dnzVS
iyMTDW+iavkIwdDWPQ8d69FOUaE6upKPaAj03fmlrh77bVwlY0v5iLowRcJG
qQG7yN1R8bl8hPT7/IDqrgakF7/PS0njI76LrUs9pdWExjw9S9OS+IjI9aLG
Uz5N2KAJZ9Lj+IiMrtpSsY4mrEobbP3xlWqPV/4X/rwZC0J0Fv984CPua6cL
usbQ8HDTl6NZ7/gIT9i85PIwDf+KzrzN9qDuZ+naTe920zHzdZTU3xd8xPDF
jXVVP+i4P2fhSs5T6v7dLqkyJuj4Y+5sXO5DPuL9XY4r23YzMOU2j2rBXT4i
/ox4xYNoBirEX3xeeIuP6A5VJ+61MDC+K7Wo6AYfISvypS5CnImRFy+fK73C
R0juEFzweszEzX6/QsvM+Iii9vfRhxKZ+KVqeVf5RT7ipToRtp7JxOAj2Q5V
Z/gI9yUhPWp7WLjm2arMan0+ImcVV4bTJRb6Z9zkrj3BR+THNDCqXFnos3Ot
T/0hPkJus/PV4goWLre509wAfESoW7Lm1REWekYUSzep8RGuAnYGK0VIfL3a
KYm2m5ofnrmzodok8hhWTtJ3Uu0Ktmn3r5Do4iWrydzOR0ysapEyeUjiYtFj
V9YWPmLkEs8qHW8SH3HXl5Gb+AhjN4aG1jcSZzXkxVo38BF+WbXGGj9JvO/0
4mLbWj5iY1r1Ua1CEsdTaeHtEnyEqedJ/uP1JN4ZVOrrWMlH/Cs2zjrTSqIP
0+jA7HJqvr7W8O/pJzG1/GHAciE+oixrIE1+jMSarLDhzfx8RJvorcOqMySO
JuQfVeXhI4SSnpqazpMoEtoXos9Brd/BaPy4SKKi1/IJyzleInmk+Xg7VRs8
UT7pPM1LWBrdGj+yQKK93fmv78Z5CeN6eXrWLInvLz2ZjRjhJWTEYfeJCRKT
9b6eyhjgJQKL9xkMDZJYpVkUXdnDSwxF8n+N6iBxRGFwsaODl1gbNff7fjN1
/Q2i52ZbeAn5J0laZmXU9ZfvS1zO5CVKT3NzmGVR11+8yPtfMy+Rly7Guh9P
4q3hZyaq9bzE5lp5VmwgiV7ktzT9al6inZ0iPfOSxMTKEsGr5bxEm6x4+xU7
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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->
   NCache[{{-Pi, Pi}, {-0.49999505807170114`, 
     0.4999999999997369}}, {{-3.141592653589793, 
    3.141592653589793}, {-0.49999505807170114`, 0.4999999999997369}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6623480777869873`*^9, 3.6623480953629923`*^9}, 
   3.6623481319770865`*^9, {3.6623481725784087`*^9, 3.6623482093295107`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"TrigReduce", "[", 
  SuperscriptBox[
   RowBox[{"Cos", "[", 
    RowBox[{
     RowBox[{"4", " ", "x"}], "-", 
     FractionBox["\[Pi]", "16"]}], "]"}], "2"], "]"}]], "Input",
 CellChangeTimes->{{3.662348346545359*^9, 3.6623483549588404`*^9}, {
  3.662348703644784*^9, 3.662348722004834*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"(", 
   RowBox[{"1", "-", 
    RowBox[{"Sin", "[", 
     RowBox[{
      RowBox[{"8", " ", "x"}], "-", 
      FractionBox["\[Pi]", "8"]}], "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.662348732836454*^9, 3.6623487417489634`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindInstance", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox[
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"4", "*", "0.2"}], "+", "\[Pi]"}], "]"}], "2"], "\[Equal]", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "-", 
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"8", "*", "0.2"}], "+", "\[Phi]"}], "]"}]}]}]}], "&&", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"Cos", "[", 
       RowBox[{
        RowBox[{"4", "*", 
         RowBox[{"(", 
          RowBox[{"-", "0.1"}], ")"}]}], "+", "\[Pi]"}], "]"}], "2"], 
     "\[Equal]", 
     RowBox[{
      RowBox[{"1", "/", "2"}], "-", 
      RowBox[{
       RowBox[{"1", "/", "2"}], 
       RowBox[{"Sin", "[", 
        RowBox[{
         RowBox[{"8", "*", 
          RowBox[{"(", 
           RowBox[{"-", "0.1"}], ")"}]}], "+", "\[Phi]"}], "]"}]}]}]}]}], ",",
    "\[Phi]", ",", "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.6623480700335436`*^9, 3.662348070044544*^9}, {
  3.6623482992086515`*^9, 3.6623484188434944`*^9}, {3.662348466407215*^9, 
  3.6623484682223186`*^9}, {3.6623485145509686`*^9, 3.6623485666789503`*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.6623484706124554`*^9, 3.6623485675630007`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FourierTransform", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Cos", "[", 
     RowBox[{"x", "/", "2"}], "]"}], "2"], ",", "x", ",", "\[Omega]", ",", 
   RowBox[{"FourierParameters", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.66234860234599*^9, 3.6623486635014877`*^9}, {
   3.66234875724585*^9, 3.6623487644922647`*^9}, {3.662348885460183*^9, 
   3.6623489161629395`*^9}, {3.662349098946394*^9, 3.66234915220144*^9}, 
   3.6623492215464067`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "4"], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}]}], "+", 
  FractionBox[
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], "2"], "+", 
  RowBox[{
   FractionBox["1", "4"], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"1", "+", "\[Omega]"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.6623489005530467`*^9, 3.662348917943041*^9}, {
   3.662349099896448*^9, 3.662349152676467*^9}, 3.6623492225444636`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FourierTransform", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", "x", ",", "\[Omega]", ",", 
   RowBox[{"FourierParameters", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Collect", "[", 
  RowBox[{
   RowBox[{"FourierTransform", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"x", "+", 
       FractionBox["\[Pi]", "6"]}], "]"}], ",", "x", ",", "\[Omega]", ",", 
     RowBox[{"FourierParameters", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.662349330811442*^9, 3.6623493663327045`*^9}, {
  3.662349401479566*^9, 3.6623494033827696`*^9}, {3.66234946631328*^9, 
  3.662349467389682*^9}, {3.662402196359118*^9, 3.6624021975261846`*^9}, {
  3.662402350548937*^9, 3.6624023969405904`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}]}], "-", 
  RowBox[{
   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"1", "+", "\[Omega]"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.662349331248243*^9, 3.662349367346706*^9}, 
   3.6623494045059714`*^9, 3.6623494678576827`*^9, {3.662402376931446*^9, 
   3.6624023972246065`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "4"], "+", 
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", 
       SqrtBox["3"]}], "4"]}], ")"}], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "4"], "-", 
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", 
       SqrtBox["3"]}], "4"]}], ")"}], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"1", "+", "\[Omega]"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.662349331248243*^9, 3.662349367346706*^9}, 
   3.6623494045059714`*^9, 3.6623494678576827`*^9, {3.662402376931446*^9, 
   3.6624023972506084`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Arg", "[", 
  RowBox[{"(", 
   RowBox[{
    FractionBox["1", "4"], "+", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", 
      SqrtBox["3"]}], "4"]}], ")"}], "]"}]], "Input",
 CellChangeTimes->{{3.6624024195488834`*^9, 3.6624024529347935`*^9}, {
  3.662402910514965*^9, 3.6624029158252687`*^9}}],

Cell[BoxData[
 FractionBox["\[Pi]", "3"]], "Output",
 CellChangeTimes->{{3.6624024315725713`*^9, 3.6624024534568233`*^9}, 
   3.6624029116910324`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpToTrig", "[", 
  RowBox[{"Exp", "[", 
   RowBox[{"I", 
    RowBox[{"(", 
     RowBox[{"x", "+", 
      FractionBox["\[Pi]", "6"]}], ")"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6624027667217407`*^9, 3.662402829218315*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", 
   RowBox[{
    FractionBox["\[Pi]", "6"], "+", "x"}], "]"}], "+", 
  RowBox[{"\[ImaginaryI]", " ", 
   RowBox[{"Sin", "[", 
    RowBox[{
     FractionBox["\[Pi]", "6"], "+", "x"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.6624027737671432`*^9, 3.6624028298303504`*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"F", "[", "\[Omega]", "]"}], "=", 
  RowBox[{"\[Integral]", 
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"x", "+", 
      FractionBox["\[Pi]", "6"]}], "]"}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{"I", " ", "\[Omega]", " ", "x"}], "]"}], 
    RowBox[{"\[DifferentialD]", "x"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"F", "[", "\[Omega]", "]"}], "=", 
  RowBox[{"\[Integral]", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Exp", "[", 
        RowBox[{"I", 
         RowBox[{"(", 
          RowBox[{"x", "+", 
           FractionBox["\[Pi]", "6"]}], ")"}]}], "]"}], "-", 
       RowBox[{"Exp", "[", 
        RowBox[{
         RowBox[{"-", "I"}], 
         RowBox[{"(", 
          RowBox[{"x", "+", 
           FractionBox["\[Pi]", "6"]}], ")"}]}], "]"}]}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{"2", "I"}], ")"}]}], "*", 
    RowBox[{"Exp", "[", 
     RowBox[{"I", " ", "\[Omega]", " ", "x"}], "]"}], 
    RowBox[{"\[DifferentialD]", "x"}]}]}]}]}], "Input",
 CellChangeTimes->{{3.6624025476502104`*^9, 3.6624026397384777`*^9}, {
  3.662402684258024*^9, 3.6624027528029447`*^9}, {3.6624030220493445`*^9, 
  3.6624030375212297`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Collect", "[", 
  RowBox[{
   RowBox[{"Expand", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Exp", "[", 
         RowBox[{"I", 
          RowBox[{"(", 
           RowBox[{"x", "+", 
            FractionBox["\[Pi]", "6"]}], ")"}]}], "]"}], "-", 
        RowBox[{"Exp", "[", 
         RowBox[{
          RowBox[{"-", "I"}], 
          RowBox[{"(", 
           RowBox[{"x", "+", 
            FractionBox["\[Pi]", "6"]}], ")"}]}], "]"}]}], ")"}], "/", 
      RowBox[{"(", 
       RowBox[{"2", "I"}], ")"}]}], "*", 
     RowBox[{"Exp", "[", 
      RowBox[{"I", " ", "\[Omega]", " ", "x"}], "]"}]}], "]"}], ",", "I"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.662402873777864*^9, 3.6624028766580286`*^9}, {
  3.6624030267776155`*^9, 3.662403044464627*^9}, {3.662403158184131*^9, 
  3.6624032018716297`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "\[ImaginaryI]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        FractionBox["\[Pi]", "6"], "+", "x"}], ")"}]}], "+", 
     RowBox[{"\[ImaginaryI]", " ", "x", " ", "\[Omega]"}]}]]}], "-", 
  RowBox[{
   FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"\[ImaginaryI]", " ", 
      RowBox[{"(", 
       RowBox[{
        FractionBox["\[Pi]", "6"], "+", "x"}], ")"}]}], "+", 
     RowBox[{"\[ImaginaryI]", " ", "x", " ", "\[Omega]"}]}]]}]}]], "Output",
 CellChangeTimes->{3.66240369647892*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExpToTrig", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Exp", "[", 
      RowBox[{"I", 
       RowBox[{"(", 
        RowBox[{"x", "+", 
         FractionBox["\[Pi]", "6"]}], ")"}]}], "]"}], "-", 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", "I"}], 
       RowBox[{"(", 
        RowBox[{"x", "+", 
         FractionBox["\[Pi]", "6"]}], ")"}]}], "]"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{"2", "I"}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.662403841962241*^9, 3.662403858766202*^9}}],

Cell[BoxData[
 RowBox[{"Sin", "[", 
  RowBox[{
   FractionBox["\[Pi]", "6"], "+", "x"}], "]"}]], "Output",
 CellChangeTimes->{{3.662403839999129*^9, 3.662403859742258*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], "I", " ", 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", "I"}], " ", 
       FractionBox["\[Pi]", "6"]}], "]"}], 
     RowBox[{"Exp", "[", 
      RowBox[{"I", " ", "x", 
       RowBox[{"(", " ", 
        RowBox[{"\[Omega]", "-", "1"}], ")"}]}], "]"}]}], "\[Rule]", " ", 
    RowBox[{
     FractionBox["I", "2"], 
     RowBox[{"Exp", "[", 
      RowBox[{
       RowBox[{"-", "I"}], " ", 
       FractionBox["\[Pi]", "6"]}], "]"}], 
     RowBox[{"DiracDelta", "[", 
      RowBox[{"\[Omega]", "-", "1"}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"Exp", "[", 
     FractionBox["\[Pi]", "2"], "]"}], " ", 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "I"}], " ", 
      FractionBox["\[Pi]", "6"]}], "]"}], 
    RowBox[{"Exp", "[", 
     RowBox[{"I", " ", "x", 
      RowBox[{"(", " ", 
       RowBox[{"\[Omega]", "-", "1"}], ")"}]}], "]"}]}], "\[Rule]", " ", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"Exp", "[", 
     RowBox[{"I", " ", 
      FractionBox["\[Pi]", "2"]}], "]"}], 
    RowBox[{"Exp", "[", 
     RowBox[{
      RowBox[{"-", "I"}], " ", 
      FractionBox["\[Pi]", "6"]}], "]"}], 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"\[Omega]", "-", "1"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6624032327733974`*^9, 3.662403250150391*^9}, {
  3.6624032884065795`*^9, 3.6624033311500244`*^9}, {3.662403365462987*^9, 
  3.662403451116886*^9}, {3.662403708675617*^9, 3.662403713979921*^9}, {
  3.662403766274912*^9, 3.66240376939509*^9}, {3.6624040645049696`*^9, 
  3.662404102312132*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", "2"]}], "I", " ", 
   RowBox[{"Exp", "[", 
    RowBox[{"I", " ", 
     FractionBox["\[Pi]", "6"]}], "]"}], 
   RowBox[{"Exp", "[", 
    RowBox[{"I", " ", "x", 
     RowBox[{"(", " ", 
      RowBox[{"\[Omega]", "+", "1"}], ")"}]}], "]"}]}], "\[Rule]", " ", 
  RowBox[{
   FractionBox["1", "2"], 
   RowBox[{"Exp", "[", 
    RowBox[{"I", 
     FractionBox[
      RowBox[{"-", "\[Pi]"}], "2"]}], "]"}], 
   RowBox[{"Exp", "[", 
    RowBox[{"I", " ", 
     FractionBox["\[Pi]", "6"]}], "]"}], 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"\[Omega]", "+", "1"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.662403665028121*^9, 3.6624036772678213`*^9}, {
  3.662403718828198*^9, 3.662403721635359*^9}, {3.6624037814427795`*^9, 
  3.6624038004188647`*^9}, {3.662404003737494*^9, 3.662404031593087*^9}, {
  3.6624041231523237`*^9, 3.6624041319998302`*^9}, {3.6624042417121058`*^9, 
  3.662404263679362*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Arg", " ", "should", " ", "come", " ", "out", " ", "as", " ", "0", " ", 
   "for", " ", "simple", " ", "sine", " ", "transform"}], "*)"}]], "Input",
 CellChangeTimes->{{3.662403625251846*^9, 3.6624036428828545`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Collect", "[", 
  RowBox[{
   RowBox[{"FourierTransform", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"x", "+", 
        RowBox[{"\[Pi]", "/", "6"}]}], "]"}], "+", "1"}], ",", "x", ",", 
     "\[Omega]", ",", 
     RowBox[{"FourierParameters", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6624041876880155`*^9, 3.66240418898409*^9}, {
  3.6624043482481985`*^9, 3.6624043605029*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "4"], "+", 
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", 
       SqrtBox["3"]}], "4"]}], ")"}], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}]}], "+", 
  RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "4"], "-", 
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", 
       SqrtBox["3"]}], "4"]}], ")"}], " ", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"1", "+", "\[Omega]"}], "]"}]}]}]], "Output",
 CellChangeTimes->{
  3.6624041917852497`*^9, {3.6624043543255463`*^9, 3.6624043609319243`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Arg", "[", 
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "4"], "-", 
     FractionBox[
      RowBox[{"\[ImaginaryI]", " ", 
       SqrtBox["3"]}], "4"]}], ")"}], "]"}], "+", 
  FractionBox["\[Pi]", "2"]}], "\[IndentingNewLine]", 
 RowBox[{"-", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Arg", "[", 
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "4"], "+", 
       FractionBox[
        RowBox[{"\[ImaginaryI]", " ", 
         SqrtBox["3"]}], "4"]}], ")"}], " ", "]"}], "-", 
    FractionBox["\[Pi]", "2"]}], ")"}]}]}], "Input",
 CellChangeTimes->{{3.662403620018546*^9, 3.6624036222036715`*^9}, {
  3.662404516213806*^9, 3.6624046174135942`*^9}, {3.6624046674934587`*^9, 
  3.6624046735248036`*^9}}],

Cell[BoxData[
 FractionBox["\[Pi]", "6"]], "Output",
 CellChangeTimes->{{3.662404535098886*^9, 3.66240454251131*^9}, {
   3.6624046118582764`*^9, 3.6624046179576254`*^9}, 3.6624046740288324`*^9}],

Cell[BoxData[
 FractionBox["\[Pi]", "6"]], "Output",
 CellChangeTimes->{{3.662404535098886*^9, 3.66240454251131*^9}, {
   3.6624046118582764`*^9, 3.6624046179576254`*^9}, 3.6624046740308323`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"List", ",", 
   RowBox[{"Collect", "[", 
    RowBox[{
     RowBox[{"FourierTransform", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{"x", "+", 
          RowBox[{"\[Pi]", "/", "3"}]}], "]"}], "+", "1"}], ",", "x", ",", 
       "\[Omega]", ",", 
       RowBox[{"FourierParameters", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"DiracDelta", "[", 
      RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.662392842768123*^9, {3.662490403315919*^9, 3.6624904374828734`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["\[ImaginaryI]", "4"], "+", 
      FractionBox[
       SqrtBox["3"], "4"]}], ")"}], " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}]}], ",", 
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["\[ImaginaryI]", "4"]}], "+", 
      FractionBox[
       SqrtBox["3"], "4"]}], ")"}], " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"1", "+", "\[Omega]"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.662392843305154*^9, 3.662392883402447*^9, 3.6623929499142513`*^9, 
   3.6623929832501583`*^9, {3.6624904073351493`*^9, 3.6624904136025076`*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["\[ImaginaryI]", "4"], "+", 
  FractionBox[
   SqrtBox["3"], "4"]}]], "Output",
 CellChangeTimes->{
  3.662392843305154*^9, 3.662392883402447*^9, 3.6623929499142513`*^9, 
   3.6623929832501583`*^9, {3.6624904073351493`*^9, 3.6624904136045074`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Level", "[", 
  RowBox[{
   RowBox[{"Apply", "[", 
    RowBox[{"List", ",", 
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"FourierTransform", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"x", "+", 
            RowBox[{"\[Pi]", "/", "3"}]}], "]"}], "+", "1"}], ",", "x", ",", 
         "\[Omega]", ",", 
         RowBox[{"FourierParameters", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
       RowBox[{"DiracDelta", "[", 
        RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}], ",", "2"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.662404829260711*^9, 3.6624048365321274`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["\[ImaginaryI]", "4"], "+", 
    FractionBox[
     SqrtBox["3"], "4"]}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["\[ImaginaryI]", "4"], "+", 
      FractionBox[
       SqrtBox["3"], "4"]}], ")"}], " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}]}], ",", "\[Omega]", ",", 
   RowBox[{"DiracDelta", "[", "\[Omega]", "]"}], ",", 
   RowBox[{
    RowBox[{"-", 
     FractionBox["\[ImaginaryI]", "4"]}], "+", 
    FractionBox[
     SqrtBox["3"], "4"]}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"1", "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["\[ImaginaryI]", "4"]}], "+", 
      FractionBox[
       SqrtBox["3"], "4"]}], ")"}], " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"1", "+", "\[Omega]"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6624048101066155`*^9, 3.662404836787142*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Arg", "[", 
  RowBox[{
   RowBox[{"Level", "[", 
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"List", ",", 
       RowBox[{"Collect", "[", 
        RowBox[{
         RowBox[{"FourierTransform", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sin", "[", 
             RowBox[{"x", "+", 
              RowBox[{"\[Pi]", "/", "3"}]}], "]"}], "+", "1"}], ",", "x", ",",
            "\[Omega]", ",", 
           RowBox[{"FourierParameters", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
         RowBox[{"DiracDelta", "[", 
          RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}], ",", 
     "2"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Arg", "[", 
  RowBox[{
   RowBox[{"Level", "[", 
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"List", ",", 
       RowBox[{"Collect", "[", 
        RowBox[{
         RowBox[{"FourierTransform", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sin", "[", 
             RowBox[{"x", "+", 
              RowBox[{"\[Pi]", "/", "3"}]}], "]"}], "+", "1"}], ",", "x", ",",
            "\[Omega]", ",", 
           RowBox[{"FourierParameters", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
         RowBox[{"DiracDelta", "[", 
          RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}], ",", 
     "2"}], "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.662349385115137*^9, 3.6623493876111417`*^9}, {
  3.6624904729549026`*^9, 3.6624904954591894`*^9}}],

Cell[BoxData[
 FractionBox["\[Pi]", "6"]], "Output",
 CellChangeTimes->{
  3.6623493884379435`*^9, {3.662490484297551*^9, 3.6624904958912144`*^9}}],

Cell[BoxData[
 RowBox[{"Arg", "[", 
  RowBox[{"DiracDelta", "[", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "\[Omega]"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{
  3.6623493884379435`*^9, {3.662490484297551*^9, 3.662490495919216*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
       "There", " ", "are", " ", "two", " ", "cases", " ", "for", " ", 
        "phase", " ", 
        RowBox[{"extraction", ":", " ", "1"}]}], ")"}], " ", "when", " ", 
      "the", " ", "above", " ", "Level", " ", "function", " ", "applied", " ",
       "to", " ", "the", " ", "FT", " ", "list", " ", "will", " ", "net", " ",
       "a", " ", "complex", " ", "number", " ", "in", " ", "the", " ", 
      "first", " ", "slot", " ", "and", " ", "2"}], ")"}], " ", "when", " ", 
    "it", " ", "will", " ", "result", " ", "in", " ", 
    RowBox[{
     RowBox[{"DiracDelta", "[", "_", "]"}], ".", " ", "Handle"}], " ", 
    "these", " ", "separately"}], ",", " ", 
   RowBox[{"because", " ", 
    RowBox[{"Arg", "[", "]"}], " ", "does", " ", "not", " ", "work", " ", 
    "on", " ", "DiracDelta"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.662490560565913*^9, 3.6624906676490383`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Level", "[", 
    RowBox[{
     RowBox[{"Apply", "[", 
      RowBox[{"List", ",", 
       RowBox[{"Collect", "[", 
        RowBox[{
         RowBox[{"FourierTransform", "[", 
          RowBox[{
           RowBox[{"2", 
            RowBox[{"Cos", "[", "x", "]"}]}], ",", "x", ",", "\[Omega]", ",", 
           RowBox[{"FourierParameters", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
         RowBox[{"DiracDelta", "[", 
          RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}], ",", 
     "2"}], "]"}], ",", 
   RowBox[{
    RowBox[{"NumberQ", "[", "#", "]"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.662490991067537*^9, 3.6624910260465374`*^9}, {
   3.6624911325426283`*^9, 3.6624912281980996`*^9}, 3.662492114457791*^9, 
   3.662493091793691*^9}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.6624909920805945`*^9, 3.662491026401558*^9}, 
   3.662491154522886*^9, {3.662491194341163*^9, 3.662491215980401*^9}, 
   3.662492115583855*^9, 3.6624930922467175`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatchQ", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Level", "[", 
      RowBox[{
       RowBox[{"Apply", "[", 
        RowBox[{"List", ",", 
         RowBox[{"Collect", "[", 
          RowBox[{
           RowBox[{"FourierTransform", "[", 
            RowBox[{
             RowBox[{"Cos", "[", "x", "]"}], ",", "x", ",", "\[Omega]", ",", 
             RowBox[{"FourierParameters", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
           RowBox[{"DiracDelta", "[", 
            RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}], ",", 
       "2"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.662490675321477*^9, 3.6624909784398146`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.6624909790328484`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Apply", "[", 
     RowBox[{"List", ",", "#"}], "]"}], "&"}], "/@", 
   RowBox[{"Apply", "[", 
    RowBox[{"List", ",", 
     RowBox[{"Collect", "[", 
      RowBox[{
       RowBox[{"FourierTransform", "[", 
        RowBox[{
         RowBox[{"2", 
          RowBox[{"Cos", "[", "x", "]"}]}], ",", "x", ",", "\[Omega]", ",", 
         RowBox[{"FourierParameters", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
       RowBox[{"DiracDelta", "[", 
        RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6624932122825828`*^9, 3.6624932125515985`*^9}, {
   3.6624933684065127`*^9, 3.6624933831103535`*^9}, 3.6624935346710224`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "\[Omega]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", "+", "\[Omega]"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.66249321311063*^9, 3.662493384545436*^9, 
  3.662493535188052*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FourierTestList", "=", 
  RowBox[{"Apply", "[", 
   RowBox[{"List", ",", 
    RowBox[{"Collect", "[", 
     RowBox[{
      RowBox[{"FourierTransform", "[", 
       RowBox[{
        RowBox[{"7", 
         RowBox[{"Sin", "[", 
          RowBox[{
           RowBox[{"3", "x"}], "+", 
           FractionBox["\[Pi]", "6"]}], "]"}]}], ",", "x", ",", "\[Omega]", 
        ",", 
        RowBox[{"FourierParameters", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
      RowBox[{"DiracDelta", "[", 
       RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.662494218248121*^9, 3.662494228152687*^9}, {
  3.6624943375449443`*^9, 3.6624943429842553`*^9}, {3.6624949973566833`*^9, 
  3.662495041950234*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["7", "4"], "+", 
      FractionBox[
       RowBox[{"7", " ", "\[ImaginaryI]", " ", 
        SqrtBox["3"]}], "4"]}], ")"}], " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["7", "4"], "-", 
      FractionBox[
       RowBox[{"7", " ", "\[ImaginaryI]", " ", 
        SqrtBox["3"]}], "4"]}], ")"}], " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"3", "+", "\[Omega]"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.662494220194232*^9, 3.6624942286257143`*^9}, 
   3.662494344080318*^9, {3.662495026588355*^9, 3.6624950435193233`*^9}, 
   3.66249528979541*^9, 3.6624953391282315`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LeveledList", "=", 
  RowBox[{"Level", "[", 
   RowBox[{"FourierTestList", ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6624940552107954`*^9, 3.662494057121905*^9}, {
   3.662494236962191*^9, 3.6624942830808287`*^9}, {3.6624950865067825`*^9, 
   3.662495087930864*^9}, 3.6624952760816255`*^9, {3.6624953344409637`*^9, 
   3.6624953350960007`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    FractionBox["7", "4"], "+", 
    FractionBox[
     RowBox[{"7", " ", "\[ImaginaryI]", " ", 
      SqrtBox["3"]}], "4"]}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["7", "4"], "+", 
      FractionBox[
       RowBox[{"7", " ", "\[ImaginaryI]", " ", 
        SqrtBox["3"]}], "4"]}], ")"}], " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{
      RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}]}], ",", 
   RowBox[{
    FractionBox["7", "4"], "-", 
    FractionBox[
     RowBox[{"7", " ", "\[ImaginaryI]", " ", 
      SqrtBox["3"]}], "4"]}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      FractionBox["7", "4"], "-", 
      FractionBox[
       RowBox[{"7", " ", "\[ImaginaryI]", " ", 
        SqrtBox["3"]}], "4"]}], ")"}], " ", 
    RowBox[{"DiracDelta", "[", 
     RowBox[{"3", "+", "\[Omega]"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6624942522900677`*^9, 3.662494285140947*^9, 3.6624943500696607`*^9, {
   3.6624950305905843`*^9, 3.662495045568441*^9}, 3.662495088516897*^9, {
   3.6624952783687563`*^9, 3.662495291628515*^9}, 3.662495340700321*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumberQ", "[", 
  RowBox[{"LeveledList", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6624952540313644`*^9, 3.66249526182481*^9}, {
  3.662495342880446*^9, 3.6624953478167286`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.662495348476766*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FourierTestList", "=", 
  RowBox[{"Apply", "[", 
   RowBox[{"List", ",", 
    RowBox[{"Collect", "[", 
     RowBox[{
      RowBox[{"FourierTransform", "[", 
       RowBox[{
        RowBox[{"2", 
         RowBox[{"Cos", "[", 
          RowBox[{"3", "x"}], "]"}]}], ",", "x", ",", "\[Omega]", ",", 
        RowBox[{"FourierParameters", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
      RowBox[{"DiracDelta", "[", 
       RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.662494218248121*^9, 3.662494228152687*^9}, {
  3.6624943375449443`*^9, 3.6624943429842553`*^9}, {3.6624949973566833`*^9, 
  3.662495041950234*^9}, {3.6624952082977486`*^9, 3.6624952183213215`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.662495221005475*^9, 3.662510668927046*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LeveledList", "=", 
  RowBox[{"Level", "[", 
   RowBox[{"FourierTestList", ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6624953101045713`*^9, 3.6624953131767473`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "3"}], "+", "\[Omega]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{
     RowBox[{"-", "3"}], "+", "\[Omega]"}], "]"}], ",", 
   RowBox[{"3", "+", "\[Omega]"}], ",", 
   RowBox[{"DiracDelta", "[", 
    RowBox[{"3", "+", "\[Omega]"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6624952858181825`*^9, 3.6625106701281147`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"LeveledList", "[", 
  RowBox[{"[", "1", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"NumericQ", "[", 
  RowBox[{"LeveledList", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.662495241470646*^9, 3.662495249289093*^9}, {
  3.662496836157857*^9, 3.6624968560619955`*^9}, {3.6624970023023596`*^9, 
  3.662497002692382*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "3"}], "+", "\[Omega]"}]], "Output",
 CellChangeTimes->{
  3.6624952497901216`*^9, {3.6624968371669145`*^9, 3.6624968564510174`*^9}, 
   3.662497003825447*^9, 3.662510671481192*^9}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.6624952497901216`*^9, {3.6624968371669145`*^9, 3.6624968564510174`*^9}, 
   3.662497003825447*^9, 3.662510671482192*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"NumericQ", "[", 
    RowBox[{
     RowBox[{"Level", "[", 
      RowBox[{
       RowBox[{"Apply", "[", 
        RowBox[{"List", ",", 
         RowBox[{"Collect", "[", 
          RowBox[{
           RowBox[{"FourierTransform", "[", 
            RowBox[{
             RowBox[{"2", 
              RowBox[{"Cos", "[", 
               RowBox[{"3", "x"}], "]"}]}], ",", "x", ",", "\[Omega]", ",", 
             RowBox[{"FourierParameters", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
           RowBox[{"DiracDelta", "[", 
            RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}], ",", 
       "2"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"phase", "=", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Arg", "[", 
       RowBox[{
        RowBox[{"Level", "[", 
         RowBox[{
          RowBox[{"Apply", "[", 
           RowBox[{"List", ",", 
            RowBox[{"Collect", "[", 
             RowBox[{
              RowBox[{"FourierTransform", "[", 
               RowBox[{
                RowBox[{"2", 
                 RowBox[{"Cos", "[", 
                  RowBox[{"3", "x"}], "]"}]}], ",", "x", ",", "\[Omega]", ",", 
                RowBox[{"FourierParameters", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], ",", 
              RowBox[{"DiracDelta", "[", 
               RowBox[{"_.", "+", "\[Omega]"}], "]"}]}], "]"}]}], "]"}], ",", 
          "2"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "+", 
     FractionBox["\[Pi]", "2"]}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"phase", "=", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Arg", "[", "1", "]"}]}], "+", 
     FractionBox["\[Pi]", "2"]}]}]}]}]], "Input",
 CellChangeTimes->{{3.6625110925942783`*^9, 3.6625111498485527`*^9}, {
   3.6625111817453775`*^9, 3.662511263672063*^9}, 3.66251249899972*^9}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Challenge 2", "Section",
 CellChangeTimes->{{3.642781316344653*^9, 3.642781318586632*^9}}],

Cell[TextData[{
 "Write a function called ",
 StyleBox["Max3EvenSum", "Input"],
 " that takes a list of Integers as an input, and returns the sum of the \
largest three even numbers in the list."
}], "Text",
 CellChangeTimes->{{3.6427813199003983`*^9, 3.642781435952222*^9}, {
  3.642781630399053*^9, 3.642781631653141*^9}}],

Cell["\<\
If there are less than three even numbers, return 0. If there is a non \
integer, remain unevaluated.\
\>", "Text",
 CellChangeTimes->{{3.6427813199003983`*^9, 3.642781435952222*^9}, {
  3.642781630399053*^9, 3.642781648755445*^9}}],

Cell["For example", "Text",
 CellChangeTimes->{{3.6427814390957813`*^9, 3.642781440343418*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max3EvenSum", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.642781528577342*^9, 3.642781531202024*^9}}],

Cell[BoxData["12"], "Output",
 CellChangeTimes->{3.64278153160151*^9, 3.642781620560169*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max3EvenSum", "[", 
  RowBox[{"Range", "[", "1000", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.642781532473241*^9, 3.642781535168902*^9}}],

Cell[BoxData["2994"], "Output",
 CellChangeTimes->{3.6427815355776176`*^9, 3.6427816209766273`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max3EvenSum", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3", ",", "5", ",", "7"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.642781544737307*^9, 3.6427815473624687`*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.6427815479395657`*^9, 3.642781584672916*^9, 
  3.642781621327119*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max3EvenSum", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "2", ",", "4", ",", "5"}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.642781590961026*^9, 3.642781595070003*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.6427815954562693`*^9, 3.642781621676737*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max3EvenSum", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "x"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.64278160153609*^9, 3.642781603097323*^9}}],

Cell[BoxData[
 RowBox[{"Max3EvenSum", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "x"}], "}"}], 
  "]"}]], "Output",
 CellChangeTimes->{{3.642781603572052*^9, 3.642781622044342*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Challenge 3", "Section",
 CellChangeTimes->{{3.651239622032544*^9, 3.65123962410299*^9}, {
  3.6512399266908712`*^9, 3.651239926842835*^9}}],

Cell["\<\
Given a list of integers with n elements, construct an algorithm that finds \
two numbers in the list that add up to a given number m. The algorithm\
\[CloseCurlyQuote]s runtime should be O(n log n). You only need to give the \
psuedocode.\
\>", "Text",
 CellChangeTimes->{{3.6512396266067543`*^9, 3.651239673598418*^9}, {
  3.651239801446415*^9, 3.651239879939786*^9}}],

Cell[CellGroupData[{

Cell["Pseudocode", "Subsection",
 CellChangeTimes->{{3.662664672121143*^9, 3.662664673921246*^9}}],

Cell["\<\
As per usual, the demonstration of the work and thought that went into the \
code is in the brainstorming part of the code below. \
\>", "Text",
 CellChangeTimes->{{3.6627132821985655`*^9, 3.6627133307383423`*^9}}],

Cell[CellGroupData[{

Cell["SumToM", "Subsubsection",
 CellChangeTimes->{{3.662712501751927*^9, 3.662712505887163*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SumToM", "[", 
    RowBox[{"IntegerArray_", ",", "m_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Need", " ", "to", " ", "sort"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SortedArray", "=", 
      RowBox[{"Sort", "[", "IntegerArray", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Addends", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"SortedArray", "=", 
        RowBox[{"MergeSort", "[", "IntegerArray", "]"}]}], ";"}], 
      RowBox[{"(*", 
       RowBox[{"O", 
        RowBox[{"(", 
         RowBox[{"nLog", "[", "n", "]"}], ")"}]}], "*)"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"MergeSort", " ", "below", " ", "in", " ", "pseudocode"}], ",",
        " ", 
       RowBox[{"so", " ", "not", " ", 
        RowBox[{"functional", ".", " ", "SumToM"}], " ", "is", " ", 
        "functional", " ", "here", " ", "with", " ", 
        RowBox[{"Sort", "[", "]"}]}]}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"MatchNotFound", "=", "True"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ArrayLength", "=", 
      RowBox[{"Length", "[", "SortedArray", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "The", " ", "basic", " ", "idea", " ", "is", " ", "to", " ", "move", 
        " ", "in", " ", "along", " ", "the", " ", "array", " ", "from", " ", 
        "the", " ", 
        RowBox[{"edges", ".", " ", "If"}], " ", "the", " ", "sum", " ", "of", 
        " ", "the", " ", "extremal", " ", "elements", " ", "of", " ", "the", 
        " ", "array", " ", "is", " ", "larger", " ", "than", " ", "m"}], ",", 
       " ", 
       RowBox[{
       "remove", " ", "the", " ", "largest", " ", "element", " ", "from", " ",
         "the", " ", 
        RowBox[{"array", ".", " ", "If"}], " ", "smaller", " ", "than", " ", 
        "m"}], ",", " ", 
       RowBox[{"remove", " ", "the", " ", "smallest", " ", 
        RowBox[{"element", ".", " ", "Repeat"}], " ", "until", " ", "the", 
        " ", "array", " ", "is", " ", "empty", " ", "or", " ", "a", " ", 
        "matching", " ", "pair", " ", "of", " ", "integers", " ", "is", " ", 
        "found", " ", "in", " ", "the", " ", 
        RowBox[{"array", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"SortedArray", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], "&&", "MatchNotFound"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Smallest", "=", 
         RowBox[{"SortedArray", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Largest", "=", 
         RowBox[{"SortedArray", "[", 
          RowBox[{"[", "ArrayLength", "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Smallest", "+", "Largest"}], "\[Equal]", "m"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MatchNotFound", "=", "False"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Addends", "=", 
            RowBox[{"{", 
             RowBox[{"Smallest", ",", "Largest"}], "}"}]}], ";"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Smallest", "+", "Largest"}], ">", "m"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"SortedArray", "=", 
               RowBox[{"Drop", "[", 
                RowBox[{"SortedArray", ",", 
                 RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"ArrayLength", "=", 
               RowBox[{"ArrayLength", "-", "1"}]}], ";"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"SortedArray", "=", 
               RowBox[{"Drop", "[", 
                RowBox[{"SortedArray", ",", "1"}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"ArrayLength", "=", 
               RowBox[{"ArrayLength", "-", "1"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
      "MatchNotFound", ",", "\[IndentingNewLine]", "$Failed", ",", 
       "\[IndentingNewLine]", "Addends"}], "]"}]}], "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "This", " ", "will", " ", "at", " ", "most", " ", "run", " ", "through",
        " ", "the", " ", "entire", " ", "list", " ", "once"}], ",", " ", 
      RowBox[{
      "so", " ", "at", " ", "worst", " ", "it", " ", "will", " ", "finish", 
       " ", "in", " ", "O", 
       RowBox[{"(", "n", ")"}]}]}], "*)"}], "\[IndentingNewLine]", ")"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.662685842871126*^9, 3.6626859515733433`*^9}, {
  3.662711166450552*^9, 3.6627111792582846`*^9}, {3.662712434545083*^9, 
  3.6627124652728405`*^9}, {3.6627139632875214`*^9, 3.662713964758606*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["MergeSort", "Subsubsection",
 CellChangeTimes->{{3.6627127720053844`*^9, 3.662712776021614*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MergeList", "[", 
    RowBox[{"Lefty_", ",", "Righty_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"List", " ", "merger", " ", "called", " ", "by", " ", 
       RowBox[{"MergeSort", ".", " ", "The"}], " ", "basic", " ", "idea", " ",
        "is", " ", "to", " ", "construct", " ", "an", " ", "ordered", " ", 
       "list", " ", "from", " ", "the", " ", "elements", " ", "of", " ", 
       "the", " ", "original", " ", "list", " ", "in", " ", "pairs"}], ",", 
      " ", 
      RowBox[{"pairs", " ", "of", " ", "pairs"}], ",", " ", 
      RowBox[{
       RowBox[{"etc", ".", " ", "The"}], " ", "comparative", " ", "part", " ",
        "of", " ", "the", " ", "function", " ", "below", " ", "checks", " ", 
       "to", " ", "see", " ", "which", " ", "value", " ", "is", " ", "lowest",
        " ", "and", " ", "adds", " ", "that", " ", "to", " ", "the", " ", 
       "new", " ", "ordered", " ", 
       RowBox[{"list", ".", " ", "It"}], " ", "does", " ", "this", " ", 
       "until", " ", "one", " ", "of", " ", "the", " ", "lists", " ", "is", 
       " ", 
       RowBox[{"empty", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MergedList", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Lefty", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], "&&", 
        RowBox[{"Righty", "\[NotEqual]", 
         RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "Lefty", "]"}], "\[LessEqual]", 
           RowBox[{"First", "[", "Righty", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MergedList", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"MergedList", ",", 
               RowBox[{"First", "[", "Lefty", "]"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Lefty", "=", 
            RowBox[{"Drop", "[", 
             RowBox[{"Lefty", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Print", "[", "MergedList", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MergedList", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"MergedList", ",", 
               RowBox[{"First", "[", "Righty", "]"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Righty", "=", 
            RowBox[{"Drop", "[", 
             RowBox[{"Righty", ",", "1"}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "Then", " ", "it", " ", "dumps", " ", "the", " ", "remainder", " ", 
        "of", " ", "the", " ", "non"}], "-", 
       RowBox[{
       "empty", " ", "list", " ", "on", " ", "the", " ", "right", " ", "side",
         " ", "of", " ", "the", " ", "ordered", " ", 
        RowBox[{"list", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Lefty", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MergedList", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{"MergedList", ",", "Lefty"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Righty", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MergedList", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{"MergedList", ",", "Righty"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Returns", " ", "the", " ", "now"}], "-", 
       RowBox[{"ordered", " ", "list"}]}], "*)"}], "\[IndentingNewLine]", 
     "MergedList"}], "\[IndentingNewLine]", ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6627051928048787`*^9, 3.6627052468519697`*^9}, {
   3.6627055215156803`*^9, 3.6627055220497103`*^9}, {3.6627055579227624`*^9, 
   3.662705569618431*^9}, {3.6627056438346767`*^9, 3.662705659416568*^9}, {
   3.6627057595942974`*^9, 3.6627057729360604`*^9}, {3.6627058887046824`*^9, 
   3.662705890384778*^9}, 3.662706730377823*^9, 3.6627067947065024`*^9, {
   3.662707063199859*^9, 3.662707117397959*^9}, {3.662707164582658*^9, 
   3.662707205614005*^9}, {3.6627133406589093`*^9, 3.6627135175380263`*^9}, {
   3.6627137585688124`*^9, 3.662713768568384*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MergeSort", "[", "UnsortedArray_", "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Basic", " ", "recursive", " ", 
       RowBox[{"MergeSort", ".", " ", "Split"}], " ", "the", " ", "array", 
       " ", "into", " ", "smaller", " ", "sub"}], "-", 
      RowBox[{
      "arrays", " ", "until", " ", "arrays", " ", "of", " ", "unit", " ", 
       "length", " ", "are", " ", 
       RowBox[{"reached", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "UnsortedArray", "]"}], "\[Equal]", "1"}], " ", 
      RowBox[{"(*", 
       RowBox[{"Success", " ", "condition"}], "*)"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "UnsortedArray", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Split", " ", "list", " ", "into", " ", "two", " ", "sublists", " ", 
        "of", " ", "half", " ", 
        RowBox[{"size", ".", " ", "Recurse"}], " ", "function", " ", "on", 
        " ", "those", " ", "lists", " ", "until", " ", "the", " ", "unit", 
        " ", "size", " ", "is", " ", "arrived", " ", 
        RowBox[{"at", "."}]}], "*)"}], 
      RowBox[{
       RowBox[{"LeftList", "=", 
        RowBox[{
         RowBox[{"TakeDrop", "[", 
          RowBox[{"UnsortedArray", ",", 
           RowBox[{"Ceiling", "[", 
            FractionBox[
             RowBox[{"Length", "[", "UnsortedArray", "]"}], "2"], "]"}]}], 
          "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"RightList", "=", 
        RowBox[{
         RowBox[{"TakeDrop", "[", 
          RowBox[{"UnsortedArray", ",", 
           RowBox[{"Ceiling", "[", 
            FractionBox[
             RowBox[{"Length", "[", "UnsortedArray", "]"}], "2"], "]"}]}], 
          "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"LeftList", "=", 
        RowBox[{"MergeSort", "[", "LeftList", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"RightList", "=", 
        RowBox[{"MergeSort", "[", "RightList", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "Build", " ", "the", " ", "list", " ", "back", " ", "up", " ", "once",
          " ", "the", " ", "array", " ", "is", " ", "fully", " ", 
         RowBox[{"atomized", "."}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"MergeList", "[", 
        RowBox[{"LeftList", ",", "RightList"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6626726793964205`*^9, 3.6626727244649982`*^9}, {
   3.6626864490407968`*^9, 3.662686454154089*^9}, 3.662686505881048*^9, {
   3.6626884159062953`*^9, 3.6626884802899776`*^9}, 3.6626885290827684`*^9, {
   3.6626885671459455`*^9, 3.662688572009224*^9}, {3.662689976896579*^9, 
   3.662690050047763*^9}, {3.662690114639457*^9, 3.662690151390559*^9}, {
   3.6626901914228487`*^9, 3.662690195206065*^9}, {3.662690246598005*^9, 
   3.6626902553115034`*^9}, {3.6626903201012087`*^9, 3.662690373580268*^9}, {
   3.662690406285138*^9, 3.6626904457893977`*^9}, {3.6626905017736*^9, 
   3.66269055143544*^9}, {3.662690678147688*^9, 3.662690684603057*^9}, {
   3.6626907338108716`*^9, 3.6626907499297934`*^9}, {3.662690783570718*^9, 
   3.6626908095862055`*^9}, {3.6626912040247664`*^9, 3.662691256759783*^9}, {
   3.662691545309287*^9, 3.662691545997326*^9}, {3.6626917973477025`*^9, 
   3.6626917977947283`*^9}, {3.6626918325797176`*^9, 
   3.6626920084357758`*^9}, {3.6626920844431233`*^9, 3.662692114960869*^9}, 
   3.662692161497531*^9, {3.6626922673925877`*^9, 3.6626923131272035`*^9}, {
   3.6626924645108624`*^9, 3.662692465069894*^9}, {3.6626928958195314`*^9, 
   3.662692930714527*^9}, {3.6626929738899965`*^9, 3.662692982490489*^9}, {
   3.6626930835062666`*^9, 3.662693128952866*^9}, {3.6626934836321526`*^9, 
   3.662693489094465*^9}, {3.6626935610545807`*^9, 3.662693778428014*^9}, {
   3.662693815805152*^9, 3.662693820220404*^9}, {3.662698719361619*^9, 
   3.6626987870334897`*^9}, {3.66269883144203*^9, 3.6626988367203317`*^9}, 
   3.662698884650073*^9, {3.662698965272684*^9, 3.662699018159709*^9}, {
   3.662699056263889*^9, 3.662699059031047*^9}, {3.662699115096254*^9, 
   3.6626991232067175`*^9}, {3.6626993070702343`*^9, 3.662699344461373*^9}, {
   3.6626993758771696`*^9, 3.662699380317424*^9}, {3.662699439213792*^9, 
   3.6626994726207027`*^9}, {3.6626996075244193`*^9, 
   3.6626996327708635`*^9}, {3.662699674779266*^9, 3.662699757979025*^9}, {
   3.6626998142462425`*^9, 3.662699907529578*^9}, {3.6626999576894474`*^9, 
   3.6626999780026093`*^9}, {3.6627000217861137`*^9, 3.662700049632706*^9}, 
   3.662700297351875*^9, {3.66270041982288*^9, 3.662700424422143*^9}, {
   3.662700757534196*^9, 3.662700769683891*^9}, {3.662700863250242*^9, 
   3.6627008833463917`*^9}, {3.662700934978345*^9, 3.6627011359608407`*^9}, {
   3.6627013023443575`*^9, 3.662701423799304*^9}, {3.662701460550406*^9, 
   3.6627014964224577`*^9}, {3.6627015502305355`*^9, 
   3.6627015525176663`*^9}, {3.662701607374804*^9, 3.6627016336053047`*^9}, {
   3.662701684390209*^9, 3.662701738165285*^9}, {3.6627041983499994`*^9, 
   3.6627042085395823`*^9}, {3.66270428001267*^9, 3.6627043050030994`*^9}, {
   3.6627044156754293`*^9, 3.6627044330024204`*^9}, {3.6627045842840734`*^9, 
   3.6627046030421467`*^9}, {3.6627046722821064`*^9, 
   3.6627046734881754`*^9}, {3.66270471343346*^9, 3.6627047498475432`*^9}, {
   3.6627048362084827`*^9, 3.6627048572866883`*^9}, {3.662705099429538*^9, 
   3.6627051004855986`*^9}, {3.662707431842944*^9, 3.6627075122515435`*^9}, {
   3.6627075438763523`*^9, 3.6627075938112087`*^9}, {3.66271070310305*^9, 
   3.6627107078073187`*^9}, 3.6627107458224936`*^9, {3.6627107784553595`*^9, 
   3.6627108090851116`*^9}, 3.6627109500711756`*^9, {3.662711014885883*^9, 
   3.6627110734832344`*^9}, {3.6627137835372405`*^9, 3.662713788879546*^9}, {
   3.6627138241375628`*^9, 3.6627139437514043`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Brainstorming and Testing", "Subsection",
 CellChangeTimes->{{3.6623026584695053`*^9, 3.6623026592455497`*^9}, {
  3.6626646558342113`*^9, 3.662664659425417*^9}}],

Cell[CellGroupData[{

Cell["MergeSort", "Subsubsection",
 CellChangeTimes->{{3.6626867719492664`*^9, 3.662686781749827*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MergeList", "[", 
    RowBox[{"Lefty_", ",", "Righty_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MergedList", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Lefty", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], "&&", 
        RowBox[{"Righty", "\[NotEqual]", 
         RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "Lefty", "]"}], "\[LessEqual]", 
           RowBox[{"First", "[", "Righty", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MergedList", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"MergedList", ",", 
               RowBox[{"First", "[", "Lefty", "]"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Lefty", "=", 
            RowBox[{"Drop", "[", 
             RowBox[{"Lefty", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Print", "[", "MergedList", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MergedList", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"MergedList", ",", 
               RowBox[{"First", "[", "Righty", "]"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Righty", "=", 
            RowBox[{"Drop", "[", 
             RowBox[{"Righty", ",", "1"}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Lefty", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MergedList", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{"MergedList", ",", "Lefty"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Righty", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MergedList", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{"MergedList", ",", "Righty"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "MergedList"}], "\[IndentingNewLine]", ")"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6627051928048787`*^9, 3.6627052468519697`*^9}, {
   3.6627055215156803`*^9, 3.6627055220497103`*^9}, {3.6627055579227624`*^9, 
   3.662705569618431*^9}, {3.6627056438346767`*^9, 3.662705659416568*^9}, {
   3.6627057595942974`*^9, 3.6627057729360604`*^9}, {3.6627058887046824`*^9, 
   3.662705890384778*^9}, 3.662706730377823*^9, 3.6627067947065024`*^9, {
   3.662707063199859*^9, 3.662707117397959*^9}, {3.662707164582658*^9, 
   3.662707205614005*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MergeSort", "[", "UnsortedArray_", "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Basic", " ", "recursive", " ", 
       RowBox[{"MergeSort", ".", " ", "Split"}], " ", "the", " ", "array", 
       " ", "into", " ", "smaller", " ", "sub"}], "-", 
      RowBox[{
      "arrays", " ", "until", " ", "arrays", " ", "of", " ", "unit", " ", 
       "length", " ", "are", " ", 
       RowBox[{"reached", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "UnsortedArray", "]"}], "\[Equal]", "1"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "UnsortedArray", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LeftList", "=", 
        RowBox[{
         RowBox[{"TakeDrop", "[", 
          RowBox[{"UnsortedArray", ",", 
           RowBox[{"Ceiling", "[", 
            FractionBox[
             RowBox[{"Length", "[", "UnsortedArray", "]"}], "2"], "]"}]}], 
          "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"RightList", "=", 
        RowBox[{
         RowBox[{"TakeDrop", "[", 
          RowBox[{"UnsortedArray", ",", 
           RowBox[{"Ceiling", "[", 
            FractionBox[
             RowBox[{"Length", "[", "UnsortedArray", "]"}], "2"], "]"}]}], 
          "]"}], "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"LeftList", "=", 
        RowBox[{"MergeSort", "[", "LeftList", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"RightList", "=", 
        RowBox[{"MergeSort", "[", "RightList", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"MergedList", "[", 
        RowBox[{"LeftList", ",", "RightList"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6626726793964205`*^9, 3.6626727244649982`*^9}, {
   3.6626864490407968`*^9, 3.662686454154089*^9}, 3.662686505881048*^9, {
   3.6626884159062953`*^9, 3.6626884802899776`*^9}, 3.6626885290827684`*^9, {
   3.6626885671459455`*^9, 3.662688572009224*^9}, {3.662689976896579*^9, 
   3.662690050047763*^9}, {3.662690114639457*^9, 3.662690151390559*^9}, {
   3.6626901914228487`*^9, 3.662690195206065*^9}, {3.662690246598005*^9, 
   3.6626902553115034`*^9}, {3.6626903201012087`*^9, 3.662690373580268*^9}, {
   3.662690406285138*^9, 3.6626904457893977`*^9}, {3.6626905017736*^9, 
   3.66269055143544*^9}, {3.662690678147688*^9, 3.662690684603057*^9}, {
   3.6626907338108716`*^9, 3.6626907499297934`*^9}, {3.662690783570718*^9, 
   3.6626908095862055`*^9}, {3.6626912040247664`*^9, 3.662691256759783*^9}, {
   3.662691545309287*^9, 3.662691545997326*^9}, {3.6626917973477025`*^9, 
   3.6626917977947283`*^9}, {3.6626918325797176`*^9, 
   3.6626920084357758`*^9}, {3.6626920844431233`*^9, 3.662692114960869*^9}, 
   3.662692161497531*^9, {3.6626922673925877`*^9, 3.6626923131272035`*^9}, {
   3.6626924645108624`*^9, 3.662692465069894*^9}, {3.6626928958195314`*^9, 
   3.662692930714527*^9}, {3.6626929738899965`*^9, 3.662692982490489*^9}, {
   3.6626930835062666`*^9, 3.662693128952866*^9}, {3.6626934836321526`*^9, 
   3.662693489094465*^9}, {3.6626935610545807`*^9, 3.662693778428014*^9}, {
   3.662693815805152*^9, 3.662693820220404*^9}, {3.662698719361619*^9, 
   3.6626987870334897`*^9}, {3.66269883144203*^9, 3.6626988367203317`*^9}, 
   3.662698884650073*^9, {3.662698965272684*^9, 3.662699018159709*^9}, {
   3.662699056263889*^9, 3.662699059031047*^9}, {3.662699115096254*^9, 
   3.6626991232067175`*^9}, {3.6626993070702343`*^9, 3.662699344461373*^9}, {
   3.6626993758771696`*^9, 3.662699380317424*^9}, {3.662699439213792*^9, 
   3.6626994726207027`*^9}, {3.6626996075244193`*^9, 
   3.6626996327708635`*^9}, {3.662699674779266*^9, 3.662699757979025*^9}, {
   3.6626998142462425`*^9, 3.662699907529578*^9}, {3.6626999576894474`*^9, 
   3.6626999780026093`*^9}, {3.6627000217861137`*^9, 3.662700049632706*^9}, 
   3.662700297351875*^9, {3.66270041982288*^9, 3.662700424422143*^9}, {
   3.662700757534196*^9, 3.662700769683891*^9}, {3.662700863250242*^9, 
   3.6627008833463917`*^9}, {3.662700934978345*^9, 3.6627011359608407`*^9}, {
   3.6627013023443575`*^9, 3.662701423799304*^9}, {3.662701460550406*^9, 
   3.6627014964224577`*^9}, {3.6627015502305355`*^9, 
   3.6627015525176663`*^9}, {3.662701607374804*^9, 3.6627016336053047`*^9}, {
   3.662701684390209*^9, 3.662701738165285*^9}, {3.6627041983499994`*^9, 
   3.6627042085395823`*^9}, {3.66270428001267*^9, 3.6627043050030994`*^9}, {
   3.6627044156754293`*^9, 3.6627044330024204`*^9}, {3.6627045842840734`*^9, 
   3.6627046030421467`*^9}, {3.6627046722821064`*^9, 
   3.6627046734881754`*^9}, {3.66270471343346*^9, 3.6627047498475432`*^9}, {
   3.6627048362084827`*^9, 3.6627048572866883`*^9}, {3.662705099429538*^9, 
   3.6627051004855986`*^9}, {3.662707431842944*^9, 3.6627075122515435`*^9}, {
   3.6627075438763523`*^9, 3.6627075938112087`*^9}, {3.66271070310305*^9, 
   3.6627107078073187`*^9}, 3.6627107458224936`*^9, {3.6627107784553595`*^9, 
   3.6627108090851116`*^9}, 3.6627109500711756`*^9, {3.662711014885883*^9, 
   3.6627110734832344`*^9}, 3.6627131721572714`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MergeSortSplit", "[", "UnsortedArray_", "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "Recursive", " ", "MergeSort", " ", "using", " ", "the", " ", "Split", 
      " ", "function", " ", "to", " ", "pick", " ", "out", " ", "natural", 
      " ", "runs", " ", "in", " ", "the", " ", "list", " ", "and", " ", "the",
       " ", "typical", " ", "comparator", " ", "in", " ", "building", " ", 
      "the", " ", "sorted", " ", 
      RowBox[{"list", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SplitList", "=", 
      RowBox[{"Split", "[", 
       RowBox[{"UnsortedArray", ",", "Less"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Depth", "[", "SplitList", "]"}], ">", "3"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "Preserving", " ", "dimensionality", " ", "to", " ", "ensure", " ", 
         "structure", " ", "of", " ", "the", " ", "code", " ", 
         RowBox[{"functions", "."}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"SplitList", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"SplitList", ",", "1"}], "]"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Criterion", " ", "for", " ", "completion"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "SplitList", "]"}], "\[Equal]", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", "SplitList", "]"}], ",", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "Take", " ", "outer", " ", "runs", " ", "as", " ", "our", " ", 
          "sublists", " ", "to", " ", "be", " ", 
          RowBox[{"merged", ".", " ", "Preserve"}], " ", "inner", " ", "list",
           " ", "as", " ", "it", " ", "will", " ", "become", " ", "an", " ", 
          "outer", " ", "list", " ", "in", " ", "the", " ", "next", " ", 
          "iteration"}], ",", " ", 
         RowBox[{"at", " ", "least", " ", "in", " ", 
          RowBox[{"part", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"LeftList", "=", 
         RowBox[{"First", "[", "SplitList", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"RightList", "=", 
         RowBox[{"Last", "[", "SplitList", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"InnerList", "=", 
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{"SplitList", ",", "1"}], "]"}], ",", 
           RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"InnerList", "\[NotEqual]", 
           RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"MergeSortSplit", "[", "InnerList", "]"}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", "Merge", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MergedList", "=", 
            RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"LeftList", "\[NotEqual]", 
               RowBox[{"{", "}"}]}], "&&", 
              RowBox[{"RightList", "\[NotEqual]", 
               RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "Move", " ", "elements", " ", "from", " ", "the", " ", "outer", 
               " ", "lists", " ", "over", " ", "to", " ", "the", " ", 
               "ordered", " ", 
               RowBox[{"list", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"First", "[", "LeftList", "]"}], "\[LessEqual]", 
                 RowBox[{"First", "[", "RightList", "]"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"MergedList", "=", 
                  RowBox[{"Flatten", "[", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"MergedList", ",", 
                    RowBox[{"First", "[", "LeftList", "]"}]}], "]"}], "]"}]}],
                  ";", "\[IndentingNewLine]", 
                 RowBox[{"LeftList", "=", 
                  RowBox[{"Drop", "[", 
                   RowBox[{"LeftList", ",", "1"}], "]"}]}], ";"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"MergedList", "=", 
                  RowBox[{"Flatten", "[", 
                   RowBox[{"AppendTo", "[", 
                    RowBox[{"MergedList", ",", 
                    RowBox[{"First", "[", "RightList", "]"}]}], "]"}], 
                   "]"}]}], ";", "\[IndentingNewLine]", 
                 RowBox[{"RightList", "=", 
                  RowBox[{"Drop", "[", 
                   RowBox[{"RightList", ",", "1"}], "]"}]}], ";"}]}], 
               "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
            "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"LeftList", "\[NotEqual]", 
              RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"MergedList", "=", 
               RowBox[{"Flatten", "[", 
                RowBox[{"Append", "[", 
                 RowBox[{"MergedList", ",", "LeftList"}], "]"}], "]"}]}], 
              ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"RightList", "\[NotEqual]", 
              RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"MergedList", "=", 
               RowBox[{"Flatten", "[", 
                RowBox[{"Append", "[", 
                 RowBox[{"MergedList", ",", "RightList"}], "]"}], "]"}]}], 
              ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"MergeSortSplit", "[", 
            RowBox[{"FlattenAt", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"MergedList", ",", "InnerList"}], "}"}], ",", "2"}], 
             "]"}], "]"}]}]}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
    ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6627125936171813`*^9, 3.662712600215558*^9}, {
  3.662712731007039*^9, 3.662712741695651*^9}, {3.662712882935729*^9, 
  3.662712934198661*^9}, {3.6627130304311657`*^9, 3.662713033622348*^9}, {
  3.6627131176491537`*^9, 3.6627131341891003`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"{", "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.6627051633521943`*^9, 3.6627051669393997`*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.662705167735445*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"TestArray1", "=", 
  RowBox[{"{", 
   RowBox[{
   "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3",
     ",", "2", ",", "1"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "TestArray1", "]"}]}], "Input",
 CellChangeTimes->{{3.662686534743699*^9, 3.6626865715108013`*^9}, 
   3.6626899654479237`*^9, 3.6626920515792437`*^9, {3.662699518235312*^9, 
   3.66269957694767*^9}, {3.662703518520115*^9, 3.662703524712469*^9}, {
   3.662707320198559*^9, 3.662707346685074*^9}, {3.6627108667964125`*^9, 
   3.662710874723866*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", 
   ",", "2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{
  3.662701935137551*^9, {3.6627035202542143`*^9, 3.6627035493128767`*^9}, 
   3.6627041103579664`*^9, 3.6627057019309993`*^9, {3.6627057975524683`*^9, 
   3.6627058190346975`*^9}, 3.66270620774193*^9, 3.6627069271300764`*^9, {
   3.6627072327755585`*^9, 3.6627072513966236`*^9}, 3.662707349124213*^9, 
   3.6627130265659447`*^9}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{
  3.662701935137551*^9, {3.6627035202542143`*^9, 3.6627035493128767`*^9}, 
   3.6627041103579664`*^9, 3.6627057019309993`*^9, {3.6627057975524683`*^9, 
   3.6627058190346975`*^9}, 3.66270620774193*^9, 3.6627069271300764`*^9, {
   3.6627072327755585`*^9, 3.6627072513966236`*^9}, 3.662707349124213*^9, 
   3.6627130265689445`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MergeSortSplit", "[", "TestArray1", "]"}]], "Input",
 CellChangeTimes->{{3.6627130720445457`*^9, 3.662713072739585*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.66271307369764*^9, 3.6627131410334916`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{"derp", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.662705074496112*^9, 3.6627050829805975`*^9}, {
  3.662705603249355*^9, 3.6627056040404005`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Append", "::", "normal"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Nonatomic expression expected at position \[NoBreak]\\!\\(\
\\*RowBox[{\\\"1\\\"}]\\)\[NoBreak] in \
\[NoBreak]\\!\\(\\*RowBox[{\\\"Append\\\", \\\"[\\\", RowBox[{\\\"derp\\\", \
\\\",\\\", \\\"1\\\"}], \\\"]\\\"}]\\)\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/normal\\\", ButtonNote -> \
\\\"Append::normal\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.6627056056264906`*^9}],

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{"derp", ",", "1"}], "]"}]], "Output",
 CellChangeTimes->{3.662705083822645*^9, 3.662705605627491*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", "}"}], "\[LessEqual]", "4"}]], "Input",
 CellChangeTimes->{{3.6627053300007257`*^9, 3.6627053490508156`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", "}"}], "\[LessEqual]", "4"}]], "Output",
 CellChangeTimes->{3.662705350376891*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.662705359875435*^9, 3.6627053618025446`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Length", "[", "TestArray1", "]"}], "\[Equal]", "1"}], ",", 
   "\[IndentingNewLine]", "TestArray1", ",", 
   RowBox[{
    RowBox[{"LeftList", "=", 
     RowBox[{"Take", "[", 
      RowBox[{"TestArray1", ",", 
       RowBox[{"Ceiling", "[", 
        FractionBox[
         RowBox[{"Length", "[", "TestArray1", "]"}], "2"], "]"}]}], "]"}]}], 
    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"RightList", "=", 
     RowBox[{"Take", "[", 
      RowBox[{"TestArray1", ",", 
       RowBox[{"Ceiling", "[", 
        FractionBox[
         RowBox[{"Length", "[", "TestArray1", "]"}], "2"], "]"}]}], "]"}]}], 
    ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"LeftList", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", "RightList"}], "Input",
 CellChangeTimes->{{3.662701906947939*^9, 3.6627019512514725`*^9}, 
   3.6627034616578627`*^9, {3.662703554360165*^9, 3.6627036311435566`*^9}, {
   3.6627037106551046`*^9, 3.6627037254149485`*^9}, {3.6627039907591257`*^9, 
   3.662703997813529*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4", ",", "3", ",", "2", ",", "5"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6627039985715723`*^9, 3.6627040471063485`*^9, {3.6627041014164553`*^9, 
   3.6627041414777465`*^9}, 3.662704971866242*^9, 3.662706170079776*^9, 
   3.662706209924055*^9, {3.6627063708402586`*^9, 3.6627063718013134`*^9}, 
   3.66270645111685*^9, 3.662706536347725*^9, 3.662706634324329*^9, 
   3.6627068110654383`*^9, {3.662706928903178*^9, 3.6627069846073637`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4", ",", "3", ",", "2", ",", "5"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6627039985715723`*^9, 3.6627040471063485`*^9, {3.6627041014164553`*^9, 
   3.6627041414777465`*^9}, 3.662704971866242*^9, 3.662706170079776*^9, 
   3.662706209924055*^9, {3.6627063708402586`*^9, 3.6627063718013134`*^9}, 
   3.66270645111685*^9, 3.662706536347725*^9, 3.662706634324329*^9, 
   3.6627068110654383`*^9, {3.662706928903178*^9, 3.6627069846113644`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Length", "[", "LeftList", "]"}], "\[Equal]", "1"}], ",", 
   "\[IndentingNewLine]", "LeftList", ",", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"RightList", "=", 
     RowBox[{"Drop", "[", 
      RowBox[{"LeftList", ",", 
       RowBox[{"Ceiling", "[", 
        FractionBox[
         RowBox[{"Length", "[", "LeftList", "]"}], "2"], "]"}]}], "]"}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"LeftList", "=", 
     RowBox[{"Take", "[", 
      RowBox[{"LeftList", ",", 
       RowBox[{"Ceiling", "[", 
        FractionBox[
         RowBox[{"Length", "[", "LeftList", "]"}], "2"], "]"}]}], "]"}]}], 
    ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "]"}], "\[IndentingNewLine]", "LeftList", "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "LeftList", 
  "]"}], "\[IndentingNewLine]", "RightList", "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "RightList", "]"}]}], "Input",
 CellChangeTimes->{{3.662701906947939*^9, 3.6627019512514725`*^9}, 
   3.6627034616578627`*^9, {3.662703505785387*^9, 3.662703510512657*^9}, {
   3.6627037022076216`*^9, 3.66270370252664*^9}, {3.66270374659116*^9, 
   3.6627037633981214`*^9}, {3.6627038087177134`*^9, 3.662703827758803*^9}, {
   3.6627038844940476`*^9, 3.6627038906694007`*^9}, {3.6627039732691255`*^9, 
   3.662703986301871*^9}, {3.6627041324852324`*^9, 3.6627041353963985`*^9}, {
   3.662706247836223*^9, 3.6627062480522356`*^9}}],

Cell[BoxData[
 RowBox[{"{", "2", "}"}]], "Output",
 CellChangeTimes->{{3.6627037687294264`*^9, 3.6627037885635605`*^9}, 
   3.662703830112937*^9, 3.662703899196889*^9, 3.662704001727753*^9, {
   3.6627040981072655`*^9, 3.6627041659641466`*^9}, {3.662704977969591*^9, 
   3.6627049951155715`*^9}, {3.6627061732769585`*^9, 3.662706176398137*^9}, {
   3.6627062131562395`*^9, 3.662706219822621*^9}, {3.662706373172392*^9, 
   3.6627063764855814`*^9}, {3.662706452826948*^9, 3.662706456377151*^9}, {
   3.662706538934873*^9, 3.6627065411309986`*^9}, {3.6627066315701714`*^9, 
   3.662706638307557*^9}, {3.6627068126535287`*^9, 3.6627068165507517`*^9}, {
   3.6627069305022697`*^9, 3.662706989921668*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.6627037687294264`*^9, 3.6627037885635605`*^9}, 
   3.662703830112937*^9, 3.662703899196889*^9, 3.662704001727753*^9, {
   3.6627040981072655`*^9, 3.6627041659641466`*^9}, {3.662704977969591*^9, 
   3.6627049951155715`*^9}, {3.6627061732769585`*^9, 3.662706176398137*^9}, {
   3.6627062131562395`*^9, 3.662706219822621*^9}, {3.662706373172392*^9, 
   3.6627063764855814`*^9}, {3.662706452826948*^9, 3.662706456377151*^9}, {
   3.662706538934873*^9, 3.6627065411309986`*^9}, {3.6627066315701714`*^9, 
   3.662706638307557*^9}, {3.6627068126535287`*^9, 3.6627068165507517`*^9}, {
   3.6627069305022697`*^9, 3.6627069899256687`*^9}}],

Cell[BoxData[
 RowBox[{"{", "3", "}"}]], "Output",
 CellChangeTimes->{{3.6627037687294264`*^9, 3.6627037885635605`*^9}, 
   3.662703830112937*^9, 3.662703899196889*^9, 3.662704001727753*^9, {
   3.6627040981072655`*^9, 3.6627041659641466`*^9}, {3.662704977969591*^9, 
   3.6627049951155715`*^9}, {3.6627061732769585`*^9, 3.662706176398137*^9}, {
   3.6627062131562395`*^9, 3.662706219822621*^9}, {3.662706373172392*^9, 
   3.6627063764855814`*^9}, {3.662706452826948*^9, 3.662706456377151*^9}, {
   3.662706538934873*^9, 3.6627065411309986`*^9}, {3.6627066315701714`*^9, 
   3.662706638307557*^9}, {3.6627068126535287`*^9, 3.6627068165507517`*^9}, {
   3.6627069305022697`*^9, 3.6627069899286685`*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.6627037687294264`*^9, 3.6627037885635605`*^9}, 
   3.662703830112937*^9, 3.662703899196889*^9, 3.662704001727753*^9, {
   3.6627040981072655`*^9, 3.6627041659641466`*^9}, {3.662704977969591*^9, 
   3.6627049951155715`*^9}, {3.6627061732769585`*^9, 3.662706176398137*^9}, {
   3.6627062131562395`*^9, 3.662706219822621*^9}, {3.662706373172392*^9, 
   3.6627063764855814`*^9}, {3.662706452826948*^9, 3.662706456377151*^9}, {
   3.662706538934873*^9, 3.6627065411309986`*^9}, {3.6627066315701714`*^9, 
   3.662706638307557*^9}, {3.6627068126535287`*^9, 3.6627068165507517`*^9}, {
   3.6627069305022697`*^9, 3.6627069899316683`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"MergedList", "=", 
   RowBox[{"{", "}"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"LeftList", "\[NotEqual]", 
     RowBox[{"{", "}"}]}], "&&", 
    RowBox[{"RightList", "\[NotEqual]", 
     RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"LeftList", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], "&&", 
        RowBox[{"RightList", "\[NotEqual]", 
         RowBox[{"{", "}"}]}]}], ")"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"First", "[", "LeftList", "]"}], "\[LessEqual]", 
          RowBox[{"First", "[", "RightList", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"MergedList", ",", 
            RowBox[{"First", "[", "LeftList", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"LeftList", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"LeftList", ",", "1"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", "Left", "]"}]}], ",", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"MergedList", ",", 
            RowBox[{"First", "[", "RightList", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"RightList", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"RightList", ",", "1"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", "Right", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"LeftList", "\[NotEqual]", 
     RowBox[{"{", "}"}]}], "&&", 
    RowBox[{"RightList", "\[NotEqual]", 
     RowBox[{"{", "}"}]}]}], "\[IndentingNewLine]", "LeftList", 
   "\[IndentingNewLine]", "RightList", "\[IndentingNewLine]", 
   "MergedList"}]}]], "Input",
 CellChangeTimes->{{3.662706225244931*^9, 3.662706337044326*^9}, {
   3.662706415412808*^9, 3.6627064477876596`*^9}, {3.662706511131283*^9, 
   3.662706556098855*^9}, {3.6627066850922327`*^9, 3.662706689705497*^9}, 
   3.6627068066661863`*^9}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.6627063419396057`*^9, 3.66270636474291*^9}, 
   3.662706427714512*^9, 3.662706465924697*^9, 3.662706497651512*^9, {
   3.662706542953103*^9, 3.6627065462712927`*^9}, 3.662706639900648*^9, 
   3.662706710187668*^9, {3.662706820838997*^9, 3.662706823916173*^9}, {
   3.6627069336644506`*^9, 3.6627069968710656`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.6627063419396057`*^9, 3.66270636474291*^9}, 
   3.662706427714512*^9, 3.662706465924697*^9, 3.662706497651512*^9, {
   3.662706542953103*^9, 3.6627065462712927`*^9}, 3.662706639900648*^9, 
   3.662706710187668*^9, {3.662706820838997*^9, 3.662706823916173*^9}, {
   3.6627069336644506`*^9, 3.6627069968770657`*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.6627063419396057`*^9, 3.66270636474291*^9}, 
   3.662706427714512*^9, 3.662706465924697*^9, 3.662706497651512*^9, {
   3.662706542953103*^9, 3.6627065462712927`*^9}, 3.662706639900648*^9, 
   3.662706710187668*^9, {3.662706820838997*^9, 3.662706823916173*^9}, {
   3.6627069336644506`*^9, 3.6627069968810663`*^9}}],

Cell[BoxData[
 RowBox[{"{", "3", "}"}]], "Output",
 CellChangeTimes->{{3.6627063419396057`*^9, 3.66270636474291*^9}, 
   3.662706427714512*^9, 3.662706465924697*^9, 3.662706497651512*^9, {
   3.662706542953103*^9, 3.6627065462712927`*^9}, 3.662706639900648*^9, 
   3.662706710187668*^9, {3.662706820838997*^9, 3.662706823916173*^9}, {
   3.6627069336644506`*^9, 3.6627069968840666`*^9}}],

Cell[BoxData[
 RowBox[{"{", "2", "}"}]], "Output",
 CellChangeTimes->{{3.6627063419396057`*^9, 3.66270636474291*^9}, 
   3.662706427714512*^9, 3.662706465924697*^9, 3.662706497651512*^9, {
   3.662706542953103*^9, 3.6627065462712927`*^9}, 3.662706639900648*^9, 
   3.662706710187668*^9, {3.662706820838997*^9, 3.662706823916173*^9}, {
   3.6627069336644506`*^9, 3.6627069968880663`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"LeftList", "\[NotEqual]", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AppendTo", "[", 
        RowBox[{"MergedList", ",", 
         RowBox[{"First", "[", "LeftList", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", "\"\<Empty Right\>\"", "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"RightList", "\[NotEqual]", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AppendTo", "[", 
        RowBox[{"MergedList", ",", 
         RowBox[{"First", "[", "RightList", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", "\"\<Empty Left\>\"", "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6627066497062087`*^9, 3.662706658081688*^9}, {
  3.6627069026976795`*^9, 3.6627069169194927`*^9}}],

Cell[BoxData["\<\"Empty Left\"\>"], "Print",
 CellChangeTimes->{3.6627068307585645`*^9, 3.662707000859294*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["MergedList"], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.662706838641015*^9, 3.6627070045235033`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MergeList", "[", 
  RowBox[{"LeftList", ",", "RightList"}], "]"}]], "Input",
 CellChangeTimes->{{3.6627050092883825`*^9, 3.662705019820985*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Set", "::", "shape"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Lists \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \\\"2\\\", \
\\\"}\\\"}]\\)\[NoBreak] and \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
\\\"}\\\"}]\\)\[NoBreak] are not the same shape. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Set/shape\\\", ButtonNote -> \
\\\"Set::shape\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.662705020649032*^9, 3.6627061895278883`*^9}],

Cell[BoxData[
 RowBox[{"{", "2", "}"}]], "Print",
 CellChangeTimes->{3.662706189529888*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Set", "::", "shape"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Lists \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \\\"2\\\", \
\\\"}\\\"}]\\)\[NoBreak] and \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
\\\"}\\\"}]\\)\[NoBreak] are not the same shape. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Set/shape\\\", ButtonNote -> \
\\\"Set::shape\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.662705020649032*^9, 3.6627061895518894`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "2"}], "}"}]], "Print",
 CellChangeTimes->{3.66270618955289*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Set", "::", "shape"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Lists \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \\\"2\\\", \
\\\"}\\\"}]\\)\[NoBreak] and \[NoBreak]\\!\\(\\*RowBox[{\\\"{\\\", \
\\\"}\\\"}]\\)\[NoBreak] are not the same shape. \\!\\(\\*ButtonBox[\\\"\
\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Set/shape\\\", ButtonNote -> \
\\\"Set::shape\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.662705020649032*^9, 3.6627061895738907`*^9}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"General", "::", "stop"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Further output of \
\[NoBreak]\\!\\(\\*StyleBox[RowBox[{\\\"Set\\\", \\\"::\\\", \\\"shape\\\"}], \
\\\"MessageName\\\"]\\)\[NoBreak] will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/stop\\\", \
ButtonNote -> \\\"General::stop\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.662705020649032*^9, 3.662706189593892*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6627076642652383`*^9, 3.6627076667623816`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{"LeftList", ",", 
   RowBox[{"Ceiling", "[", 
    FractionBox[
     RowBox[{"Length", "[", "LeftList", "]"}], "2"], "]"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{3.662704063265273*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6627036903579435`*^9, 3.66270370095855*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6627036877577953`*^9, 3.662703689134874*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"LeftList", "=", 
   RowBox[{"MergeSort", "[", "LeftList", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RightList", "=", 
   RowBox[{"MergeSort", "[", "RightList", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"TestArray1", "=", 
  RowBox[{"MergeList", "[", 
   RowBox[{"LeftList", ",", "RightList"}], "]"}], 
  "\[IndentingNewLine]"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SplitTest", "=", 
  RowBox[{"Split", "[", 
   RowBox[{"TestArray1", ",", "Less"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6626938900884004`*^9, 3.6626939052992706`*^9}, {
  3.6626939647716722`*^9, 3.662693966450768*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.662693988011001*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{
   RowBox[{"Drop", "[", 
    RowBox[{"SplitTest", ",", 
     RowBox[{"{", "1", "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6626944369916816`*^9, 3.662694512791017*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "8", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.662694452062544*^9, 3.6626944629211645`*^9}, 
   3.6626945134170527`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FirstSplit", "=", 
  RowBox[{"First", "[", "SplitTest", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"LastSplit", "=", 
  RowBox[{"Last", "[", "SplitTest", "]"}]}]}], "Input",
 CellChangeTimes->{{3.662694019510803*^9, 3.6626940480824375`*^9}, 
   3.6626941069548044`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.6626940489964895`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.66269404899749*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"First", "=", 
  RowBox[{"First", "[", "SplitTest", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Last", "=", 
  RowBox[{"Last", "[", "SplitTest", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"First", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "<", 
    RowBox[{"Last", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"RunMerge", "[", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"Append", "[", 
       RowBox[{"First", ",", 
        RowBox[{"Last", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", 
      RowBox[{"Drop", "[", 
       RowBox[{
        RowBox[{"Drop", "[", 
         RowBox[{"SplitTest", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"-", "1"}], "}"}]}], "]"}], ",", 
      RowBox[{"Drop", "[", 
       RowBox[{"Last", ",", "1"}], "]"}]}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"RunMerge", "[", 
    RowBox[{
     RowBox[{"Drop", "[", 
      RowBox[{"First", ",", 
       RowBox[{"-", "1"}]}], "]"}], ",", 
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{"Drop", "[", 
        RowBox[{"SplitTest", ",", 
         RowBox[{"{", "1", "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"-", "1"}], "}"}]}], "]"}], ",", 
     RowBox[{"Join", "[", 
      RowBox[{"Append", "[", 
       RowBox[{"Last", ",", 
        RowBox[{"First", "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}]}], "]"}], "]"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.662694256920382*^9, 3.6626943344488163`*^9}, {
  3.662694538126466*^9, 3.6626947642614*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SplitTest", "=", 
  RowBox[{"Split", "[", 
   RowBox[{"TestArray1", ",", "Less"}], "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6626949306059146`*^9, 3.6626949904453373`*^9, {3.662695052781903*^9, 
   3.662695068533804*^9}, 3.662695121722846*^9, 3.6626953817117167`*^9, 
   3.6626954850506268`*^9, 3.662695634266162*^9, 3.6626960531491203`*^9, {
   3.6626961567590466`*^9, 3.6626961769031987`*^9}, 3.6626963482940016`*^9, 
   3.6626963789737563`*^9, {3.662697048490051*^9, 3.662697067657147*^9}, 
   3.662697311534096*^9, {3.662697556265094*^9, 3.6626975795684266`*^9}, 
   3.6626977343492794`*^9, 3.662697920602933*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FirstSplit", "=", 
  RowBox[{"First", "[", "SplitTest", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"LastSplit", "=", 
  RowBox[{"Last", "[", "SplitTest", "]"}]}]}], "Input",
 CellChangeTimes->{{3.6626949217564087`*^9, 3.6626949265476823`*^9}, 
   3.6626949690761147`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{
  3.662694931963992*^9, 3.6626949918844194`*^9, {3.662695053846964*^9, 
   3.6626950785813785`*^9}, {3.662695115352482*^9, 3.6626951228729115`*^9}, 
   3.6626953829737883`*^9, {3.6626954401070566`*^9, 3.6626954441422873`*^9}, {
   3.662695488680835*^9, 3.6626955110591145`*^9}, {3.662695550436367*^9, 
   3.6626955724226246`*^9}, {3.662695604449456*^9, 3.6626956364342856`*^9}, 
   3.6626960541731787`*^9, {3.6626961588691673`*^9, 3.6626961808894267`*^9}, {
   3.6626963493040595`*^9, 3.6626963801358232`*^9}, {3.662697050555169*^9, 
   3.6626970688402147`*^9}, {3.6626973130121803`*^9, 
   3.6626973365645275`*^9}, {3.6626975572241488`*^9, 3.6626975829356194`*^9}, 
   3.6626979221020184`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.662694931963992*^9, 3.6626949918844194`*^9, {3.662695053846964*^9, 
   3.6626950785813785`*^9}, {3.662695115352482*^9, 3.6626951228729115`*^9}, 
   3.6626953829737883`*^9, {3.6626954401070566`*^9, 3.6626954441422873`*^9}, {
   3.662695488680835*^9, 3.6626955110591145`*^9}, {3.662695550436367*^9, 
   3.6626955724226246`*^9}, {3.662695604449456*^9, 3.6626956364342856`*^9}, 
   3.6626960541731787`*^9, {3.6626961588691673`*^9, 3.6626961808894267`*^9}, {
   3.6626963493040595`*^9, 3.6626963801358232`*^9}, {3.662697050555169*^9, 
   3.6626970688402147`*^9}, {3.6626973130121803`*^9, 
   3.6626973365645275`*^9}, {3.6626975572241488`*^9, 3.6626975829356194`*^9}, 
   3.6626979221060185`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"FirstSplit", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "<", 
     RowBox[{"LastSplit", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "FirstSplit", "]"}], "\[Equal]", "1"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"SplitTest", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"FirstSplit", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{"SplitTest", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"-", "1"}], "}"}]}], "]"}], ",", "LastSplit"}], "}"}]}], 
      ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SplitTest", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"FirstSplit", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{"FirstSplit", ",", "1"}], "]"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{"SplitTest", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"-", "1"}], "}"}]}], "]"}], ",", "LastSplit"}], "}"}]}]}],
      "]"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "LastSplit", "]"}], "\[Equal]", "1"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"SplitTest", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"LastSplit", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{"SplitTest", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"-", "1"}], "}"}]}], "]"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SplitTest", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"LastSplit", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "}"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{"SplitTest", ",", 
             RowBox[{"{", "1", "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"-", "1"}], "}"}]}], "]"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{"LastSplit", ",", "1"}], "]"}]}], "}"}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6626948044386983`*^9, 3.662694903340355*^9}, {
  3.662694958397504*^9, 3.6626950450924625`*^9}, {3.6626951700756116`*^9, 
  3.662695481513425*^9}, {3.6626956598246236`*^9, 3.662695771376004*^9}, {
  3.6626958067760286`*^9, 3.66269582831126*^9}, {3.662695898919299*^9, 
  3.662696038909306*^9}, {3.66269611083742*^9, 3.662696153236845*^9}, {
  3.6626963410205855`*^9, 3.662696342930695*^9}, {3.6626967695370955`*^9, 
  3.6626968241922216`*^9}, {3.662696857049101*^9, 3.6626972197728477`*^9}, {
  3.66269725460484*^9, 3.6626973061007853`*^9}, {3.6626973483482018`*^9, 
  3.662697548002621*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "8", ",", "9"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6626970699172764`*^9, {3.6626973144722643`*^9, 3.662697337618588*^9}, {
   3.6626975583682137`*^9, 3.6626975844437056`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Last", "[", "FirstSplit", "]"}], "<", 
    RowBox[{"First", "[", "LastSplit", "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"SplitTest", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Join", "[", 
       RowBox[{"FirstSplit", ",", "LastSplit"}], "]"}], ",", 
      RowBox[{"Drop", "[", 
       RowBox[{
        RowBox[{"Drop", "[", 
         RowBox[{"SplitTest", ",", 
          RowBox[{"{", "1", "}"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"-", "1"}], "}"}]}], "]"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6626977404346275`*^9, 3.662697915959667*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4", ",", "7", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "3", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "8", ",", "9"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6626979253922067`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"FirstSplit", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "<", 
    RowBox[{"LastSplit", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SplitTest", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"FirstSplit", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", 
       RowBox[{"Rest", "[", 
        RowBox[{"FirstSplit", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
       RowBox[{"Rest", "[", "SplitTest", "]"}]}], "}"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"FirstSplit", "=", 
     RowBox[{"Rest", "[", "FirstSplit", "]"}]}], ";"}], "\[IndentingNewLine]",
    ","}]}]], "Input",
 CellChangeTimes->{{3.6626983051319265`*^9, 3.662698349316454*^9}, {
  3.66269842688389*^9, 3.6626985214763007`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MergeList", "[", 
    RowBox[{"Lefty_", ",", "Righty_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MergedList", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Lefty", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], "&&", 
        RowBox[{"Righty", "\[NotEqual]", 
         RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "Lefty", "]"}], "\[LessEqual]", 
           RowBox[{"First", "[", "Righty", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MergedList", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"MergedList", ",", 
               RowBox[{"First", "[", "Lefty", "]"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Lefty", "=", 
            RowBox[{"Drop", "[", 
             RowBox[{"Lefty", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"Print", "[", "MergedList", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MergedList", "=", 
            RowBox[{"Flatten", "[", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"MergedList", ",", 
               RowBox[{"First", "[", "Righty", "]"}]}], "]"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Righty", "=", 
            RowBox[{"Drop", "[", 
             RowBox[{"Righty", ",", "1"}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Lefty", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MergedList", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{"MergedList", ",", "Lefty"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Righty", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MergedList", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{"MergedList", ",", "Righty"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "MergedList"}], "\[IndentingNewLine]", ")"}]}], 
  ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"TestArray1", "=", 
  RowBox[{"{", 
   RowBox[{
   "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3",
     ",", "2", ",", "1"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "TestArray1", "]"}]}], "Input",
 CellChangeTimes->{{3.662686534743699*^9, 3.6626865715108013`*^9}, 
   3.6626899654479237`*^9, 3.6626920515792437`*^9, {3.662699518235312*^9, 
   3.66269957694767*^9}, {3.662703518520115*^9, 3.662703524712469*^9}, {
   3.662707320198559*^9, 3.662707346685074*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5", ",", "4", ",", "3", 
   ",", "2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.662707754005371*^9, 3.662708418129357*^9}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{3.662707754005371*^9, 3.6627084181323566`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SplitTest", "=", 
  RowBox[{"Split", "[", 
   RowBox[{"TestArray1", ",", "Less"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.662707714693123*^9, 3.662707760193725*^9}, {
  3.662707811353651*^9, 3.662707815584893*^9}, {3.6627081469508467`*^9, 
  3.6627081507020607`*^9}, {3.662708404357569*^9, 3.6627084135730963`*^9}, {
  3.6627084925646143`*^9, 3.662708492948636*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "1", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.662707762589862*^9, 3.6627078511369267`*^9, 3.6627080844992743`*^9, {
   3.6627084049026003`*^9, 3.6627084208645134`*^9}, 3.662708493774684*^9, 
   3.662710143143022*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"LeftList", "=", 
  RowBox[{"First", "[", "SplitTest", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"RightList", "=", 
  RowBox[{"Last", "[", "SplitTest", "]"}]}]}], "Input",
 CellChangeTimes->{{3.662707802970172*^9, 3.6627078466726713`*^9}}],

Cell[BoxData[
 RowBox[{"{", "10", "}"}]], "Output",
 CellChangeTimes->{{3.6627078477087307`*^9, 3.662707852781021*^9}, 
   3.6627080859083548`*^9, 3.662710144450097*^9}],

Cell[BoxData[
 RowBox[{"{", "1", "}"}]], "Output",
 CellChangeTimes->{{3.6627078477087307`*^9, 3.662707852781021*^9}, 
   3.6627080859083548`*^9, 3.662710144454097*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"MergedList", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"While", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"LeftList", "\[NotEqual]", 
       RowBox[{"{", "}"}]}], "&&", 
      RowBox[{"RightList", "\[NotEqual]", 
       RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "LeftList", "]"}], "\[LessEqual]", 
         RowBox[{"First", "[", "RightList", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"MergedList", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"MergedList", ",", 
             RowBox[{"First", "[", "LeftList", "]"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"LeftList", "=", 
          RowBox[{"Drop", "[", 
           RowBox[{"LeftList", ",", "1"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", "MergedList", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"MergedList", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"MergedList", ",", 
             RowBox[{"First", "[", "RightList", "]"}]}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"RightList", "=", 
          RowBox[{"Drop", "[", 
           RowBox[{"RightList", ",", "1"}], "]"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"LeftList", "\[NotEqual]", 
     RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MergedList", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Append", "[", 
        RowBox[{"MergedList", ",", "LeftList"}], "]"}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"RightList", "\[NotEqual]", 
     RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MergedList", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Append", "[", 
        RowBox[{"MergedList", ",", "RightList"}], "]"}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"LeftList", "=", "MergedList"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.662707794121666*^9, 3.6627077943296776`*^9}, {
  3.6627078567852497`*^9, 3.662707918576784*^9}, {3.66270807603979*^9, 
  3.6627080782479167`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.662707901464805*^9, {3.6627080786829414`*^9, 3.6627080878974686`*^9}, 
   3.662708498541956*^9, {3.662710121326774*^9, 3.6627101458441763`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SplitList", "=", 
  RowBox[{"Split", "[", 
   RowBox[{"TestArray1", ",", "Less"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.6627083046478662`*^9, {3.6627084395895844`*^9, 3.662708440900659*^9}, {
   3.6627085069244356`*^9, 3.6627085137398252`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "1", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6627099559343143`*^9, 3.662710055270996*^9, {3.662710175030846*^9, 
   3.662710214684114*^9}, {3.662710255374441*^9, 3.6627102681231704`*^9}, 
   3.662710343589487*^9, {3.6627104201318645`*^9, 3.6627104657944765`*^9}, 
   3.662710553082469*^9, 3.6627105858203416`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "1", "}"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.6627093945122027`*^9, 3.6627093955742636`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Length", "[", "SplitList", "]"}], "\[Equal]", "1"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Flatten", "[", "SplitList", "]"}], ",", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SplitList", "=", 
     RowBox[{"Split", "[", 
      RowBox[{"SplitList", ",", "Less"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Depth", "[", "SplitList", "]"}], ">", "3"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"SplitList", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"SplitList", ",", "1"}], "]"}]}]}], "]"}], ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"LeftList", "=", 
     RowBox[{"First", "[", "SplitList", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"RightList", "=", 
     RowBox[{"Last", "[", "SplitList", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"InnerList", "=", 
     RowBox[{"Drop", "[", 
      RowBox[{
       RowBox[{"Drop", "[", 
        RowBox[{"SplitList", ",", "1"}], "]"}], ",", 
       RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"MergedList", "=", 
     RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"While", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"LeftList", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], "&&", 
       RowBox[{"RightList", "\[NotEqual]", 
        RowBox[{"{", "}"}]}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"First", "[", "LeftList", "]"}], "\[LessEqual]", 
          RowBox[{"First", "[", "RightList", "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MergedList", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"MergedList", ",", 
              RowBox[{"First", "[", "LeftList", "]"}]}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"LeftList", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"LeftList", ",", "1"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MergedList", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"MergedList", ",", 
              RowBox[{"First", "[", "RightList", "]"}]}], "]"}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"RightList", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"RightList", ",", "1"}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"MergedList", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"LeftList", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MergedList", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Append", "[", 
           RowBox[{"MergedList", ",", "LeftList"}], "]"}], "]"}]}], ";"}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"RightList", "\[NotEqual]", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"MergedList", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Append", "[", 
          RowBox[{"MergedList", ",", "RightList"}], "]"}], "]"}]}], ";"}]}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"SplitList", "=", 
     RowBox[{"FlattenAt", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"MergedList", ",", "InnerList"}], "}"}], ",", "2"}], "]"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"If", "[", 
       RowBox[{",", "\[IndentingNewLine]", 
        RowBox[{"Flatten", "[", "SplitList", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"LeftList", "=", 
          RowBox[{"MergeSort", "[", 
           RowBox[{"First", "[", "SplitList", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"RightList", "=", 
          RowBox[{"MergeSort", "[", 
           RowBox[{"Last", "[", "SplitList", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"MergeList", "[", 
          RowBox[{"LeftList", ",", "RightList"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}], "*)"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.6627081216083965`*^9, 3.6627081249075856`*^9}, {
   3.6627081620647106`*^9, 3.6627081750944557`*^9}, {3.6627082393511314`*^9, 
   3.662708296207383*^9}, {3.6627084822120223`*^9, 3.662708482404033*^9}, {
   3.6627090125943584`*^9, 3.662709024756054*^9}, {3.6627090867455997`*^9, 
   3.662709146392011*^9}, {3.6627092438085833`*^9, 3.662709334510771*^9}, {
   3.662709416983488*^9, 3.6627094176945286`*^9}, 3.662709512901974*^9, 
   3.6627096292616296`*^9, {3.662709659548362*^9, 3.6627096597163715`*^9}, {
   3.6627096979735594`*^9, 3.6627097080521364`*^9}, {3.6627097463093243`*^9, 
   3.6627098350754013`*^9}, {3.6627098660601735`*^9, 
   3.6627099180271463`*^9}, {3.662709958947487*^9, 3.662710048153589*^9}, 
   3.6627100913380585`*^9, 3.6627101669133816`*^9, {3.662710197385124*^9, 
   3.6627102078887253`*^9}, {3.662710247496991*^9, 3.6627102640489373`*^9}, {
   3.6627103344399633`*^9, 3.662710340799327*^9}, {3.6627104366478095`*^9, 
   3.662710439686983*^9}, {3.662710533350341*^9, 3.662710548238192*^9}, {
   3.662710611504811*^9, 3.6627106694541254`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
      "8", ",", "10"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", "9", "}"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.662710027922432*^9, 3.662710056954092*^9}, 
   3.662710093367175*^9, {3.662710167688426*^9, 3.662710215735174*^9}, {
   3.6627102579295874`*^9, 3.6627102941056566`*^9}, {3.6627103450485706`*^9, 
   3.662710380678608*^9}, {3.6627104227850165`*^9, 3.6627104701017227`*^9}, {
   3.6627105542945385`*^9, 3.6627105957169075`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "10"}], "}"}], ",", 
   RowBox[{"{", "9", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.662710027922432*^9, 3.662710056954092*^9}, 
   3.662710093367175*^9, {3.662710167688426*^9, 3.662710215735174*^9}, {
   3.6627102579295874`*^9, 3.6627102941056566`*^9}, {3.6627103450485706`*^9, 
   3.662710380678608*^9}, {3.6627104227850165`*^9, 3.6627104701017227`*^9}, {
   3.6627105542945385`*^9, 3.662710595721908*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{{3.662710027922432*^9, 3.662710056954092*^9}, 
   3.662710093367175*^9, {3.662710167688426*^9, 3.662710215735174*^9}, {
   3.6627102579295874`*^9, 3.6627102941056566`*^9}, {3.6627103450485706`*^9, 
   3.662710380678608*^9}, {3.6627104227850165`*^9, 3.6627104701017227`*^9}, {
   3.6627105542945385`*^9, 3.662710595724908*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
    ",", "9", ",", "10"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.662710027922432*^9, 3.662710056954092*^9}, 
   3.662710093367175*^9, {3.662710167688426*^9, 3.662710215735174*^9}, {
   3.6627102579295874`*^9, 3.6627102941056566`*^9}, {3.6627103450485706`*^9, 
   3.662710380678608*^9}, {3.6627104227850165`*^9, 3.6627104701017227`*^9}, {
   3.6627105542945385`*^9, 3.6627105957289085`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"SplitList", "=", 
   RowBox[{"Split", "[", 
    RowBox[{"TestArray1", ",", "Less"}], "]"}]}]}]], "Input",
 CellChangeTimes->{3.662708598771689*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "1", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.66270902887729*^9, 3.6627090341595917`*^9}, 
   3.6627090745889044`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SplitList", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Split", "[", 
      RowBox[{"SplitList", ",", "Less"}], "]"}], ",", "2"}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.662708608212229*^9, 3.662708644475303*^9}, {
  3.6627090412569976`*^9, 3.662709061264142*^9}, {3.6627091219996157`*^9, 
  3.6627091293280354`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "10", "}"}], ",", 
   RowBox[{"{", "9", "}"}], ",", 
   RowBox[{"{", "8", "}"}], ",", 
   RowBox[{"{", "7", "}"}], ",", 
   RowBox[{"{", "6", "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", "4", "}"}], ",", 
   RowBox[{"{", "3", "}"}], ",", 
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", "1", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6627086095193033`*^9, {3.662708640319065*^9, 3.662708645031335*^9}, 
   3.662709046330288*^9, {3.662709117793375*^9, 3.6627091299390697`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Depth", "[", "SplitList", "]"}]], "Input"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{{3.662709064122306*^9, 3.662709076744027*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["BinarySearch", "Subsubsection",
 CellChangeTimes->{{3.662686787485155*^9, 3.6626867900293007`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BinarySearch", "[", 
    RowBox[{"SearchKey_", ",", "SearchArray_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NotFound", "=", "True"}], ";", "\[IndentingNewLine]", 
     RowBox[{"HalvedArray", "=", "SearchArray"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"SearchArray", "=."}], ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"ArrayLength", "=", 
      RowBox[{"Ceiling", "[", 
       FractionBox[
        RowBox[{"Length", "[", "HalvedArray", "]"}], "2"], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"HalvedArray", "\[NotEqual]", 
         RowBox[{"{", "}"}]}], "&&", "NotFound"}], ",", "\[IndentingNewLine]",
        "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"SearchKey", "\[Equal]", 
           RowBox[{"HalvedArray", "[", 
            RowBox[{"[", "ArrayLength", "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"NotFound", "=", "False"}], ";"}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"SearchKey", "<", 
              RowBox[{"HalvedArray", "[", 
               RowBox[{"[", "ArrayLength", "]"}], "]"}]}], ",", 
             "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"HalvedArray", "=", 
               RowBox[{"Drop", "[", 
                RowBox[{"HalvedArray", ",", 
                 RowBox[{"-", "ArrayLength"}]}], "]"}]}], ";"}], ",", " ", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"HalvedArray", "=", 
              RowBox[{"Drop", "[", 
               RowBox[{"HalvedArray", ",", "ArrayLength"}], "]"}]}]}], "]"}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"ArrayLength", "=", 
         RowBox[{"Ceiling", "[", 
          FractionBox["ArrayLength", "2"], "]"}]}], ";"}]}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], " ", ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"NotFound", ",", 
       RowBox[{"{", "}"}], ",", "SearchKey"}], "]"}]}], "\[IndentingNewLine]",
     "\[IndentingNewLine]", "\[IndentingNewLine]", ")"}]}], ";"}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQzTb9e9Y/z9eOTKoCBSC6NENG4D+Q/jVjpiyIZpwZ
qQaiTeYZqIPoFA9HXRB97UqKIYg+9JvbEkSz1EuA6ejwC7YgOiP5VCiIfvCO
JwVETzu6MQ1Ef2EOyAbRIurfykH0gpgTDSC6ZcGMZhAdofuuA0S7bjs+GUT/
05o1HURPOv1qBlgf85V1YPvKRDaC6Bzx92dBtLTxtEsguuNO0Q0QnZ9q+gJE
SxzUfQ+2N03sC4heJSv/E0SXXIr9BaIvzsgWZvB67cixmFcURK8xN5QE0XI5
hXIg2mhJpRKI1pqvog6iZ/5VKgHRXHzqYBoA+g+isw==
  "]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BinarySearch", "[", 
  RowBox[{"162", ",", "TestArray1"}], "]"}]], "Input",
 CellChangeTimes->{{3.662671648405452*^9, 3.6626716612561865`*^9}, {
  3.662675383887109*^9, 3.662675409165555*^9}}],

Cell[BoxData["162"], "Output",
 CellChangeTimes->{
  3.6626762174457855`*^9, {3.662676286459733*^9, 3.6626763090600257`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"NotFound", "=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"HalvedArray", "=", "TestArray1"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"SearchArray", "=."}], ";"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"ArrayLength", "=", 
  RowBox[{"Ceiling", "[", 
   FractionBox[
    RowBox[{"Length", "[", "HalvedArray", "]"}], "2"], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"TestSearchKey", "=", "162"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.6626759839704313`*^9, {3.662676029169017*^9, 3.662676062056898*^9}}],

Cell[BoxData["50000"], "Output",
 CellChangeTimes->{3.6626760295700397`*^9, 3.6626760634859796`*^9}],

Cell[BoxData["162"], "Output",
 CellChangeTimes->{3.6626760295700397`*^9, 3.6626760634869795`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"TestSearchKey", "\[Equal]", 
       RowBox[{"HalvedArray", "[", "ArrayLength", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"NotFound", "=", "False"}], ";", "\[IndentingNewLine]", 
       "TestSearchKey"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"TestSearchKey", "<", 
          RowBox[{"HalvedArray", "[", 
           RowBox[{"[", "ArrayLength", "]"}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"HalvedArray", "=", 
           RowBox[{"Drop", "[", 
            RowBox[{"HalvedArray", ",", 
             RowBox[{"-", "ArrayLength"}]}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"HalvedArray", "=", 
          RowBox[{"Drop", "[", 
           RowBox[{"HalvedArray", ",", "ArrayLength"}], "]"}]}]}], "]"}], 
       ";"}]}], "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ArrayLength", "=", 
     RowBox[{"Ceiling", "[", 
      FractionBox["ArrayLength", "2"], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Length", "[", "HalvedArray", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"NotFound", ",", 
      RowBox[{"{", "}"}]}], "]"}], ";"}], "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.6626759638592815`*^9, 3.662675999226304*^9}, {
  3.662676044889916*^9, 3.6626760689852943`*^9}, {3.662676106706452*^9, 
  3.6626761091065893`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["SumToM", "Subsubsection",
 CellChangeTimes->{{3.6626867966526794`*^9, 3.6626867986137915`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SumToM", "[", 
    RowBox[{"IntegerArray_", ",", "m_"}], "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"First", ",", " ", 
      RowBox[{
       RowBox[{"we", " ", "need", " ", "to", " ", "sort", " ", "the", " ", 
        RowBox[{"array", ".", " ", "Assuming"}], " ", 
        RowBox[{"Sort", "[", "]"}], " ", "is", " ", "a", " ", "merge"}], "-", 
       RowBox[{
       "sort", " ", "or", " ", "better", " ", "sorting", " ", "function", 
        RowBox[{"(", 
         RowBox[{"worst", "-", 
          RowBox[{"case", " ", "run", " ", "time", " ", "is", " ", "O", 
           RowBox[{"(", 
            RowBox[{"nLog", "[", "n", "]"}], ")"}]}]}], ")"}]}]}], ",", " ", 
      RowBox[{
       RowBox[{"we", " ", "can", " ", "simply", " ", "use", " ", 
        RowBox[{"that", ".", " ", "I"}], " ", "will", " ", "sketch", " ", 
        "out", " ", "a", " ", "merge"}], "-", 
       RowBox[{"sort", " ", "above", " ", "anyway", " ", "for", " ", 
        RowBox[{"completeness", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SortedArray", "=", 
      RowBox[{"Sort", "[", "IntegerArray", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"SortedArray", "=", 
        RowBox[{"MergeSort", "[", "IntegerArray", "]"}]}], ";"}], 
      RowBox[{"(*", 
       RowBox[{"O", 
        RowBox[{"(", 
         RowBox[{"nLog", "[", "n", "]"}], ")"}]}], "*)"}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Next", ",", " ", 
       RowBox[{
       "we", " ", "need", " ", "to", " ", "run", " ", "through", " ", "the", 
        " ", "array", " ", "and", " ", "figure", " ", "out", " ", "some", " ",
         "way", " ", "to", " ", "test", " ", "if", " ", "any", " ", "two", 
        " ", "elements", " ", "sum", " ", "to", " ", 
        RowBox[{"m", ".", " ", "Since"}], " ", "we", " ", "already", " ", 
        "know", " ", "m"}], ",", " ", 
       RowBox[{
        RowBox[{"we", " ", "could", " ", "compute", " ", "m"}], "-", 
        "SortedArray"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"SubtractedArray", "=", 
      RowBox[{"m", "-", "SortedArray"}]}], ";", " ", 
     RowBox[{"(*", 
      RowBox[{"O", 
       RowBox[{"(", "n", ")"}]}], "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "We", " ", "can", " ", "now", " ", "go", " ", "through", " ", "this", 
        " ", "array", " ", "element", " ", "by", " ", "element", " ", 
        RowBox[{"(", 
         RowBox[{"O", 
          RowBox[{"(", "n", ")"}]}], ")"}], " ", "and", " ", "using", " ", 
        "each", " ", "value", " ", "as", " ", "the", " ", "search", " ", 
        "key"}], ",", " ", 
       RowBox[{
       "BinarySearch", " ", "the", " ", "SortedArray", " ", "until", " ", "a",
         " ", "match", " ", "is", " ", "found", " ", "or", " ", "you", " ", 
        "run", " ", "out", " ", "of", " ", "array", " ", "elements", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"O", 
           RowBox[{"(", 
            RowBox[{"Log", "[", "n", "]"}], ")"}]}], ")"}], ".", " ", 
         "Since"}], " ", "each", " ", "of", " ", "the", " ", "n", " ", 
        "elements", " ", "is", " ", "used", " ", "in", " ", "searching"}], 
       ",", " ", 
       RowBox[{
        RowBox[{"the", " ", "time", " ", "is", " ", "O", 
         RowBox[{"(", 
          RowBox[{"n", "*", 
           RowBox[{"Log", "[", "n", "]"}]}], ")"}], " ", "and", " ", "thus", 
         " ", "the", " ", "total", " ", "time", " ", 
         RowBox[{"is", " ", "~", " ", "2"}], 
         RowBox[{"nlog", "[", "n", "]"}]}], " ", "+", " ", "n"}], ",", " ", 
       RowBox[{"which", " ", "is", " ", "still", " ", "O", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"nLog", "[", "n", "]"}], ")"}], "."}]}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"SearchResults", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"BinarySearch", "[", 
          RowBox[{"#", ",", "SortedArray"}], "]"}], "&"}], "/@", 
        "SubtractedArray"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "SearchResults", "]"}], ">", "1"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Addend2", "=", 
         RowBox[{"SearchResults", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"m", "-", "Addend2"}], ",", "Addend2"}], "}"}]}], ",", 
       "\[IndentingNewLine]", "$Failed"}], "\[IndentingNewLine]", "]"}]}], 
    "\[IndentingNewLine]", ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.662302662200719*^9, 3.6623027563331027`*^9}, {
   3.66266468115366*^9, 3.662664764825445*^9}, {3.6626700723410177`*^9, 
   3.6626700958833647`*^9}, {3.662671076181722*^9, 3.6626711965876093`*^9}, {
   3.662671274524067*^9, 3.6626714348982396`*^9}, 3.662671489090339*^9, {
   3.662671584473795*^9, 3.6626716088561897`*^9}, {3.6626718478628597`*^9, 
   3.662671911942525*^9}, {3.6626719643825245`*^9, 3.662671980894469*^9}, {
   3.6626720145423937`*^9, 3.662672069301525*^9}, {3.662673351061838*^9, 
   3.662673480932266*^9}, {3.662673520965556*^9, 3.662673521003558*^9}, {
   3.662673554012446*^9, 3.662673669171033*^9}, {3.6626737539948845`*^9, 
   3.6626737703778214`*^9}, {3.662673819618638*^9, 3.662673822417798*^9}, {
   3.662673895137957*^9, 3.6626739130809836`*^9}, {3.6626739698332295`*^9, 
   3.662674000103961*^9}, {3.6626763883605614`*^9, 3.662676527319307*^9}, {
   3.6626766071508727`*^9, 3.6626766269510055`*^9}, 3.662676787126167*^9, {
   3.6626772440503016`*^9, 3.662677291209999*^9}, {3.6626773240178757`*^9, 
   3.662677327529076*^9}, {3.662677388109541*^9, 3.662677394073882*^9}, {
   3.6626776485214357`*^9, 3.6626776488154526`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Is", " ", "there", " ", "a", " ", "faster", " ", "way", " ", "to", " ", 
    "do", " ", 
    RowBox[{"this", "?", " ", "Since"}], " ", "this", " ", "is", " ", 
    "technically", " ", "2", 
    RowBox[{"nLog", "[", "n", "]"}], " ", 
    RowBox[{"let", "'"}], "s", " ", "see", " ", "if", " ", "we", " ", "can", 
    " ", "make", " ", "it", " ", "faster"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"We", " ", "have", " ", "to", " ", "start", " ", "somewhere"}], 
    ",", " ", 
    RowBox[{
    "and", " ", "the", " ", "middle", " ", "is", " ", "ambiguous", " ", 
     RowBox[{"here", ".", " ", 
      RowBox[{"Ends", "?"}]}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"SumToMAlt", "[", 
     RowBox[{"IntegerArray_", ",", "m_"}], "]"}], ":=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Still", " ", "need", " ", "to", " ", "sort"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SortedArray", "=", 
       RowBox[{"Sort", "[", "IntegerArray", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Addends", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"SortedArray", "=", 
         RowBox[{"MergeSort", "[", "IntegerArray", "]"}]}], ";"}], 
       RowBox[{"(*", 
        RowBox[{"O", 
         RowBox[{"(", 
          RowBox[{"nLog", "[", "n", "]"}], ")"}]}], "*)"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"We", " ", "have", " ", "a", " ", "linear", " ", "array"}], 
        ",", " ", 
        RowBox[{"Length", " ", "L"}], ",", " ", 
        RowBox[{"which", " ", "looks", " ", "like"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"{", 
        RowBox[{"Smallest", ",", "...", ",", "Largest"}], "}"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"What", " ", "is", " ", "Smallest"}], "+", 
        RowBox[{"Largest", "?"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Smallest", " ", "+", " ", 
        RowBox[{"Largest", " ", "can", " ", "be", " ", 
         RowBox[{"anything", ".", " ", "Trying"}], " ", "to", " ", "match", 
         " ", "to", " ", "m"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"If", " ", "Smallest"}], " ", "+", " ", "Largest"}], " ", 
         "=", " ", "m"}], ",", " ", 
        RowBox[{
         RowBox[{"we", "'"}], "re", " ", "done"}], ",", " ", 
        RowBox[{"boom", "."}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"If", " ", "Smallest"}], " ", "+", " ", "Largest"}], " ", 
         ">", " ", "m"}], ",", " ", 
        RowBox[{"largest", " ", "too", " ", 
         RowBox[{"large", "?"}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Yes", "!"}], " ", "We", " ", "might", " ", "still", " ", 
        "make", " ", "the", " ", "sum", " ", "because", " ", "there", " ", 
        "are", " ", "smaller", " ", 
        RowBox[{"#", "'"}], "s", " ", "to", " ", "the", " ", "left", " ", 
        "of", " ", 
        RowBox[{"Largest", "."}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"So", " ", "we", " ", 
         RowBox[{"don", "'"}], "t", " ", "care", " ", "about", " ", 
         "largest"}], ",", " ", 
        RowBox[{"drop", " ", "it"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"If", " ", "Smallest"}], " ", "+", " ", "Largest"}], " ", 
         "<", " ", "m"}], ",", " ", 
        RowBox[{"the", " ", "converse", " ", "is", " ", 
         RowBox[{"true", ":", " ", 
          RowBox[{"Smallest", " ", "too", " ", 
           RowBox[{"small", "."}]}]}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Drop", " ", "Smallest"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Iterate", " ", "until", " ", "we", " ", "have", " ", "a", " ", 
        "match", " ", "or", " ", "the", " ", "list", " ", "is", " ", 
        RowBox[{"empty", "."}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"MatchNotFound", "=", "True"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ArrayLength", "=", 
       RowBox[{"Length", "[", "SortedArray", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"SortedArray", "\[NotEqual]", 
          RowBox[{"{", "}"}]}], "&&", "MatchNotFound"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Smallest", "=", 
          RowBox[{"SortedArray", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"Largest", "=", 
          RowBox[{"SortedArray", "[", 
           RowBox[{"[", "ArrayLength", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Smallest", "+", "Largest"}], "\[Equal]", "m"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"MatchNotFound", "=", "False"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Addends", "=", 
             RowBox[{"{", 
              RowBox[{"Smallest", ",", "Largest"}], "}"}]}], ";"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Smallest", "+", "Largest"}], ">", "m"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"SortedArray", "=", 
                RowBox[{"Drop", "[", 
                 RowBox[{"SortedArray", ",", 
                  RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"ArrayLength", "=", 
                RowBox[{"ArrayLength", "-", "1"}]}], ";"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"SortedArray", "=", 
                RowBox[{"Drop", "[", 
                 RowBox[{"SortedArray", ",", "1"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"ArrayLength", "=", 
                RowBox[{"ArrayLength", "-", "1"}]}], ";"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
       "MatchNotFound", ",", "\[IndentingNewLine]", "$Failed", ",", 
        "\[IndentingNewLine]", "Addends"}], "]"}]}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "This", " ", "will", " ", "at", " ", "most", " ", "run", " ", 
        "through", " ", "the", " ", "entire", " ", "list", " ", "once"}], ",",
        " ", 
       RowBox[{
       "so", " ", "at", " ", "worst", " ", "it", " ", "will", " ", "finish", 
        " ", "in", " ", "O", 
        RowBox[{"(", "n", ")"}]}]}], "*)"}], "\[IndentingNewLine]", ")"}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.662678530310871*^9, 3.662678603681068*^9}, {
   3.6626786373289924`*^9, 3.6626787218798285`*^9}, {3.6626788930086164`*^9, 
   3.662678977597455*^9}, {3.6626790634373646`*^9, 3.66267976287237*^9}, {
   3.662679872112618*^9, 3.6626800448624988`*^9}, {3.6626801683925643`*^9, 
   3.6626802625419493`*^9}, {3.6626803511490173`*^9, 
   3.6626803626366744`*^9}, {3.6626804556609955`*^9, 3.662680481467471*^9}, 
   3.6626806942426414`*^9, {3.6626811711439185`*^9, 3.662681172558999*^9}, {
   3.662681204175808*^9, 3.662681239637836*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Round", "[", "0.5", "]"}]], "Input",
 CellChangeTimes->{{3.6626729459206653`*^9, 3.662672983678825*^9}, {
  3.6626730599111853`*^9, 3.6626730633183804`*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.6626729501399064`*^9, 3.6626729839778423`*^9}, {
  3.662673061126254*^9, 3.662673063687401*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"^", " ", 
   RowBox[{"Seriously", "?", "!"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.6626730060671053`*^9, 3.662673012598479*^9}, {
  3.662686418273037*^9, 3.6626864198561277`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.662679393720256*^9, 3.6626794004576406`*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.6626794010646753`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Sort", " ", "timing", " ", 
    RowBox[{"testing", "."}]}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"TestArray1", "=", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1000"}], "}"}], ",", 
       RowBox[{"{", "100000", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"TestArray2", "=", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1000"}], "}"}], ",", 
       RowBox[{"{", "1000000", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"TestArray3", "=", 
     RowBox[{"RandomInteger", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1000"}], "}"}], ",", 
       RowBox[{"{", "10000000", "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Timing", "[", 
    RowBox[{
     RowBox[{"Sort", "[", "TestArry1", "]"}], ";"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Timing", "[", 
    RowBox[{
     RowBox[{"Sort", "[", "TestArry2", "]"}], ";"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Timing", "[", 
    RowBox[{
     RowBox[{"Sort", "[", "TestArry3", "]"}], ";"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6626702280619245`*^9, 3.6626702926666193`*^9}, {
  3.662670697700074*^9, 3.6626707116308713`*^9}, {3.6626707476389303`*^9, 
  3.6626708942623167`*^9}, {3.662671540923304*^9, 3.6626715471206584`*^9}, {
  3.662674630405012*^9, 3.662674633395183*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.6626708960224175`*^9, 3.662674634895269*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.1248008`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.6626708960224175`*^9, 3.6626746350232763`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.6536106`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{3.6626708960224175`*^9, 3.6626746368303795`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.0156001`", ",", "Null"}], "}"}], "/", "0.0156001"}], "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.1092007`", ",", "Null"}], "}"}], "/", "0.0156001"}], "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.5444099`", ",", "Null"}], "}"}], "/", 
    "0.0156001"}]}]}]], "Input",
 CellChangeTimes->{{3.6626709825623674`*^9, 3.6626709974682198`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.`", ",", 
   RowBox[{"64.1021531913257`", " ", "Null"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6626710165083094`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.`", ",", 
   RowBox[{"64.1021531913257`", " ", "Null"}]}], "}"}]], "Output",
 CellChangeTimes->{3.662671016510309*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"99.`", ",", 
   RowBox[{"64.1021531913257`", " ", "Null"}]}], "}"}]], "Output",
 CellChangeTimes->{3.662671016512309*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  SuperscriptBox["10.", "5"], " ", 
  RowBox[{
   RowBox[{"Log", "[", 
    SuperscriptBox["10", "5"], "]"}], "/", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["10.", "5"], " ", 
     RowBox[{"Log", "[", 
      SuperscriptBox["10", "5"], "]"}]}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SuperscriptBox["10.", "6"], " ", 
  RowBox[{
   RowBox[{"Log", "[", 
    SuperscriptBox["10", "6"], "]"}], "/", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["10.", "5"], " ", 
     RowBox[{"Log", "[", 
      SuperscriptBox["10", "5"], "]"}]}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  SuperscriptBox["10.", "7"], " ", 
  RowBox[{
   RowBox[{"Log", "[", 
    SuperscriptBox["10", "7"], "]"}], "/", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["10.", "5"], " ", 
     RowBox[{"Log", "[", 
      SuperscriptBox["10", "5"], "]"}]}], ")"}]}]}]}], "Input",
 CellChangeTimes->{{3.6626709078410935`*^9, 3.6626709633252673`*^9}, {
  3.6626710059897075`*^9, 3.662671045932992*^9}}],

Cell[BoxData["0.9999999999999999`"], "Output",
 CellChangeTimes->{{3.6626709512865787`*^9, 3.6626709639533033`*^9}, {
  3.6626710263348713`*^9, 3.662671046963051*^9}}],

Cell[BoxData["11.999999999999998`"], "Output",
 CellChangeTimes->{{3.6626709512865787`*^9, 3.6626709639533033`*^9}, {
  3.6626710263348713`*^9, 3.662671046965051*^9}}],

Cell[BoxData["140.`"], "Output",
 CellChangeTimes->{{3.6626709512865787`*^9, 3.6626709639533033`*^9}, {
  3.6626710263348713`*^9, 3.6626710469670515`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Drop", "[", 
  RowBox[{"TestArray1", ",", 
   RowBox[{"-", 
    RowBox[{"Ceiling", "[", 
     RowBox[{
      RowBox[{"Length", "[", "TestArray1", "]"}], "/", "2"}], "]"}]}]}], 
  "]"}], "\[IndentingNewLine]", "TestArray1"}], "Input",
 CellChangeTimes->{{3.6626746430837374`*^9, 3.6626747013150682`*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
          "795", ",", "162", ",", "766", ",", "597", ",", "51", ",", "74", 
           ",", "806", ",", "251", ",", "657", ",", "828", ",", "327", ",", 
           "419", ",", "551", ",", "933", ",", "828", ",", "251", ",", "705", 
           ",", "260", ",", "269", ",", "702", ",", 
           TemplateBox[{"49960"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", "28", ",", "67",
            ",", "580", ",", "765", ",", "820", ",", "242", ",", "945", ",", 
           "518", ",", "128", ",", "157", ",", "88", ",", "380", ",", "152", 
           ",", "334", ",", "928", ",", "239", ",", "19", ",", "528", ",", 
           "921", ",", "62"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{76., {3., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{62., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 46, 21583240394801837026, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{74., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{74., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 46, 21583240394801837026, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{54., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{54., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 46, 21583240394801837026, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{94., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{94., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[46]]], "Output",
 CellChangeTimes->{{3.6626746599086995`*^9, 3.66267470170309*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
          "795", ",", "162", ",", "766", ",", "597", ",", "51", ",", "74", 
           ",", "806", ",", "251", ",", "657", ",", "828", ",", "327", ",", 
           "419", ",", "551", ",", "933", ",", "828", ",", "251", ",", "705", 
           ",", "260", ",", "269", ",", "702", ",", 
           TemplateBox[{"99960"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", "981", ",", 
           "996", ",", "80", ",", "429", ",", "382", ",", "334", ",", "490", 
           ",", "57", ",", "365", ",", "73", ",", "551", ",", "680", ",", 
           "494", ",", "655", ",", "304", ",", "116", ",", "761", ",", "980", 
           ",", "56", ",", "235"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{76., {3., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{62., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{62., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 47, 21583240394801837026, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{74., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{74., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 47, 21583240394801837026, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{54., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 47, 21583240394801837026, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{94., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{94., {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[47]]], "Output",
 CellChangeTimes->{{3.6626746599086995`*^9, 3.6626747018360977`*^9}}],

Cell[BoxData["100000"], "Output",
 CellChangeTimes->{
  3.6626760069477463`*^9, {3.662676071641446*^9, 3.662676094195736*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SortedArray", "=."}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"SortedArrayTest", "=", 
  RowBox[{"Sort", "[", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "4", ",", "3", ",", "2", ",", "5", ",", "1", ",", "8",
      ",", "9", ",", "7", ",", "10"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SubtractedArrayTest", "=", 
   RowBox[{"8", "-", "SortedArrayTest"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"SearchResultsTest", "=", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"BinarySearch", "[", 
      RowBox[{"#", ",", "SortedArrayTest"}], "]"}], "&"}], "/@", 
    "SubtractedArrayTest"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Length", "[", "SearchResultsTest", "]"}], ">", "1"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Addend2Test", "=", 
     RowBox[{"SearchResultsTest", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"8", "-", "Addend2Test"}], ",", "Addend2Test"}], "}"}]}], ",", 
   "\[IndentingNewLine]", "$Failed"}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.662676636860572*^9, 3.66267669871811*^9}, {
  3.662676762333749*^9, 3.6626767656849403`*^9}, {3.662676811757576*^9, 
  3.662676838604111*^9}, {3.6626771557542515`*^9, 3.6626772124734955`*^9}, {
  3.6626774906074038`*^9, 3.662677572567092*^9}, {3.6626779684777365`*^9, 
  3.662678067931425*^9}, {3.662678143980775*^9, 3.6626781580185776`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "5", ",", "7", 
   ",", "8", ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6626767024613247`*^9, 3.662676770024189*^9, {3.6626768141657133`*^9, 
   3.662676839407157*^9}, 3.662676914319442*^9, {3.6626772003228006`*^9, 
   3.6626772137625694`*^9}, 3.6626774869151926`*^9, {3.6626775388981657`*^9, 
   3.6626775731311235`*^9}, 3.662677761516899*^9, {3.6626779970463705`*^9, 
   3.66267803916778*^9}, {3.6626780701755533`*^9, 3.662678089401653*^9}, 
   3.662678158598611*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "6", ",", "6", ",", "5", ",", "5", ",", "4", ",", "3", ",", "1", 
   ",", "0", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "2"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6626767024613247`*^9, 3.662676770024189*^9, {3.6626768141657133`*^9, 
   3.662676839407157*^9}, 3.662676914319442*^9, {3.6626772003228006`*^9, 
   3.6626772137625694`*^9}, 3.6626774869151926`*^9, {3.6626775388981657`*^9, 
   3.6626775731311235`*^9}, 3.662677761516899*^9, {3.6626779970463705`*^9, 
   3.66267803916778*^9}, {3.6626780701755533`*^9, 3.662678089401653*^9}, 
   3.6626781586006107`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "4", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6626767024613247`*^9, 3.662676770024189*^9, {3.6626768141657133`*^9, 
   3.662676839407157*^9}, 3.662676914319442*^9, {3.6626772003228006`*^9, 
   3.6626772137625694`*^9}, 3.6626774869151926`*^9, {3.6626775388981657`*^9, 
   3.6626775731311235`*^9}, 3.662677761516899*^9, {3.6626779970463705`*^9, 
   3.66267803916778*^9}, {3.6626780701755533`*^9, 3.662678089401653*^9}, 
   3.662678158601611*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6626767024613247`*^9, 3.662676770024189*^9, {3.6626768141657133`*^9, 
   3.662676839407157*^9}, 3.662676914319442*^9, {3.6626772003228006`*^9, 
   3.6626772137625694`*^9}, 3.6626774869151926`*^9, {3.6626775388981657`*^9, 
   3.6626775731311235`*^9}, 3.662677761516899*^9, {3.6626779970463705`*^9, 
   3.66267803916778*^9}, {3.6626780701755533`*^9, 3.662678089401653*^9}, 
   3.6626781586026106`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", "SearchResultsTest", "]"}]], "Input",
 CellChangeTimes->{{3.662677092865654*^9, 3.6626770973139086`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", "6", ",", "4", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.662677097929944*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SumToM", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "3", ",", "2", ",", "6", ",", "1", ",", "8"}],
     "}"}], ",", "8"}], "]"}]], "Input",
 CellChangeTimes->{{3.662676544446286*^9, 3.662676577709189*^9}, {
  3.6626773415048757`*^9, 3.6626773476162252`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{
  3.662676583610526*^9, {3.662677342657942*^9, 3.662677353073537*^9}, 
   3.6626774606136885`*^9, {3.6626776602071047`*^9, 3.6626776726998186`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SumToMAlt", "[", 
  RowBox[{"TestArray", ",", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.662680084622773*^9, 3.6626801081091166`*^9}, 
   3.662680743857479*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.662680489921955*^9, 3.662680745134552*^9, 
  3.6626811879398794`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"MatchNotFound", "=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"TestArray", "=", 
  RowBox[{"Sort", "[", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "4", ",", "3", ",", "2", ",", "5", ",", "1", ",", "8",
      ",", "9", ",", "7", ",", "10"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ArrayLength", "=", 
  RowBox[{"Length", "[", "TestArray", "]"}]}]}], "Input",
 CellChangeTimes->{{3.662680526410042*^9, 3.6626805522665205`*^9}, {
  3.662680598849185*^9, 3.662680612504966*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "5", ",", "7", 
   ",", "8", ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{
  3.662680613027996*^9, 3.6626807851798425`*^9, 3.662680854037781*^9, 
   3.6626809040466413`*^9, {3.662680970238427*^9, 3.662680996325919*^9}, 
   3.6626810463537807`*^9, {3.6626811125055647`*^9, 3.662681138979079*^9}}],

Cell[BoxData["11"], "Output",
 CellChangeTimes->{
  3.662680613027996*^9, 3.6626807851798425`*^9, 3.662680854037781*^9, 
   3.6626809040466413`*^9, {3.662680970238427*^9, 3.662680996325919*^9}, 
   3.6626810463537807`*^9, {3.6626811125055647`*^9, 3.662681138981079*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Smallest", "=", 
  RowBox[{"TestArray", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Largest", "=", 
  RowBox[{"TestArray", "[", 
   RowBox[{"[", "ArrayLength", "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.6626803142909093`*^9, 3.662680343211563*^9}, {
  3.6626805312973213`*^9, 3.6626805886506014`*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.6626805810751686`*^9, 3.66268064404277*^9}, 
   3.6626807971895294`*^9, 3.6626808555668683`*^9, 3.6626809053127136`*^9, 
   3.662680971228484*^9, {3.662681113944647*^9, 3.6626811415702267`*^9}}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{{3.6626805810751686`*^9, 3.66268064404277*^9}, 
   3.6626807971895294`*^9, 3.6626808555668683`*^9, 3.6626809053127136`*^9, 
   3.662680971228484*^9, {3.662681113944647*^9, 3.662681141572227*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"TestArray", "\[NotEqual]", 
   RowBox[{"{", "}"}]}], "&&", "MatchNotFound"}]], "Input",
 CellChangeTimes->{3.662680794128354*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.662680800226703*^9, 3.6626809070908155`*^9, 
  3.66268104965397*^9, 3.662681115457733*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"TestArray", "\[NotEqual]", 
   RowBox[{"{", "}"}]}], "&&", "MatchNotFound"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Smallest", "+", "Largest"}], "\[Equal]", "10"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"MatchNotFound", "=", "False"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Addends", "=", 
      RowBox[{"{", 
       RowBox[{"Smallest", ",", "Largest"}], "}"}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Smallest", "+", "Largest"}], ">", "10"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"TestArray", "=", 
         RowBox[{"Drop", "[", 
          RowBox[{"TestArray", ",", 
           RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Return", "[", "TestArray", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"ArrayLength", "=", 
         RowBox[{"ArrayLength", "-", "1"}]}], ";"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"TestArray", "=", 
         RowBox[{"Drop", "[", 
          RowBox[{"TestArray", ",", "1"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ArrayLength", "=", 
         RowBox[{"ArrayLength", "-", "1"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", "MatchNotFound", "\[IndentingNewLine]", \
"Addends", "\[IndentingNewLine]", "TestArray", "\[IndentingNewLine]", \
"ArrayLength"}], "Input",
 CellChangeTimes->{{3.662680623217579*^9, 3.662680670481282*^9}, {
  3.6626808488644853`*^9, 3.6626808494485188`*^9}, {3.6626809012314806`*^9, 
  3.662680901624503*^9}, {3.662680951286343*^9, 3.66268103461611*^9}, {
  3.66268110229498*^9, 3.662681110310439*^9}, {3.6626811568060985`*^9, 
  3.6626811576861486`*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.6626806634208784`*^9, 3.66268067131733*^9}, 
   3.662680715215841*^9, 3.662680857708991*^9, 3.6626809081948786`*^9, 
   3.662680972660566*^9, 3.662681036580222*^9, {3.6626811162517786`*^9, 
   3.6626811591222305`*^9}}],

Cell[BoxData[
 RowBox[{"Return", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "5", ",", "7", 
    ",", "8"}], "}"}], "]"}]], "Output",
 CellChangeTimes->{{3.6626806634208784`*^9, 3.66268067131733*^9}, 
   3.662680715215841*^9, 3.662680857708991*^9, 3.6626809081948786`*^9, 
   3.662680972660566*^9, 3.662681036580222*^9, {3.6626811162517786`*^9, 
   3.662681159126231*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.6626806634208784`*^9, 3.66268067131733*^9}, 
   3.662680715215841*^9, 3.662680857708991*^9, 3.6626809081948786`*^9, 
   3.662680972660566*^9, 3.662681036580222*^9, {3.6626811162517786`*^9, 
   3.6626811591292315`*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.6626806634208784`*^9, 3.66268067131733*^9}, 
   3.662680715215841*^9, 3.662680857708991*^9, 3.6626809081948786`*^9, 
   3.662680972660566*^9, 3.662681036580222*^9, {3.6626811162517786`*^9, 
   3.6626811591322317`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "5", ",", "7", 
   ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{{3.6626806634208784`*^9, 3.66268067131733*^9}, 
   3.662680715215841*^9, 3.662680857708991*^9, 3.6626809081948786`*^9, 
   3.662680972660566*^9, 3.662681036580222*^9, {3.6626811162517786`*^9, 
   3.6626811591352315`*^9}}],

Cell[BoxData["11"], "Output",
 CellChangeTimes->{{3.6626806634208784`*^9, 3.66268067131733*^9}, 
   3.662680715215841*^9, 3.662680857708991*^9, 3.6626809081948786`*^9, 
   3.662680972660566*^9, 3.662681036580222*^9, {3.6626811162517786`*^9, 
   3.662681159137232*^9}}]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Challenge 4", "Section",
 CellChangeTimes->{{3.651239921804616*^9, 3.651239932428547*^9}}],

Cell[TextData[{
 "Pretend the Wolfram Language does not have the function ",
 StyleBox["Prime", "Input"],
 " built in and it\[CloseCurlyQuote]s your job to write it. You are told to \
use the function ",
 StyleBox["PrimePi", "Input"],
 ". How would you implement ",
 StyleBox["Prime", "Input"],
 "? You only need to give the psuedocode."
}], "Text",
 CellChangeTimes->{{3.6512399342753143`*^9, 3.6512400435352297`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Prime", "[", "n", "]"}], " ", "gives", " ", "the", " ", "nth", 
   " ", "prime", " ", 
   RowBox[{"number", "."}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "nth", " ", "prime", " ", "number", " ", "is", " ", "approx", " ", "n", " ", 
   RowBox[{"Log", "[", "n", "]"}], 
   RowBox[{"(", "underestimates", ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"This", " ", "give", " ", "us", " ", "our", " ", "estimate", " ", 
  "in", " ", "trying", " ", "to", " ", "find", " ", "a", " ", "value", " ", 
  "of", " ", "x", " ", "near", " ", "which", " ", "PrimePi", " ", "changes", 
  " ", 
  RowBox[{"value", "."}]}]}], "Input",
 CellChangeTimes->{{3.662519715272467*^9, 3.6625197262760963`*^9}, 
   3.662519772419736*^9, {3.6625211183077164`*^9, 3.662521200762432*^9}, {
   3.662521416848792*^9, 3.6625214309285975`*^9}, {3.662521669559246*^9, 
   3.6625216745995345`*^9}, 3.6625798996927996`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"PrimePi", "[", "x", "]"}], " ", "give", " ", "the", " ", 
   StyleBox["number",
    FontSlant->"Italic"], " ", "of", " ", "primes", " ", "less", " ", "than", 
   " ", "or", " ", "equal", " ", "to", " ", 
   RowBox[{"x", "."}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PrimePi", "[", "x", "]"}], " ", "grows", " ", "like", " ", 
   "RiemannR", " ", "and", " ", "LogIntegral", " ", "is", " ", "always", " ", 
   "greater", " ", "than", " ", "PrimePi"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "When", " ", "PrimePi", " ", "changes", " ", "in", " ", "value", " ", "is", 
   " ", "where", " ", "there", " ", "is", " ", "to", " ", "be", " ", "found", 
   " ", "a", " ", "prime", " ", 
   RowBox[{"number", ".", " ", "The"}], " ", "value", " ", "of", " ", "x", 
   " ", "for", " ", "which", " ", "it", " ", "changed", " ", "is", " ", 
   "that", " ", "prime", " ", "or", " ", "two", " ", "less", " ", "than", " ",
    "that", " ", "prime"}], ",", " ", 
  RowBox[{
   RowBox[{
   "depending", " ", "on", " ", "the", " ", "direction", " ", "of", " ", 
    RowBox[{"traversal", "."}]}], ";"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.662519727655175*^9, 3.6625197695965743`*^9}, {
   3.662520796622317*^9, 3.662520907764674*^9}, 3.6625211634262967`*^9, 
   3.6625215189606323`*^9, {3.662521689246372*^9, 3.662521712486701*^9}, {
   3.6627140050309095`*^9, 3.6627140469973097`*^9}}],

Cell[CellGroupData[{

Cell["Pseudocode", "Subsection",
 CellChangeTimes->{{3.6626599574564795`*^9, 3.6626599651779213`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Note", ":", " ", 
     RowBox[{
     "I", " ", "have", " ", "implemented", " ", "this", " ", "pseudocode", 
      " ", "into", " ", "a", " ", "working", " ", "function", " ", 
      RowBox[{"below", ".", " ", "It"}], " ", "runs", " ", "somewhat", " ", 
      "slower", " ", "than", " ", "the", " ", "native", " ", "Mathematica", 
      " ", "function", " ", "for", " ", "values", " ", "of", " ", "n", " ", 
      "approaching", " ", "the", " ", "upper", " ", "limit", " ", "of", " ", 
      "PrimePi", 
      RowBox[{"(", 
       SuperscriptBox["10", "12"], ")"}]}]}], ",", " ", 
    RowBox[{
    "but", " ", "is", " ", "comparably", " ", "fast", " ", "for", " ", "a", 
     " ", "large", " ", "portion", " ", "of", " ", "the", " ", 
     RowBox[{"range", "."}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6626625428613563`*^9, 3.6626627048156195`*^9}, {
  3.6626627427597895`*^9, 3.6626627674792037`*^9}, {3.6626689814676237`*^9, 
  3.6626690667785025`*^9}, {3.662670033180778*^9, 3.662670054499997*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"NewPrime", "[", "n", "]"}], "=", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "In", " ", "order", " ", "to", " ", "make", " ", "a", " ", 
        "functional", " ", "prime", " ", "number", " ", "generator", " ", 
        "using", " ", "PrimePi"}], ",", " ", 
       RowBox[{
       "we", " ", "will", " ", "need", " ", "to", " ", "utilize", " ", "an", 
        " ", "approximate", " ", "function"}], ",", " ", 
       RowBox[{
        RowBox[{
         OverscriptBox["P", "~"], "[", "n", "]"}], " ", "which", " ", 
        "returns", " ", "a", " ", "value", " ", "close", " ", "to", " ", 
        "the", " ", "prime", " ", "number", " ", "in", " ", 
        RowBox[{"question", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "We", " ", "will", " ", "then", " ", "need", " ", "to", " ", "check", 
       " ", "the", " ", "value", " ", "returned", " ", "by", " ", 
       RowBox[{"PrimePi", "[", 
        RowBox[{
         OverscriptBox["P", "~"], "[", "n", "]"}], "]"}], " ", "to", " ", 
       "see", " ", "how", " ", "far", " ", "off", " ", "in", " ", "n", " ", 
       "the", " ", "estimated", " ", "prime", " ", "number", " ", 
       RowBox[{"is", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "We", " ", "then", " ", "iteratively", " ", "alter", " ", "the", " ", 
        "test", " ", "value", " ", "of", " ", "n"}], ",", " ", 
       RowBox[{
        RowBox[{
        "NEstimate", " ", "closer", " ", "to", " ", "the", " ", "value", " ", 
         "for", " ", "which", " ", 
         RowBox[{"PrimePi", "[", 
          RowBox[{
           OverscriptBox["P", "~"], "[", "NEstimate", "]"}], "]"}]}], "=", 
        RowBox[{"n", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "Once", " ", "we", " ", "are", " ", "within", " ", "some", " ", 
        "range", " ", "of", " ", "n", " ", "and", " ", "the", " ", "prime", 
        " ", "estimate", " ", "is", " ", "larger", " ", "than", " ", "the", 
        " ", "value", " ", "of", " ", "the", " ", "prime"}], ",", " ", 
       RowBox[{
        RowBox[{
        "we", " ", "make", " ", "sure", " ", "the", " ", "prime", " ", 
         "estimate", " ", "is", " ", "odd", " ", "and", " ", "decrement", " ",
          "in", " ", "steps", " ", "of", " ", "2", " ", "until", " ", "the", 
         " ", "first", " ", "value", " ", "for", " ", "which", " ", 
         RowBox[{"PrimePi", "[", 
          RowBox[{"PrimeEstimate", "-", "2"}], "]"}]}], "=", 
        RowBox[{"n", "-", 
         RowBox[{
         "1.", " ", "This", " ", "guarantees", " ", "that", " ", 
          "PrimeEstimate", " ", "is", " ", "in", " ", "fact", " ", "the", " ",
           "prime", " ", "we", " ", 
          RowBox[{"seek", "."}]}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "Select", " ", "a", " ", "prime", " ", "number", " ", "approximating", 
        " ", 
        RowBox[{"function", ".", " ", "n"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Log", "[", "n", "]"}], "+", 
          RowBox[{"Log", "[", 
           RowBox[{"Log", "[", "n", "]"}], "]"}], "-", "1"}], ")"}], " ", 
        "has", " ", "been", " ", "proven", " ", "to", " ", "undershoot", " ", 
        RowBox[{
         SubscriptBox["P", "n"], ".", " ", "More"}], " ", "accurate", " ", 
        "expansions", " ", "exist", " ", "and", " ", "ought", " ", "to", " ", 
        "be", " ", "used", " ", "if", " ", "we", " ", "want", " ", "to", " ", 
        "have", " ", "any", " ", "hope", " ", "of", " ", "computing", " ", 
        SubscriptBox["P", "n"], " ", "for", " ", "large", " ", "n", " ", "in",
         " ", "a", " ", "reasonable", " ", "amount", " ", "of", " ", 
        RowBox[{"time", ".", " ", "For"}], " ", "now"}], ",", " ", 
       RowBox[{
        RowBox[{"let", "'"}], "s", " ", "stick", " ", "the", " ", "above", 
        " ", "here", " ", "as", " ", "a", " ", 
        RowBox[{"placeholder", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"PrimeApprox", "[", "n", "]"}], "=", 
       RowBox[{"(", 
        RowBox[{"n", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Log", "[", "n", "]"}], "+", 
           RowBox[{"Log", "[", 
            RowBox[{"Log", "[", "n", "]"}], "]"}], "-", "1"}], ")"}]}], 
        ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Estimate", " ", "initialization"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Set", " ", "the", " ", "initial", " ", "values", " ", "of", " ", 
        "the", " ", "estimates", " ", "used", " ", "in", " ", "estimate", " ", 
        SubscriptBox["P", "n"]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"PrimeEstimate", "=", 
       RowBox[{"PrimeApprox", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Find", " ", "corresponding", " ", "PrimePi", " ", "for", " ", "the", 
        " ", "prime", " ", "estimate", " ", 
        OverscriptBox[
         SubscriptBox["P", "n"], "~"]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"NEstimate", "=", 
       RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Set", " ", "the", " ", "first", " ", "corrected", " ", "value", " ", 
        "for", " ", "the", " ", "value", " ", "of", " ", "x", " ", "that", 
        " ", "\[IndentingNewLine]", "brings", " ", 
        RowBox[{"PrimePi", "[", 
         RowBox[{"PrimeApprox", "[", "x", "]"}], "]"}], " ", "closer", " ", 
        "to", " ", "the", " ", "given", " ", 
        RowBox[{"n", "."}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"NewNEstimate", "=", 
       RowBox[{"n", "-", 
        RowBox[{"(", 
         RowBox[{"NEstimate", "-", "n"}], ")"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Loop", " ", "cycling", " ", "detection"}], "*)"}], "\t", 
      "\[IndentingNewLine]", 
      RowBox[{"NoCycling", "=", "True"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Storage", " ", "for", " ", "the", " ", "values", " ", "of", " ", 
         RowBox[{"PrimePi", "[", 
          RowBox[{"PrimeApprox", "[", "x", "]"}], "]"}]}], ",", 
        RowBox[{
        "also", " ", "used", " ", "in", " ", "loop", " ", "cycling", " ", 
         RowBox[{"detection", ".", " ", "Set"}], " ", "the", " ", "initial", 
         " ", "value", " ", 
         RowBox[{"now", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"PrimePiCandidateArray", "=", 
       RowBox[{"{", 
        RowBox[{"PrimePi", "[", 
         RowBox[{"PrimeApprox", "[", "x", "]"}], "]"}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\t", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Iteratively", " ", "zero", " ", "in", " ", "on", " ", "a", " ", 
        "value", " ", "of", " ", 
        RowBox[{"PrimePi", "[", 
         RowBox[{"PrimeApprox", "[", "x", "]"}], "]"}], "that", " ", "is", 
        " ", "close", " ", "to", " ", 
        RowBox[{"n", "."}]}], "*)"}], "\t", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"PrimePi", "[", 
           RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}], "]"}], 
          "\[NotEqual]", "n"}], "&&", "NoCycling"}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "Bring", " ", "the", " ", "new", " ", "estimate", " ", "closer", 
           " ", "to", " ", "the", " ", "value", " ", "for", " ", "which", " ", 
           RowBox[{"PrimePi", "[", 
            RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}], "]"}]}], "=", 
          " ", 
          RowBox[{"n", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"NewNEstimate", "=", 
          RowBox[{"NewNEstimate", "-", 
           RowBox[{"(", 
            RowBox[{"NEstimate", "-", "n"}], ")"}]}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
          "Compute", " ", "new", " ", "prime", " ", "and", " ", "n", " ", 
           "estimates", " ", "from", " ", "NewNEstimate"}], "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"PrimeEstimate", "=", 
          RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"NEstimate", "=", 
          RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Cycle", " ", 
            RowBox[{"detection", ".", " ", "Since"}], " ", "this", " ", "is", 
            " ", "a", " ", "while", " ", "loop"}], ",", " ", 
           RowBox[{
           "the", " ", "chance", " ", "that", " ", "we", " ", "might", " ", 
            "get", " ", "stuck", " ", "in", " ", "a", " ", "situation", " ", 
            "where", " ", "NEstimate", " ", "never", " ", "settles", " ", 
            "to", " ", "one", " ", "value", " ", "is", " ", "very", " ", 
            RowBox[{"real", ".", " ", "It"}], " ", "will", " ", "however", 
            " ", "jump", " ", "back", " ", "and", " ", "forth", " ", "within",
             " ", "some", " ", "closed", " ", "set", " ", "of", " ", 
            "values"}], ",", " ", 
           RowBox[{
           "and", " ", "so", " ", "we", " ", "stored", " ", "the", " ", 
            "computed", " ", "values", " ", "and", " ", "if", " ", "we", " ", 
            "end", " ", "up", " ", "computing", " ", "one", " ", "we", " ", 
            "have", " ", "already", " ", "seen"}], ",", " ", 
           RowBox[{"we", " ", "terminate", " ", "the", " ", 
            RowBox[{"loop", ".", " ", "We"}], " ", "use", " ", "a", " ", 
            "repeat", " ", "value", " ", "greater", " ", "than", " ", "n", 
            " ", "to", " ", "guarantee", " ", "the", " ", "prime", " ", 
            "estimate", " ", "used", " ", "in", " ", "the", " ", "next", " ", 
            "step", " ", "will", " ", "be", " ", "larger", " ", "than", " ", 
            SubscriptBox["P", "n"]}], ",", " ", 
           RowBox[{
           "so", " ", "that", " ", "decrementing", " ", "is", " ", "a", " ", 
            "valid", " ", 
            RowBox[{"strategy", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"NEstimate", "\[Element]", "PrimePiCandidateArray"}], "&&", 
            RowBox[{"NEstimate", "<", "n"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"NoCycling", "=", "False"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "Add", " ", "the", " ", "NEstimate", " ", "to", " ", "the", " ", 
            "candidate", " ", "array"}], ",", " ", 
           RowBox[{
           "so", " ", "that", " ", "future", " ", "iterations", " ", "can", 
            " ", "be", " ", "compared", " ", "against", " ", 
            RowBox[{"it", ".", " ", "Add"}], " ", "it", " ", "to", " ", "the",
             " ", "front", " ", "of", " ", "the", " ", "array"}], ",", " ", 
           RowBox[{
           "under", " ", "the", " ", "assumption", " ", "MemberQ", " ", 
            "starts", " ", "theres"}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"PrimePiCandidateArray", "=", 
          RowBox[{"Prepend", "[", 
           RowBox[{"PrimePiCandidateArray", ",", "NEstimate"}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"And", " ", "then", " ", "fine"}], "-", 
        RowBox[{"tune", " ", "the", " ", "result", " ", "to", " ", "get", " ", 
         SubscriptBox["P", "n"]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"It", "'"}], "s", " ", "possible", " ", "that", " ", 
        "PrimeEstimate", " ", "is", " ", 
        RowBox[{"even", ".", " ", "Fix"}], " ", 
        RowBox[{"that", "."}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"EvenQ", "[", "PrimeEstimate", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"PrimeEstimate", "=", 
         RowBox[{"PrimeEstimate", "-", "1"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Decrement", " ", "PrimeEstimate", " ", "by", " ", "2", " ", "until", 
         " ", "the", " ", "next", " ", "lower", " ", "odd", " ", "number", 
         " ", "gives", " ", "a", " ", "value", " ", "of", " ", "PrimePi"}], 
        " ", "<", " ", "n"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"PrimePi", "[", 
          RowBox[{"PrimeEstimate", "-", "2"}], "]"}], "\[GreaterEqual]", 
         "n"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"PrimeEstimate", "=", 
          RowBox[{"PrimeEstimate", "-", "2"}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"Return", " ", "the", " ", "value", " ", "of", " ", 
        SubscriptBox["P", "n"]}], "*)"}], "\[IndentingNewLine]", 
      "PrimeEstimate"}], "\[IndentingNewLine]", ")"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{
  3.662659966307986*^9, {3.6626611057641587`*^9, 3.662661314338089*^9}, {
   3.6626613781787405`*^9, 3.6626617119108286`*^9}, {3.6626617530811834`*^9, 
   3.6626625197550344`*^9}, {3.662662778345825*^9, 3.662662860000496*^9}, {
   3.6626628978166585`*^9, 3.662663123365559*^9}, {3.662663164254898*^9, 
   3.6626632457515593`*^9}, {3.662663369639645*^9, 3.6626635717012024`*^9}, {
   3.662663663636461*^9, 3.662663855954461*^9}, {3.662663893507609*^9, 
   3.662663925850459*^9}, {3.6626640962732067`*^9, 3.6626642936074934`*^9}}],

Cell["\<\
Next is the operation function. Feel free to play around with it and compare \
with Prime[]!\
\>", "Text",
 CellChangeTimes->{{3.6626643344578295`*^9, 3.6626643714119434`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Operational Function", "Subsection",
 CellChangeTimes->{{3.662659947130889*^9, 3.6626599521301746`*^9}, {
   3.66266184148524*^9, 3.6626618429973264`*^9}, 3.662663029733204*^9, 
   3.662663089269609*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NewPrime", "[", "n_", "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
       RowBox[{"PrimeApprox", "[", "x_", "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{"IntegerPart", "[", 
         RowBox[{"x", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Log", "[", "x", "]"}], "+", 
            RowBox[{"Log", "[", 
             RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "1", "+", 
            FractionBox[
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Log", "[", 
                RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "2"}], ")"}], 
             RowBox[{"Log", "[", "x", "]"}]], "-", 
            FractionBox[
             RowBox[{"(", 
              RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"Log", "[", 
                  RowBox[{"Log", "[", "x", "]"}], "]"}], ")"}], "2"], "-", 
               RowBox[{"6", 
                RowBox[{"Log", "[", 
                 RowBox[{"Log", "[", "x", "]"}], "]"}]}], "+", "11"}], ")"}], 
             RowBox[{"2", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"Log", "[", "x", "]"}], ")"}], "2"]}]]}], ")"}]}], 
         "]"}], "\[IndentingNewLine]", ")"}]}], ";"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "Use", " ", "a", " ", "reasonably", " ", "accurate", " ", "prime", " ", 
      RowBox[{"approximator", ".", " ", "Compile"}], " ", "to", " ", "speed", 
      " ", "up", " ", 
      RowBox[{"computaton", "."}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PrimeApprox", "=", 
      RowBox[{"Compile", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", 
        RowBox[{"(", 
         RowBox[{"IntegerPart", "[", 
          RowBox[{"x", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Log", "[", "x", "]"}], "+", 
             RowBox[{"Log", "[", 
              RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "1", "+", 
             FractionBox[
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Log", "[", 
                 RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "2"}], ")"}], 
              RowBox[{"Log", "[", "x", "]"}]], "-", 
             FractionBox[
              RowBox[{"(", 
               RowBox[{
                SuperscriptBox[
                 RowBox[{"(", 
                  RowBox[{"Log", "[", 
                   RowBox[{"Log", "[", "x", "]"}], "]"}], ")"}], "2"], "-", 
                RowBox[{"6", 
                 RowBox[{"Log", "[", 
                  RowBox[{"Log", "[", "x", "]"}], "]"}]}], "+", "11"}], ")"}], 
              RowBox[{"2", 
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"Log", "[", "x", "]"}], ")"}], "2"]}]]}], ")"}]}], 
          "]"}], ")"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", "Init", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"PrimeEstimate", "=", 
      RowBox[{"PrimeApprox", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"NEstimateTest", "=", 
      RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], ";", 
     RowBox[{"NewNEstimate", "=", 
      RowBox[{"n", "-", 
       RowBox[{"(", 
        RowBox[{"NEstimateTest", "-", "n"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"NoCycleDetected", "=", "True"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NEstimateTestArray", "=", 
      RowBox[{"{", "NEstimateTest", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Coarse", " ", "grain", " ", "estimation"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"NEstimateTest", "\[NotEqual]", "n"}], "&&", 
        "NoCycleDetected"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "This", " ", "if", " ", "is", " ", "here", " ", "to", " ", "narrow", 
         " ", "down", " ", "the", " ", "estimation", " ", "of", " ", "N", " ",
          "for", " ", "the", " ", "really", " ", "huge", " ", "prime", " ", 
         "numbers", " ", "before", " ", "any", " ", "potential", " ", 
         "cycling", " ", "sets", " ", 
         RowBox[{"in", "."}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Abs", "[", 
             FractionBox[
              RowBox[{"NEstimateTest", "-", "n"}], "n"], "]"}], ">", 
            SuperscriptBox["10", 
             RowBox[{"-", "12"}]]}], "||", 
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{"NEstimateTest", "-", "n"}], "]"}], ">", "5"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"NewNEstimate", "=", 
            RowBox[{"NewNEstimate", "-", 
             RowBox[{"(", 
              RowBox[{"NEstimateTest", "-", "n"}], ")"}]}]}], ";"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"NewNEstimate", "=", 
            RowBox[{"NewNEstimate", "-", 
             FractionBox[
              RowBox[{"(", 
               RowBox[{"NEstimateTest", "-", "n"}], ")"}], "10"]}]}], ";"}]}],
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"PrimeEstimate", "=", 
         RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"NEstimateTest", "=", 
         RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Cycling", " ", "prevention"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"NEstimateTestArray", ",", "NEstimateTest"}], "]"}], 
            RowBox[{"(*", 
             RowBox[{"||", 
              RowBox[{"(", 
               RowBox[{"0", "<", 
                RowBox[{"NEstimateTest", "-", "n"}], "<", "5"}], ")"}]}], 
             "*)"}], ")"}], "&&", 
           RowBox[{"NEstimateTest", ">", "n"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"NoCycleDetected", "=", "False"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"NEstimateTestArray", "=", 
         RowBox[{"Prepend", "[", 
          RowBox[{"NEstimateTestArray", ",", "NEstimateTest"}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Fine", "-", "tuning"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"EvenQ", "[", "PrimeEstimate", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"PrimeEstimate", "=", 
         RowBox[{"PrimeEstimate", "-", "1"}]}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PrimePi", "[", 
         RowBox[{"PrimeEstimate", "-", "2"}], "]"}], "\[GreaterEqual]", "n"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"PrimeEstimate", "=", 
         RowBox[{"PrimeEstimate", "-", "2"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "PrimeEstimate"}], "\[IndentingNewLine]", ")"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.662659968852131*^9, 3.6626599716912937`*^9}, {
   3.662661725152586*^9, 3.6626617434156303`*^9}, 3.6626620810379415`*^9, {
   3.662664439798855*^9, 3.6626646334199295`*^9}, {3.6626654225790663`*^9, 
   3.6626654577900805`*^9}, {3.662666050010954*^9, 3.662666123937182*^9}, {
   3.6626662221558*^9, 3.662666228138142*^9}, {3.662666395785731*^9, 
   3.6626663980558605`*^9}, {3.6626668298555584`*^9, 
   3.6626668532378955`*^9}, {3.6626672072901464`*^9, 
   3.6626672163606653`*^9}, {3.6626675604393454`*^9, 3.6626676330875006`*^9}, 
   3.662667704078561*^9, {3.662668582123782*^9, 3.662668622810109*^9}, {
   3.6626687568257747`*^9, 3.6626687569997845`*^9}, {3.6626689302226925`*^9, 
   3.662668939053198*^9}, {3.6626857604334106`*^9, 3.6626857613684645`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Function Brainstorming and Testing", "Subsection",
 CellChangeTimes->{{3.6626598701634865`*^9, 3.662659902555339*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Exp", "[", "727.95133", "]"}]], "Input",
 CellChangeTimes->{{3.6625515244694695`*^9, 3.662551535334091*^9}}],

Cell[BoxData["1.3971586154525146260654420816786867970485525452`13.\
092487426343654*^316"], "Output",
 CellChangeTimes->{3.662551536070133*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PrimePi", "[", "x", "]"}], ",", 
     RowBox[{"LogIntegral", "[", "x", "]"}], ",", 
     RowBox[{"RiemannR", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1.5", ",", "100"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6625214921520987`*^9, 3.662521492824137*^9}, {
  3.6625215425609818`*^9, 3.662521551895516*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
aytg8xMnR6em4P8ADIl57Q==
     "]]}, 
   {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVkHk41AkAhicRoVA5GhpHknuMjGvM/L5KtK4c4VdrV9SMQqKH1CMKu7Fh
0modm9hdhaJLSctaSQmPXVvjiERyJDRilmFyrP3jfb5/3+/VDT7hzZWiUCjc
Ff5fhmm+phRljgjpelbjIvWEuM5lOtfFzRHTS5P0YK9mQqPw75NnxXMEoSye
2E59SVA2rGqZFc4TjG9ubY6O7Cb+EXNPj7/9QkSHmb4KMxsiHBnLRaUHFgjJ
RbFc6dAw8Tg0t43bsUBcfPvT9AL/A1H4tsXgXesica99tPLKkzEiooHe0V6z
TIwwzEwU/T4TkQlHKM2aFFxvKHv/XG6KMNZkZJccoEDIbpOprJoiCva31B/p
oODCnXL3NQoi4sKLBY3+1lWIzLzjQ6bPEL63g14IalajzTbF3l9dQqx3Mf+m
Yn41XPMpD04XSoimEcl0po00LGWOBf6z7QvhoHOF5vFAGlXNw0NcswVCP6sx
pumWDCbG60RtRkuE6LSJfm2eLBbrrHRZUxRcdpw5XxyrgKd//XlZa680TgV4
k79XK4Aaqi92SpBGQPRdeuuiAhJKbh+UeygNg+vH+qaSFVFho2d6kCaD6tV9
LHbmOujtHPSJE8rg/dPGWUGpErbfCPKMT5BFno7bI8onFWz2W6/x8Kg8xgq2
mJrT1ACN3DzBL0ro9mwvTmCrYUBncfHwcyU0SaXptgWo4cme2PDOj0q4wZtT
i7yqhgimJISxWRmHzAWrKjTU8dFibY5KkDI6a1O7mBs1ENNfmOUoVEZDryiJ
LUeFuy694/iyCvKpLd1u01uwMJ8l+0lqEzbeD6vKaNODilCVn31NHWmyEqrd
vAH0Z15eY5hoIm1LRmDjG2NMaJT2HAANnJHttTkqdJRODMsXP9BBxEW7lHd5
DFTODX5faaqHxMQgHV7KDlj20U/dTtgKode6xowCJhZdpzQr3ulDO4kVYPCj
DYqVBNoOugZwGt45MRZnh1nlEhrPZzsadVtTvS6xEBmbZH0rxxDyf75WNTrH
Bm/AcV9RnRFKdxy7+1sugYig4FBFiTFowqO6+u3AyIGh8j5DU7ic/PYwvWUn
HnfVl/A5Ztg6+FOZQscuaG/tDZILMUdf8vpwnb93Y83FnyX3Y+lwUmm2XNPr
iCMHFStS3S1g9PjE7KrhPWg4eTOrtMcCQr6/pXWvE2ZblfKrAxg45J0YzRp1
xq+KM7e2jjLwcM+E+Zn3exH13Ll14Kglkr13j7R2fYWdCzknXg9bYsm1t2hq
wAUCvlmCevgOBMQ86vboccXNq7bNlqM7wEt7pRr/wQ1q2oqt545bYby6x6N+
0h0hPaEezEkreFP1KZwRD0TNXHFnhjDB492tSpvahygLmWzvUSbMp2pFqTGe
yM7WipgMtMYHFlW+a9ITcU/y7gS2W2P2bE5RRrQXkoNm57u8bDDryzxz6LMX
JpzVr9AabeC27d+XV095o1LwZs5/ty2y0gU8kcgbM6Za5SlVtsilGEk6Inzw
wso09JmhHUShhcq6//pg2o9K7//NDsRx68Opkfth8fUPF8w22eM9V2hLivfj
D8bVRCe+PXaFaa17EOcLs5/TW87IsJAlF7bFWOwLgbiRqh7Ngn1+z7218X54
SVPTDRtn4dWL0PMyEj8E500EOx50gCElyiM92h8L4W6XIxod0G6eWxg37w/r
Ts8iBxZ7pUu/aUoMia/y+I41JWy8rpFXvh9L4pdF7o2Cm2wgiSnqOUMiwmRs
IbGMjfVKab+bJ5DIKFy8tPcuG+WG1k6dF0iELEc5dTxiY/Tr9MBtuSSKT+TO
TDxn49BT2x8bqkn4bFjHVR1ioyn1cMynP0j4tjdcEw+zQd/HJ9XrSIzVu/3V
/YGNpTeDtLAGEto13coF42zkz/DLNrSSyPSlGBuIVvwMh58FvSXx+fX5G1ZS
HGBSqTStn0Tz0qCrmjQHJZX2aZUDJLoKTT6KZTg4tSvTa+0IiY994XI1aznY
FMDquydc+avS1Q0VDs7q8ep7PpP4VhBvo7eRg8HRzOvSIhLlOhvSV6tyUBEz
EkqKV/zfyVIbNTjY7KDikTRPojYrzKeEysF5KQdG+RcS5/bXJ6dqcTDaxNvU
uUji+13yZcdoHOy7dFm8vEziu3jnZhcdDv4Dywzhuw==
     "]]}, 
   {RGBColor[0.560181, 0.691569, 0.194885], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwVkHk81HkAhgebRReFdY2biB2GBj+q30uOFCMy+SqtK1PMRizFB7laFBLa
RSaduylZpGPTjSRru+hwpLAmG5EcM7qs/eP5vP8+76MXEuUTJs1gMDzn+H/Z
5kJNaYaEdipQYg/mTtKnwzhutxIldK8ie4fqw0la7diDmCSxhJYoaFcMKE7R
jCVSrdOjM7TjNlmtrUVT9CNxWPzwy0/0B+kmTaXD03Rko8XTjmuztBXj5xhe
poTmVQXfa78mgy+M8Nht1Ge6wHkq9fc981EtVpeJyZbC23KmOUtbFZ7THnUu
5nIQarR2enxgIlP1chWnbSGW1gqu5D3UR+njd169iUrI+fajBjVjDJ3arEbK
WBk5zLzA5u7l2KH9/nPkflWsFi27UaxkAcOU9vBseXVEHqCyXpey4bN3n7+/
QBNpacG6/Cxr3K8U3dH5lYlR74XNeeUcbL0QW5PQrwOddIcA40JbJHD0HkZ8
1YXroOPI20QKmouk/26U0kezXlu2d74DhtXSQkpVDaBw84WKacoqmHRyLeRV
DFFhHV59soRGaLHW9llDI2iP7tAz7AD+cHfLjTQ3xrqYH0ItWh1xW32EydZZ
BoOBXyrnP3VCd6tXwwEDE/RmLPpR98EaLBEa7pIsNYWr0n0r2R5nkEGG7GuV
5TD9M2paatAF95zkTMoUzTB60M/KpscVJUaxJVESMwT5pMU6DLlBYWCd05lx
c1x0GWEl9K9FwJasyugX3yPDZ42o7bk7SHyj9LyrLHxd33NqvG8dvJapxfSc
s0BA3OVObtd62M9WcRNcLMHPeaKS/MYD3OIFUso3LTFc38W9M+YJdlvT5yrr
ua4ahozVIi5kmluSqo+zwedXX8kZ90LHRtkPLFUrsMZvTGTHbcCX+nJVKsMK
bxw0FJ6PbUC7qMZt/zsrTCcVn8qL9Yazw4YhlyBrTPM4CUHvvVG3wrK6odUa
HkaTj8t2+0DSms4rW7UCRbnt/IkJHwz7F+7zqliBEobpx6eRGxF2Qa47SpGD
iYhjinqTG5H5sjSgO5UDeqdNaPYuX8Tz8609/+WgP2zUjoh9sbmpTfOTvw2c
BFoL6xJ5aJJ/NqTVYoMiOQFzuZgHFY21FQKWLeyFXTXyyZtg2Hm4UCS0xZN7
EanzPm7C/nNq7Sdk7GDCiObmxvoBF4v6xNvt0MEqOZY44wehrbWBoMMO0VOv
zLPiCDKSbdRWUxReXFNQrN1DcLxid/KsPQWkcya6EghC3S93315JYdHinKus
vQRjBrYZa0DhvImN67NMAuZ13t61bhSGtuQGGpUQHH1z1cibRyGowa6wsZ5A
qFS7ems0hZbs0Lh31wkmZgV3mT9RsPA6SL67RVDTQbv0xlL42j2gLWgkuOTL
sQyMpyCcOli5pI1gwdGddUEpc34mg03BLwn8HBqiQvLm/MYWV+S8IjALDM/W
z6dw5pJ9zqU+Apt/OEf6D1HY7XTIW15E4GzmdDbkMAXlAIfemlGCv3xXxYWU
UUjS59/pek9AzIz89I9SGBg6dPqbCYL4Ajur/nIKF+JEEURMUK872B58koL6
SiVu+gxBSXvKEb3TFFKlV7LPfyJIM3Xf3Pfb3P8WvvKzLwQjIselJ85Q8Mov
EM/OEtg+irgbdJbCfwOxH5U=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{1.5, 100}, {0., 30.126141147569356`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6625213728412747`*^9, 3.6625214070422306`*^9}, 
   3.662521493781192*^9, 3.6625215532225924`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiscretePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Prime", "[", "n", "]"}], ",", 
     RowBox[{"n", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Log", "[", "n", "]"}], "+", 
        RowBox[{"Log", "[", 
         RowBox[{"Log", "[", "n", "]"}], "]"}], "-", "1"}], ")"}]}], ",", 
     RowBox[{"n", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Log", "[", "n", "]"}], "+", 
        RowBox[{"Log", "[", 
         RowBox[{"Log", "[", "n", "]"}], "]"}], "-", "1", "+", 
        FractionBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Log", "[", 
            RowBox[{"Log", "[", "n", "]"}], "]"}], "-", "2"}], ")"}], 
         RowBox[{"Log", "[", "n", "]"}]], "-", 
        FractionBox[
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"Log", "[", 
              RowBox[{"Log", "[", "n", "]"}], "]"}], ")"}], "2"], "-", 
           RowBox[{"6", 
            RowBox[{"Log", "[", 
             RowBox[{"Log", "[", "n", "]"}], "]"}]}], "+", "11"}], ")"}], 
         RowBox[{"2", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"Log", "[", "n", "]"}], ")"}], "2"]}]]}], ")"}]}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "100000", ",", "110000"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Blue", ",", "Black", ",", "Red"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6625215550336957`*^9, 3.6625216407285967`*^9}, {
   3.6625217491677995`*^9, 3.662521750214859*^9}, 3.662521947341134*^9, {
   3.6625223510912275`*^9, 3.6625223890023956`*^9}, {3.6625225494015703`*^9, 
   3.6625225495685797`*^9}, {3.6625526484617586`*^9, 
   3.6625527218309546`*^9}, {3.6625529314779463`*^9, 
   3.6625530254753227`*^9}, {3.662559353360845*^9, 3.6625594179835415`*^9}, {
   3.6625594583518505`*^9, 3.6625595386304417`*^9}, {3.662559774085909*^9, 
   3.6625598272689514`*^9}}],

Cell[BoxData[
 GraphicsBox[{{
    {RGBColor[0, 0, 1], PointSize[0.002777777777777778], AbsoluteThickness[
     1.6], 
     {RGBColor[0, 0, 1], PointSize[0.002777777777777778], AbsoluteThickness[
      1.6], Opacity[0.2], PolygonBox[CompressedData["
1:eJw01n/8DXkc0PuRJElGkiQ5kiTJSJIkI0mSjCRJMpI2SUaSJDmSJMlokyQZ
SZJkpE2SjOu6rrvXdVxJkhxJ2rQ5m6Rt0/bj+/zsP9/H8z+vOZ/3+73jfteW
37zhJ0RR9PN+UxT9r7//+7/f91/S//Xn8z+ZPu9//Y150JM+t3gsJzydU17K
Ga/nnDdywZu5zdu45J1c8V6u+TA3fIo7fI67fJl7fIOjTX1+wDE/DP38JvTz
d6GfB/9T/TyCc57BBc/mNs/lkpdzxRu55r3c8BHu8Gnu8hnu8TmOfn+fL3LM
l7jFVznh65zyk9DPr0I/vw39POSpfh7DJc/miudxzYu44eXc4RXc5bXc480c
bfb+OOYj3OLznPBdTvkeZ/yIc37NBX8T+vl96OdPoZ8/h34e+M/08wju8Fju
8iLu8WqO/kCf13DMX3CLt3PCeznl/ZzxCc75NBd8k9t8n0t+wxW/5Zo/hX4e
+kw/j+Muj+ceT+FoS5+XcMxruMUbOOGNnPImzvgi53ydC77Fbb7DJb/mit9y
zR+44QH/XD8P5y6P4h6P4ajwXjjmSdzieZzwCk55FWe8iXPewwXv4zaf5JJP
ccVXueavuOHXoZ/fhH7+LvTzp9C/tc8/hH7u91w/D+KER3HK4zjjaZzzYi54
Pbd5I5d8iCs+zDUf5YbPcYcvc5dvco8fcPQH+/yYY34e+vll6OfvQz/3/xf6
eSTnPIYLHs9tnsglT+WKZ3HNS7jhldzh9dzlrdzj7Rxt8/045pvc4ruc8ENO
+Wno534v9PNwLngOt3k+l7yKK17NNa/jhr/gDu/gLu/hHu/n6A+5dxzzGW7x
BU74Kqf8FWd8N/TzvdDP/f6lfu7PJQ/hikdzzVO44bnc4dXc5Y3c450cbe/z
AY75S27xKU74LKd8jjO+xjnf5oIfhH5+HPr5Wejnl6Gfvw39/Dn084CX+nkQ
93gER3/YvueYZ3OLF3PCSzjlDZzxRs55Cxe8g9u8m0u+yBVf4ZpvcsPPucMv
Qj+P7+rnyRztsK855qXc4lWc8A5O+RBnfJRzPskFn+E2X+KSH3HFj7nmN9xw
/1f6eTh3eTL3eCZHf8R+5ZhXcIu3c8J7OOUDnPFRzvkEF3yB2/yQS37FFb/h
mj9xw59DPw/+V/p5BPd4DEc73W+OeTq3eBYnvIBTXsIZL+OcV3HB67nNW7jk
XVzxPq75GDd8mjt8KfTz1dDP10L/H+3z/dDPX4d+fhH6+X3o5w+hn/u91s+D
ueBR3OaxXPJ4rng+17yVG97GHd7JXd7HPT7C0S77nWO+xC2+zgnf5ZS/5owf
h35+Efr5u9DPH0M/9/vX+nko1zyCG57IHZ7CXZ7DPV7G0R/z/Tjm7dziw5zw
cU75NGd8g3O+yQXf4za/45K/Df38XejnH0M/D32jn0dyl6dzj2dztLvPcznm
edzihZzwWk55C2e8i3PezQWf4Daf5JIvcsVXueY73PCL0M+vQj8P/Df6eRhH
f9w8csxTucXTOOF5nPJ8zngR5/wFF7yD23yESz7KFZ/ims9yw+e5w5e5y1dD
P18P/XvMb+jnR6Gf34V+/hj6ud9b/TyBc57OBS/gNq/mktdzxae45mvc8D3u
8GPu8nPu8UuO2n1+yzEP+Lf6eSgnPJJTHs0Zj+Ocp3PBy7nNa7jkLVzxPq75
IDd8jjt8hbv8kHv8mqO9fr9v9PMAbvEoTng8pzyTM57DOa/mgtdxm3dzyQe5
4mNc83Fu+CR3+Cp3+Svu8VOO/kSf34R+HvTv9PM4TngapzyHM57LOS/mgpdx
mw9zyUe54tNc81lu+Bx3+B53+T73+AlH+8wHxzz6nX4ewwlP5JSncsazOOfl
XPBKbvNGLvk8V3yJa77GDd/kDj/lLr/mHn/L0Z/s8weO+WPo5+9DP/8Y+nng
v9fPEzjnyVzwDG7zbC55KVe8mmvewA1v5g5v5S4f4h4f4Wi/+eKY73KLv+aE
X3LKQ77Vz6M45wlc8HRu81wueTVX/AXXvJEb3sYdPspdPs49vsjRn7IvOeY7
3OInnPBbTvlD6OdPoZ8H/Qf9PILbPJpLnsIVT+WaZ3HDC7jDG7jLW7jHuzk6
0Oe9HPM+bvGXnPBJTvkMZ3yFc74f+vl16Oe3oZ/fh37+MfTzgPf6eQh3eDh3
eST3eDJHf9r+5pgXcouXcsLLOeXNnPE2znknF7yP23yMSz7OFV/iml+Efn4T
+vmb0M+Devp5AkcH7XOOeTK3eD4nvIBTXsMZb+ac93DB+7nNB7jkE1zxba75
Djf8gDv8kLv8KvTzm9D/Z+z30M+DvtPPgznhEZzyOM54Bue8jAtew21ezyVv
54ovcs1XuOFr3OGb3OW73OP7HB2y3znmh6Gfn4R+fhH6+XXo5w+hn4f9R/08
its8lUuewxUv4ppXcMO7ucNHucvnuceXOPqzfb7MMT/mFj/jhPt90M+jOOOJ
nPMULngat3kBl7yMK17JNa/mhjdyh7dxl/dwj7/k6HCfz3HM97jF7zjh70I/
fx/6uf9/0s8jueBJ3OYpXPIMrngZ17ycG17DHd7IXd7BPd7F0Z9zvzjmS9zi
65zwU075I2c84KN+Hs4Fj+Q2T+WSl3DFq7jmTdzwNu7wbu7yfu7xUY6O6OWY
b3CLn3HC33DKnznjIf9ZP4/lgsdxm+dwySu54j1c8yFu+DB3+AR3+Sz3+CJH
pf3JMd/mFj/khF9yyh8448+hnwd80s+TuM3TueTFXPEyrnk5N7yRO7yJu7yV
e7yPo6PuL8d8mFv8JSd8jlM+zxlf4pyvhX6+Ffr5Tujnu6Gf34Z+/ib08/D/
op/Hc5cncI+ncvTn+zybY57HLV7BCW/glPdxxqc45wtc8C1u810u+TFX/JRr
fs0Nvw/9/DH086fQz0O/1/+le8Qxr+AWb+GE93LKhzjjo5zzcS74HLf5Mpd8
kyu+wzXf44bvc4ffcZe/5x5/Dv1/wT7+r/p5NLd4PCc8g1Oexxmv55w3ccF7
uc3HuOQTXPFJrvkcN3yeO3ydu/yEe/yao2N9/jb088gf9PMcTngRp7yaM97M
Oe/ggvdxm49xyce54jNc8y1u+B53+AV3+Rvu8Q8c/cU+9/9v+nkIt3gEJzya
U57MGU/nnGdxwXO4zYu45HVc8UaueQs3vI07vJO7vJ97fICj495b6OevQj/f
CP38OPTzq9DPb0M/fwj9/Dn086DP+nkwVzyVa17GDa/kDq/iLm/gHm/h6C/1
eTfHvI9bfIATPswpn+OMz3POF7ng69zmW6Gf74R+fh76+dvQz/3+u34exV2e
zD2ewdEJ75FjXsgtXsEJf8Ep7+CMd3LOx7ngk9zmM1zyWa74Etd8mRv+KvTz
rdDPj0I/vwz9f9n8/6ifB3GLR3HCUzjluZzxIs55BRe8jdu8h0s+wBV/yTWf
5YbPcYcvcJdvc48fcHSyz89CP78J/fxj6Of+0S/r6+cRnPFEznk2F7yA27yE
S17GFa/kmldxw/u4wxe5y1e5x19z9Ff6/JBj/sAtHtyvzwkP45RHcsajOOcZ
XPBMbvN8LnkhV7yEa17NDe/kDu/hLu/nHh/n//k/qv/bJznm89ziu6GfH4R+
/i7086fQz59DPw/8Cfp5EJc8nCsezTWP5YZncocXcJcXc4+XcvRX+7yZY97J
LT7ACR/llI9zxhc558tc8I3Qz/dDPz8L/fxd6OfvQz8P6K+fh3KXR3CPx3N0
2nxyzPO4xQs54VWc8hbOeC/nvI8LPsBtPskl3+eKv+aan3DD34R+/hj6ecBP
1M8jOarMK8c8hls8gxOeySmv4Iy/4Jw3c8Fbuc0nueRTXPElrvkqN/ySO/ya
u/wp9HO/AfrPmDeOeTS3eCknvIZT3s8ZH+KcT3DBF7jNV7jka1zxDa75Jjf8
mDv8hrv8Lfd4xE/S/9fcc455Krd4Lie8mFNeyRmv5Zy3c8G7uM0HuOSDXPFh
rvkkN/w1d/gpd7nfQP08gKOz7hvHPJZbPJ4TnsopT+OMZ3LO87nghdzmVVzy
aq54N9d8lBs+yR0+xV0+E/r5Quj/631+Efr5dejnfj9ZPw/ilEdwxlM455lc
8CJu81IueQVXvJ5r3sgNb+YO7+Qu7+IeH+LonPnkmM9yiy+Efr4W+vlO6Od7
oZ+HDdLP47jNU7jk2VzxXK55Oze8lzt8kLv8JffCv5ejv+GecMxPucVDfop+
HsYpj+WMJ3DO07jg2dzmJVzyUq54Ode8mhv+gjt8hLt8lnt8nqPzfl+O+RK3
+Ebo57GD9fM4zngy5zyHC17BbV7JJa/hitdxzdu44Z3c4cPc5bPc43Mc/U19
HPMdbvFjTvhV6Od3oZ8H/FT9PIILHs9tnsolT+eK53HNC7nhVdzh9dzlTdzj
HRxdMC8c8xlu8TlO+DynfIczfhj6+Xno51ehn9+Gfv4h9POMIfp5Djc8jzu8
lLu8gnu8lqO/1ecNHPNWbvE2Tngnp7yPMz7COR/ngi9wm69zybe44sehn9+F
fv4c+nnIT9PPM7nHszi66D5zzIu4xRs54b2c8n7O+EvO+TQXfJnbfJtLvscV
P+GaX3LD77jD/Yfq50Hc48Ec/e0+j+aYJ3GLZ3DC6znlLZzxVs75MBf8kNv8
iEt+zhV/zzUPiPXzQO7weO7yBO7xTI4u+f055iXc4g2c8G5O+SBn/BXnfIML
vsVt/ppLfsEVf8M19xumnwdxh4dyl5dyj1dy9He8b455C7d4Gyd8iFM+zBmf
4pxPc8EXuc1fccmPueJnXPPz0M+vQj9/G/p54k/Xz1M4utznBRzzQm7xVk54
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
17yMG17NHd7IXd7MPT7E0RTzxDGf4xZ/xQnf5JRvc8b3Oec3oZ/fhX7+MfRz
/736eSjXPJIbnsIdnspdnsU93sHRL7F/OOYj3OJjnPBJTvk8Z3yJc77LBT/h
Nj/nkl+Hfn4f+vlD6OfBf0I/D+Muj+EeT+Zoqn3FMS/iFm/lhPdwysc541Oc
81ku+AK3+Ssu+R5X/JprHrpPP4/mDs/kLs/lHi/jKDE/HPMX3OL9nPBRTvlL
zvg453yfC37AbX7IJb/lit9xzZ9CP38O/Tz1T+rnWdzjhRxN6/MSjnkZt3gl
J7yKU97LGR/gnE9ywae5zXe55Kdc8Vuu+UduePB+/TyEuzyKezyGo19q/3LM
M7jFMznhOZzyKs54Nee8gQvex23ezyUf4oovc81XueGvQj8/Dv38Xejnj6F/
un37p/TzIG7xEE54NKc8kzNewzlv5IK3cZv3csknuOJrXPMDbvghd/gZd/k5
9/gTR7+sz9+Hfv4c+nnYAf08glMeyRnP5ZwXcMHLuM1HuOQzXPFFrvkSN3yF
O3yLu3yfe/yaoxl97ven9fMAbvEQTngkpzyJM57KOa/ggldzm9dxyVu54m1c
8z5u+CR3+BR3+Sz3+DJHv9z+Cf38MvTzd6GfP4Z+/hT6+YfQz8MP6uf53OaV
XPI6rngn17yXGz7EHT7MXT7NPT7H0Uz7g2O+wy1+wAk/5pTfcMafOOehf0Y/
j+c2L+CSF3LFi7nmZdzwWu7wFu7yVu7xbo5+hXvFMd/hFt/nhF9xygMO6eeB
nPMYLngCt3kalzyDK57NNc/jhhdxh7dxl/dzj49wNMu8cMyXucVXOeEbnPKb
0M/fhH5+F/p54J/Vz2O55HFc8WSueS43vIA7vIy7vJJ7vJmjX+n7cMzHucUX
OOFrnPINzvg25/yECx58WD8P5ZJHc8VTuOZ53PBy7vAa7vIB7vFBjmbbFxzz
SW7xGU74Iqd8hTO+xjlf54Lvhn7+OvTzt6GfB/w5/TycGx7LHZ7EXZ7JPV7C
0a/q8w6O+SC3+BAnfIxTPs4Z3+KcH3DBT7nNz7jkF1xxvyP6uT83PIg7PIS7
PI17PIejOeaJY17ALV7BCW/klPdyxoc556Nc8Alu82ku+R5X/Cr085vQz9+F
fu5f6ufR3ONxHP3qPk/kmGdwi5dzwms55V2c8V7O+RgXfJLbfIlLvsoVX+Oa
r3PDd7nDD0M/fxP6ecJR/XPNC8c8g1s8hxNeyimv44y3cs57uOB93OZjXPIZ
rvgS13yDG77NHX7MXX7JPf4m9Kf275/Xz+O4xRM44Tmc8jLOeBvnvIcLPsBt
Ps4lX+aKn3DNz7jhd9zhAV/q58Hc49EczevzGI55PLd4Eic8i1NezBmv4pz3
ccEHuc2HueSTXPFprvkcN3ydO3wz9POd0M93Q/+v6fP90M+PQj+/CP38KvTz
29DPH0M/D/4L+nkIt3kMlzyPK97BNe/mhg9xh49xl89wj69zNN/74Zjfc4u/
44QHHtPPgzjjUZzzaC54Ard5Gpc8nytexDUv5oZXcofXcJfXcY93cfRrfT+O
+QS3+CYnfCf0873Qz09CP78M/fxj6OdBf1E/j+SKR3PNY7jhWdzhBdzlldzj
9RwtsK855n3c4jOc8HlO+S5n/Jxz/pYL/sBt/iH087Dj+nkU1zyWG57KHV7L
XV7HPT7J0a/r8ymOefhf0s8TOOGJnPJ0zngm57yAC17MbV7GJW/kindyzYe5
4cvc4Svc5Tvc43ccLexz/xP6eRC3eCgnPIZTnsgZz+CcZ3PBq7jNG7nkrVzx
Xq75ADd8mDt8mrt8hnt8jqNf3+eLoZ8vhX6+Hvr5Sejnt6Gf34d+/hj6efJf
1s+zueQVXPEXXPNWbng/d/gId/kC90IfR4u8H475Brf4Lid8j1N+yRm/4Zzf
ccHvQz/3P6mfp3HFs7jm+dzwAu7wIu7ySu7xZo5+Q5+3cMw7ucX7OeHDnPJx
zvgE53yWC77NbX4Y+vll6OfvQj9/Cv084q/o50nc5anc4xkcLbaPOOaV3OI1
nPBaTnkjZ7ydc97FBR/hNp/gks9zxbe45jvc8P3Qz69DP38T+vnb0P8b3ePQ
z1NP6edpnPA8TnkTZ7yNc97NBe/hNh/jkk9xxee55svc8Ffc4Rvc5Xvc4wcc
LenzI475cejnp6Gf34d+7vdX9XN/znkoFzyW2zyFS17EFS/mmpdyw8u4wyu4
y+u5x9s4+k3mnWPexS0+zAmf5pQfhH5+Hvr5Tejnd6Gfvw/9/Dn084+hn4ee
1s/jucPrucsbucfbOVra5x0c8y5u8TlO+C6n/JQzfs85f+CCh1X6eSSXPJYr
ns81L+SGN3CHv+Bu6OMe7+coM38c8ylu8RlO+CynfIkzfsY5v+CCvwn9/D70
83ehn4ec0c8juOGx3OHJ3OUp3OOZHC3r8xyOeT+3+BQnfJFTvswZX+Ocb3DB
T7jNb7nkd1zxj6GfB/01/TyYOzyUuzyMezyeo99sn3PMS7jFKznh9ZzyBs54
B+e8mws+yW0+zyVf4Yqvcs23Qj/fDf38OvTz96Gffwj9y33f0M+Dz+rnSZzw
Ik55LWe8mXM+xgUf5zZf5ZJvc8WPuOYX3PCUv66fp3GXZ3GPF3D0W/RwzIu5
xUs54fWc8hec8QHO+SgXfIrbfJpLvsAVX+Gab3LD90I/Pwn9/Cz08+fQv8K9
PqefB3GLh3HCoznlcZzxRM55Khc8m9u8gEtezhWv55r3csP7uMOHucuXuMdX
OPqtvlfo5+ehn78N/Tzgb+jngZzxSM55FBc8ids8mUuewRXP4ZrnccNLuMMr
uMtrucdbOVppH3HMZ7jF5znhr0I/Pwv9/E3o50+hnwee189DueSlXPFmrnkn
N3yAO3yYu3yKe3yBo9/W54cc8zNu8RtO+B2n/B1nPOBv6uehXPB4bvNELnku
V7yMa17PDW/hDu/lLp/gHp/maFWfz3HMl7jFNznhF5zye874Y+jn70M//xj6
eeQF/TyKKx7DNY/nhidwh2dwl2dzj+dz9Nvtf455Kbd4BSe8jlM+whlf4Jwv
c8F3uc2PQj+/DP38MfTzp9DPA/+Wfh7NXZ7GPZ7O0WrvjWOezy1exgmv4ZTX
ccZfcM6bueCd3ObjXPIJrvgt1/wdN/wp9HP/i/p5APd4NEe/w/fgmBdzi1dy
wms45Y2c8SbO+TAXfILbfJJLPs8V3+Kan3LDH7nDo/62fp7NPZ7D0Rq/N8e8
kFu8ihPewCnv5owPcs7HuOCr3ObrXPINrvgW13yXG37AHX4T+vld6Ochl/T/
TvuXY57JLZ7LCS/jlDdyxls4551c8C5u81Eu+RpX/JhrfscNf+YO9/87+nkA
93goR2v7PIxjHsMtHscJT+SUp3DGUznn2VzwPG7zKi55DVe8nmvexA0f4A4f
DP18OvTzudCfe4+hn6+Ffr4e+vl56Of3oZ8/hH7+PvTzkMv6eQaXPJsrXsg1
r+KGv+AO7+EuH+QeH+JoXZ9PccxnuMWXOOHbnPILzvgl5/yGC34f+vmH0M/9
av08mmseyw1P5g7P5C7P5x4v4+h32e8c82pu8UZOeBunfJgz/pJzPsUFn+M2
X+SSvwr9/DD08+PQz09CP78M/fw29POAK/rX93kExzyaWzyeE57CKU/ljKdz
zgu44CXc5g1c8haueAfXfIAbPsgdPsZdPsc9vhn6f3ef74R+fhr6+UXo59eh
n78N/Tz27+rnyVzwNG7zci55A1e8lWveyQ0f4g4f4S6f5R5f4mhDny9zzNe5
xV9zwo845cec8dPQzz+Efu5/VT+P5pLHccUzueb53PBS7vAK7vJ67vEXHP0e
88wx7+EWH+WET3DK5zjjC5zzFS74Wujn26Gf74V+fhL6+Xno58F/Tz+P4S7P
4h4v4OgL94VjXsItXs8Jb+KUt3DGWznnHVzwl9zmS1zyfa74a675ETf8IvTz
+9DPH0I/D/hK/+/t80COeSS3eDwnvIhT3sQZ7+GcD3LBR7nNI/6+fh7FFU/k
mqdxw1u4w9u4y9u5x4c52tjn4xzzHW7xfU74Faf8jjP+lnP+ngvuf00/j+CS
p3PFy7nmNdzwBu7wRu7yFu7xAY5+n3vBMZ/hFl/nhL/mlJ9wxs8552+44O9D
P/8Y+nn4P9DPU7nm2dzwEu7wcu7yWu7xFxxt8h455uvc4gec8CNO+Sln/JJz
/oYLfsdt7n9dPw/kisdyzXO54UXc4ZXc5dXc4/Uc/X7fg2Pezi3eywnv55QP
c8YXOecrXPA1bvP90M/PQj8/D/38MvTzm9DPH0I/fw79POwf6t9s33HMo7nF
4zjhSZzydM54Fue8mAtexm3ewCXv4ooPcM2HueEj3OGT3OWL3ONLof8P+P6h
n1+Ffh5+Qz9P5ZRncsbrOOfNXPBObvNuLvkgV3yMaz7ODd/gDt/iLj/iHj/m
aIv55ZifcYtfhH5+E/r5fejnj6GfB/0j/TyO2zyRS57MFS/lmldww6u5wxu5
y5u5x3s5Krwvjvkot/gyJ/yAU37DGX/gnL8P/Tzrpn5ewCUv5oqXcM0bueEd
3OG93OUj3OPzHG3t81WO+Wtu8UNO+BGn/Ioz/sg59/vH+v8HTXUcf8MfNnR6
JEmSkSRJRpIkGUmS5EiSJEeSfklGkiQ5Ho9HkhxJkmQkSZKRJGutY6211v7W
SJIkR5IkGUmSZCRJkva13+vz5/Xfec+578/NfbnNAzjnQVzwOO7wbC55HXd5
B1e8m2vex9FP2C+O+SQnfJZTvssNfshNfsYZ976un4dxm0dyzhO44Jnc4Xlc
8hru8gaueBPXvJmjTd5bjvkoJ3yNU77DDb7PTX7CGX8I/fwx9PP30M8jSv08
jjs8i0uez11eyhWv4prXcvST5odj3sIJb+eUj3GDL3KTb3LGt7jFD7jNjznn
F6GfX4d+HnBDP4/kLo/nimdwzbM42myeOOaFnPASTnkFN3g9N3kjZ7ydW7yL
23yYcz7CBR/jDl8O/Xw19PP10M+3Qz8/C/0/5X6Ffh72d/XzKE55LDd4Kjd5
Gmc8m1u8jdu8g3PezQUf5A4f4pKPcpfvccX3uebnHG1xvzjmz6Gfv4V+HnVT
P0/kJk/njH/gFq/jNm/knLdwwdu4wzu55P3c5QNc8SGu+TBHf7zH5zjmS5zw
j5zy/dDPz0I/vwn9/CX0c9+/p5+Hcc4TueC53OEFXPIS7vImrng717yDo63m
jWM+wgkf45SPc4PPc5OvcsY3uMV3Qz+/DP38NvTzh9DP30I/97qln0dyxRO4
5q0c/Qnfg2Pewwnv45QPcYNPc5PvccYPucWvuc1vOed3XPAX7nC/v6+fh3KX
R3HFo7nmCRxt6/FMjnkxJ/wDp7ydG3yam3yJM77KLb7Obb7JOd/hgp9xhwfc
1s+jucvjueJJXPMCjv6ke8cxb+SEd3DK+7jBB7nJhznjU9ziM9zmC5zzVS74
MXf4fejnz6Gf+/0D/TyKax7D0Xb3jGMezwkv5JRXcoNXcZO3csb7uMVHuM1n
OecrXPBD7vAHLrnPHf08nCsexTWP5uhPeW855rmc8ApOeQM3eDM3eRtnvJ1b
fJLbfJpzPsMFn+cOX+SSr4d+vhn6+UXo59ehf4d7Ffr5U+jnPv9QP/fnBg/j
Jo/gjEdyiydymxdyzj9wwcu4w1u45Avc5Wtc8S2u+TZHbe81x/yQE34W+rnX
Xf08gJs8mDMewi0eyW0ezznP44Lnc4dXcckHucsXuOLLXPNNjnaaB475Ayf8
kVP+Evp56D/SzyM44wnc4inc5sWc81IueB13eDuXvJe7fJgrPsY1X+ToT/f4
R475Jid8n1N+xA1+Gfr5fejnT6Gf+97Tz4M456Fc8HTu8GwueR53eQFXvJpr
Xs/RLu81x7yLE97NKZ/kBp/hJl/mjG9wi++Gfn4Q+vlV6Oc3oZ8/h34e8I/1
8xCueBTXPJWjP9PjaRzzEk54Gae8hhu8lZt8iDM+xy2+wG1+wjk/54L73NfP
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
3OCr3OSHoZ9fhn5+G/r5U+jnb6Gf+/0q/TyESx7OXR7JFY/hmidw9MF+ccyL
OOElnPJ6bvBObvI+zvgIt/gmt/kh5/yOC/4c+vl76Oc+E/VzP654NNc8lqP/
1ONZHPMcTng+p7yIG7ycm7yWM97GLd7FbT7JOZ/ngi9xh69yyT+Gfr4e+vlm
6Ofxqf6P/n+OeTonvJBTXswN/oGbvJIz3sQt3s5tPsA5H+aCj3OHL3DJt7nL
r7jiT1zz59D/n+1b6OfBk/TzGE55Hjd4KTd5B2e8n1t8lNt8inM+ywXf4Q7f
55KH/2r9PI4rnsw1L+Dok/+TY17OCa/jlDdygzdzk/dwxke5xce4zSc559Nc
8Hnu8EUu+Wbo57uhn5+Ffn4R+v+L+Qj93Heyfh7EKY/mBk/nJs/ljJdxi7dw
m7dyzju44OPc4ZNc8lnu8iWu+DbX/Iyjz+4Tx/w29PP70M+fQz/3+jX6eTBn
PIRbPJXbPINzns8Fr+IOr+WS13OXd3LFJ7jmyxz9V/vFMb/ihD9wyh+5wf2m
6OdBnPFwbvEIbvMUznkmFzyHO7yUS17OXV7BFW/hmvdy9MW+ccxnOOFLnPJN
bvDd0M9PQz9/Cv3c99fq55Gc8xgueBx3eAGXvJC7vJIr3sI17+Pov9knjvkM
J3yeU77LDX7CTX7FGX/lFveeqp/7cs5DuOBR3OHJXPJU7vJMrnge17yEo6/e
H455Nye8h1M+xA0+yk0+xxlf5hbfC/38MPTzu9DP/X6dfh7IJQ/nLo/gisdx
zRM5+u++J8f8Aye8mlNexw3ewE3ezBnv5Rbv5zaf5pzPcMGXQj9fD/18K/Tz
g9DPz0I/fwn933r8PfRz/2n6eTynPIUbPJWbPIsznsstXsxt/oFz3sIFb+UO
7+KSD3KXT3HFF7jmyxz9jx7f4Jjvhn5+EPr5Tejnt6Gf34d+7vfr9fNAbvMw
znkhF7yEO7yGS97JXd7DFR/nmk9x9L3HFznmK5zwI075KTf4Cze593T9PIRb
PIrbPJFznsIFT+cOL+KSl3KXV3PFW7jmbfz/HYD/3yc45pOc8I+c8i1u8B1u
8t3Qz/dDPz8K/fwy9PO70M/9f4N+HsAlD+Muj+SKR3PNYzjq1eMpHPMSTngl
p7yRG3yKm/yGM/7ELR4yQz8P55wncMFTucMzuOQ53A2/lytezzVv5uin9XgP
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
5C6v4Yp3cs37OPpj9oNjPssJX+aUr3CDb3CTn3PGH0M/fw/93O9v6OfRXPAE
7vAULnkWd3kFV7yKa17L0Qb7wDEf4oSPccpnuMEPuMkvOeM33OJ33OZPoZ+/
hH4edEI/j+GSp3OX53HFy7jmlRy1zDfHvJsTPsUp3+YGP+cmv+KMexX6uTe3
uS/nPIYLnsAdnsolz+QuL+GKl3LNyzna6HtwzGs44U2c8lZu8G5u8iHO+Gjo
54uhn6+Efr4T+vl56Od3oZ8/hn7+HPr5W+jngSf1/4T54piHc8KTOeU53OC5
3OQfOOPV3OIN3ObtnPMJLvgMd/gil3yfu/yMK37JNX8P/Zvch7+pn4dywuM4
5fHc4Enc5IWc8Rpu8UZu80HO+RgXfIo7fJ5LvsRdvssVv+eav3L0k/bvlH7u
xwkP45THcoNncpNnc8bzucULuc3LOef1XPBm7vA2Lnk3d3kPV3yKa77A0Wbz
FPr5SujnJ6GfX4V+/hL6+Xvo595/Sz/35zYP4pyHc8HTuMPTueSN3OVtXPEJ
rkMfRz9lfzjmB5zwI075Kzd40Gn9PJUznsUtnsttnsc5L+aCl3CHN3HJ27nL
17niG1zzLY62uL8cc9+/rZ8Hc8ojucETuMkLOeOV3OJN3ObNnPNWLngnd/g0
l3ybu3yHK77PNb/m6I+bX4554Bn9PIRTHsENnsxNnsUZz+UWz+c2/8A57+SC
D3OHj3LJx7jL57ji61zzC462+h4c8/vQzx9DP38P/dzn7+jnEf+TqzsM17c4
8Ls+iIgYkUFEREQGERExMjFiRMRMjIgYMRMRIyIyGBEjIoMRkVKaoZRSSmmG
UsqylGZSSinLsgybZVmWZRmWZVmWZRmWZbMspRxKKaUpZSilKaUYPf5/t1fP
9+Xnus6L5/uce2bOeZ77npGTfLKc5VPkIp8lV/lcuckXyl2+VB7yZfKUr5B3
5GvlJd8smz+g+VG28guyk9+Qvfy2HOR3t375R1u/fOD96pcPlot8vFzlk+Qm
nyF3+Xx5yBfJU75a3pGvkZd8p2yu0fwoW/ke2cn3y15+WA7yI3KUn5KT/NrW
L7+99csfbv3yIT+lfvkIucvHykP+vDzlU+Qd+VR5yV+UzR/c54tlK18qO/lG
2cvfkYP8gBzlx+QkPyln+Rm5yO/KVf7x1i8f8ID65QPlIR8pT/kYeUc+UV7y
abK5dp9Pl638ZdnJZ8tePk8O8vlylK+Sk3yTnOX75SI/JFf5dbnJb2398ttb
v/zR1i9/svXL+/+0+uWDZfOHdL3JVj5DdvLXZC+fKwf5cjnK35KTfIuc5afl
Ir8gV/kVuclvyF1+Rx7yoQ+qXz5W3pFPkJd8mmy+rfEgW/kM2clny17+uhzk
8+QoXyon+Ro5y3fKRX5QrvLDcpMfk7v8kjzkd7d++aOtXz7wZ9QvHyqbss+H
yVY+RnbyibKXT5aD/FU5yufIST5fzvLFcpGvkqt8tdzk6+Uu3yAP+XZ5yvfJ
O/IjW7/87NZ/3T6/vPXLb2398vtbv/zB1i8f9ZD65ePlJJ8kZ/lUucjnylW+
SG7yJXKXb5SHfLc85XvlHfkBecmPy+YPa72Srfyy7OQfyl5+Tw7yp1u/fEBX
v3yUnOUT5CKfLVf5PLnJ35S7fK085JvkKd8u78jflZf8Pdlcr+tFtvITspNf
kr38AznI78hRfm/rl/d7WP3ycXKRT5KrfIrc5NPkLp8pD/mr8pQvlHfki+Ul
XyabP6LxJlv5O7KT75G9fL8c5AflKH9fTvKTW7/8wtYvv7z1y+9u/fJHW798
7M+qXz5JnvK58o78dXnJl8nmhn2+WbbyrbKT75S9fK8c5EflKD8uJ/kJOcvP
ykV+T67yQd9Xv3yo3OUj5CEfJU/5BHlHPkVe8jmy+aNav2UrXyE7+SrZy7fI
Qb5NjvLtcpK/J2f5YbnIz8hVfnHrl1/Z+uVjfk798lnylM+Rd+SL5CVfLJsb
Nb/KVr5WdvINspfvloP8mBzlx+UkvyBn+S25yD+Sq7zfI+qXD5S7fJA85M/K
U/6CvCOfIS/5q7L5YxovspW/ITv5StnL18lBvlGO8t1ykh+Qs/yCXOS35Sp/
sPXLB/28+uWj5SF/Xp7yafKO/BV5yefJ5iZd77KVr5WdfJ3s5evlIH9HjvJd
cpKflLP8ilzk1+Qqvyk3+cOtXz7wUfXLR8hTPlLekb8gL/ls2fxxXQ+ylc+R
nXye7OVvy0G+QY7yzXKS75KzfL9c5AflKn9fbvJTcpef3/rlH2z98qtbv/zG
1i+/vfXfvM8/3Prl/X5B/fJBspcPk4N8uBzlY+QknyBn+SS5yKfKVf6q3OSv
yV0+Xx7yBfKUL5F35MvkJV8tmz+xz9fIVr5t65fv2Prlx7d++amtX35t65ff
3vrlD7d++Udbv/yZx9QvHy53+WR5yF+Rp/x1eUe+UF7yxbK5ZZ9vkq18i+zk
78hevlcO8oNylJ+Xk/yWnOX35CIf+Yvql4+Wm3y83OXPyUM+TZ7ymfKOfLa8
5HNl8yf1/shWvkh28qWyl6+Sg3ytHOXb5STfIWf5frnIL2z98o+2fvmTrV8+
/HH1y5+Tp/xFeUe+RF7yZbL5juZ32co3yE6+UfbyE3KQn5aj/Iqc5NfkLL8h
F/kducofyE0+5JfULx8hD/lYeconyzvyqfKST5NN1XiRrXyB7ORvyF6+Qg7y
VXKUr5OTfKOc5dvkIt8lV/lBuckPb/3yY1u//MTWLz+z9cuvbf3yYU+o/9Z9
PlG28mmyk0+XvfxlOcjnyFG+SE7yJXKWL5OL/G25ytfLTb5Z7vLt8pDvkad8
v7wjPykv+Zmt/0/t80tbv/zy1i+/vfXLH2z98oG/rH75EDnJx8tZPkku8ufl
Kn9RbvKX5S5fIA/5cnnKN8g78p3ykh+SzW37/Ihs5UdlJz8te/k5Ocivbv3y
m1u//OHWLx/6pPrl4+Qqnyw3+Utyl78iD/kb8pQvlnfkq+Ql3yKbP63xKFv5
dtnJ35W9/Jgc5CflKP9ATvJrcpYPG+qXj5GrfJLc5NPlLp8lD/kcecrnyTvy
hfKSL5HN7ZrPZCtfJTv5etnLN8tBfkiO8lNykp+Vs/z61i9/sPXLH2398qdb
v7z/U+qXT5KnfIa8I18gL/mbsvkzmn9kK98gO/k22ct3y0F+Vo7yK3KSX5Wz
/Jpc5DflKv9QbvKP5C5/vPXLn2798kG/on75WHnJJ8vmjn0+RbbyObKTr5G9
fJMc5O/IUb5NTvL35Cw/LBf5CbnKT8pNfl7u8ovykF+Sp/z61i+/s/XL7279
P7HP72398odbv/zx1i9/svXLRzytfvk4OcnHy1k+WS7yF+Qqny43+Uy5yxfL
Q75CnvK35B35WnnJ35bNnft8l2zl+2QnPyZ7+Uk5yM9v/fKrW7/8ydYvf7r1
y0f+qvrlE+Qmnyp3+cvykL8qT/nr8o58mbzky2Xzk/t8tWzlb8tOvlH28h1y
kB+Ro/y4nOSn5Sy/LBf5va1f/mDrlw94Rv3yZ+QhHyJP+Wh5Rz5OXvIpsrlr
n78oW/lLspMvkL18hRzkq+QoXyMn+btylp+Qi/y0XOXn5CY/v/XLr2398ptb
v/z+1i9/tPXLn2z9f1bv76+pXz5QdvKRspePl4N8khzlk+UknyVn+Wy5yBfK
Vb5EbvKtcpdvl4f8oDzlZ+Qd+Vl5yT+Szd37fPiz6pePkp18rOzlr8lBPl+O
8kVykq+Rs3ydXORb5CrfJjf5u3KXH5WH/IQ85WflHfk5eckvyubPaTxu/fI7
W7/86dYvH/Hr6pePkqP8WTnJp8hZPlUu8pfkKp8jN/lCucvflId8qTzly+Ud
+Tvykr8nm+/u8wOylZ+Rnfyi7OU3t375na1f/mTrl498Tv3ycXKRj5erfKLc
5NPlLl8kD/kyecrXyzvyzfKS75NN2+eHZCs/Ijv5MdnLz8pBfkGO8g/kJH+0
9cufbP3yfr+hfvkYucmflbt8ujzks+QpXy7vyLfIS75VNt/T+JKtfL/s5Idk
Lz8qB/kJOcrPyUl+Wc7y23KR39n65Q+2fvmg59UvHyEP+Wh5ysfKO/Kp8pJv
lM2f3+d7ZSs/Jjv5adnLL8pB/liO8md+U/3yiXKWPycX+XS5yufLTb5U7vIV
8pCvlqd8g7wj3yEv+X7Z3LPPT8pWfkp28jOyl1+Sg/yGHOW3t375kBfULx8j
F/lYucqfl5t8qtzlr8hDvkSe8rfkHflKecnfls1f0PsjW/lu2cn3yF5+XA7y
U3KUn5OT/MrWL7+69csfbv3yj7d++YDfUr98nDzkM+QpnynvyF+Rl3yebO7d
54tlK39TdvK1spdvkYP8gBzlp+UkvyRn+X25yD+Wq7zfi+qXD5a7fIw85OPk
KX9B3pHPlNfWK5u/uM9XyVa+WnbyzbKXb5eDfIcc5bvkJH9PzvJDcpGfl6v8
+tYvv7v1y/tP9cuHyVM+Ut6Rj5KXfIJs7tN8JFv5i7KTz5C9/FU5yF+Xo3yR
nORvyln+llzk6+Qq3yY3+W65y/du/fJTW7/86tYvv731y+9t/X9J19/WL+//
kvrlQ2UvHyEH+UQ5yp+Xk3yqnOUz5CKfLVf5HLnJ58ld/oY85IvlKV8q78iX
y0u+Tjb36/2WrXzn1i/ft/XLj2798pNbv/zS1i9/5rfVLx8pF/lkucpnyU2+
RO7yt+Qh3yFP+R55Z3v98pIfkc1Pab2Xrfy67OQ3ZC+/JQf5wJfVLx8kJ/kQ
OcuHyUU+XK7y5+Qmnyt3+TJ5yLfIU75N3pHvl5f8hGwe2OcXZSu/Izv5Y9nL
h/yO+uXT5Ch/SU7yV+QsnycX+Qq5ylfJTb5e7vLt8pDvkqf8XXlH/r685Edl
89P6/ctWfkJ28nOyl1/f+uUfb/3yAa+oXz5YzvKhcpGPlqv8ZbnJZ8ldPlse
8oXylC+Sd+RL5CVfJZsH9/km2cp3yU6+X/byQ3KQH5Oj/PjWLz+/9csvbf3y
G1u//PbWL3+09csH/q765WPkKZ8q78hflpd8lmx+RuuZbOWvy07+huzly+Qg
Xy1H+QY5yXfIWb5TLvI9cpUfkJv8sNzlR7d++ZWtX35165ff2Prl97b+hzQ/
/0D98uGyk4+SvXyiHOTPy1H+kpzks+Usf00u8jlylS+Qm3yl3OVr5SF/R57y
nfKOfK+85Adk0/f56a1ffnHrl3+w9ctvbf3yh1u/fMDvqV8+VM7yYXKRj5ar
/Dm5yV+Qu3y6PORz5SlfJO/Il8pL/p5sHtb4lq38iOzkx2QvPysH+WU5yq9u
/fJbW7/8o61f3u9V9cuHyU0+Vu7yCfKQT5KnfLq8I39DXvJlsvnZfb5ctvK3
ZCdfLXv5DjnI35WjfL+c5KfkLL8sF/mVrV9+Y+uXD/p99ctHyUM+QZ7yyfKO
/CV5yV+Rzfc1/mQrXyE7+UrZy3fKQf6+HOUX5SS/JGf5XbnI78tV/lhu8jGv
qV8+Xh7ySfKUz5d35EvkJV8qm5/Teihb+WrZyd+WvXy9HOTb5Sh/T07y/XKW
H5SL/KRc5WfkJr+89ctvbf3y21u//P7WL+/3l9UvHyibR/b5YNnKh8hO/qzs
5dPlIJ8lR/l8OcmXyFn+plzka+Qqf1tu8m1yl++Uh3yvPOVH5B35ja1ffnPr
//l9fmfrl9/b+uWDXle/fJQc5NPkKH9JTvKZcpYvlIv8DbnKl8tNvlbu8m3y
kO+Sp3yvvCN/X17yY7J5dJ+fkK38kuzk17d++c2tX35r65ff3/rlg/+K+uVj
5CIfJ1f5RLnJn5O7fLo85PPkKX9L3pGvkpd8rWx+QfO5bOV7ZCc/Jnv5BTnI
r8tR/kBO8oFvqF8+SC7ywXKVD5ObfJTc5TPkIV8gT/k6eUe+QV7yrbJ5TOuX
bOX7ZSc/JHv5UTnIT8tRfltO8ntbv/zh1i//aOuX999Rv3yE3OWj5SEfK0/5
DHlH/pq85PNk84saf7KVL5edfKXs5WvkIN8kR/kWOcnfkbN8n1zkh+UqP7f1
y69s/fJrW7/8+tYvv7v1yx9v/fJxb6r/8X0+WbbyKbKTz5W9fL4c5IvkKN8g
J/kuOcv3yEW+T67yQ3KTX5a7/Lo85HflKX8i78ifyks+7K+q/5f2+XDZysfI
Tj5e9vLn5CB/RY7y+XKSvyln+Uq5yNfJVb5RbvJtcpfvl4f8gDzlh+Ud+U15
yR9s/U9o/G398gFvqV8+RPby0XKQT5Gj/EU5yWfKWT5HLvJ5cpUvlpv8TbnL
18hDvlae8nXyjvyAvOQHZfPLmt9lKz+/9ctvbv3yO1u//P7WL3+89cs/3vrl
g/+a+uXj5SqfIjf5C3KXvywP+Rx5ypfKO/IV8pKvks2TGq+yle+SnXyf7OX7
5SB/X47y83KSX5Wz/MbWL7+79cv7v61++UC5y8fIQz5WnvLn5B35dHnJX5TN
0HwvW/lK2clXy16+Tg7y3XKUH5GT/ISc5WflIr8qV/mNrV9+Z+uX39v65Q+2
fvnjrV/e/6+rXz5ANk9pfMtWPkp28nGyl0+Wg/wlOcrnyEm+QM7yxXKRL5Wr
fIXc5GvlLt8oD/kWecp3yjvyA1u//PzW/yv7/NbWL7+39cufeUf98qFykI+U
o/wlOclflrN8rlzki+UqXyY3+dtyl6+Xh3yrPOU75B35PnnJ98vmaY1f2cqP
yE5+ZuuXX9j65R9s/fLrW7/8w61ffn/rlw/6G+qXD5GbfLjc5fPlIV8gT/kS
eUe+UV7yzbL5Vb1/spXvlJ38iOzlR+UgvyBH+VM5yQe8q375ELnIh8pVPlZu
8gVyl78hD/lKecpXyTvyNfKSvyubZ/b5XtnKj8pOfkz28hNykJ+Ro/yinOS3
tn75w61f/vHWLx/8N9UvnyR3+WR5yKfLUz5T3pHPk5d8vmx+bZ8vkq18iezk
y2QvXy8H+SY5ynfISX5QzvL35SI/L1f5ra1f/mTrl/f7ofrlg+UpHyLvyIfL
Sz5SNs9qvpet/HnZyV+QvXy+HOTL5Sh/S07y1XKWb5OL/LBc5RflJr8sd/mN
rV/+4dYvH/631C+fIC/5NNn8uuZr2cpny06+UPbypXKQr5WjfJ2c5OvlLD8s
F/lpucpvyU1+T+7yR/KQP5GnfMB76pePlpd8pmye03otW/lc2cnny16+RA7y
FXKUr5KTfLWc5WvlIt8vV/lBuckvyF3e/2+rXz5InvIh8o58mLzkE2TzG/v8
WdnKX5Cd/GXZy2fJQf6qHOVvyEm+RM7ylXKRr5OrfLPc5FvlLt+99cv3bP3y
vVu//PTWL7+w9T+v8bb1y29u/fJ7W7/84dYvf+Z99cuHy0k+Ss7yiXKRT5Gr
fKbc5LPlLl8uD/kmecq3yDvyffKSH5TNb2o9k638nOzkF2UvvyYH+ZOtX95v
qV8+VM7yEXKRT5KrfLLc5NPlLp8tD/liecpXyzvyTfKSb5XNC1qvZCvfJTv5
btnLD8pBflyO8vNbv/zq1i9/uvXLB36gfvkQucknyF3+nDzkU+Upf03ekb8p
L/ky2fyW1ivZylfKTr5F9vKtcpDvkKN8t5zke+UsPyAX+cWtX35565df3frl
t7d++cdbv7z/31G/fIi85CNk86LWB9nKn5WdfJrs5S/KQT5TjvI5cpIvlLP8
gFzkJ+UqvyQ3+X25yx/LQz74Q/XLh8k78vHykk+RzdR8Llv5KtnJt8pe/r4c
5GflKD8vJ/lVOctvyEX+SK7yfn9X/fJBcpePkod8jDzlY+Ud+SR5yZ+XzUvq
l618kezky2UvXykH+dtylK+Tk3ybnOV75CI/IFf5ka1ffnzrl5/d+uVXtn75
1a1ffm3rlz/Y+n9b69nWL3+69cv7f6R++RA5yIfKUT5RTvLJcpY/Lxf5TLnK
F8pNvlju8hXykK+Xp3yjvCPfKS/5Adm8vM+PyVZ+Wnbyc1u//O7WL+/399Qv
Hygn+Wg5y8fJRT5ZrvIX5CafLnf5bHnI58tTvkjekb8tL/km2fzOPt8sW/lW
2cm3y17+nhzk+7d++ZGtX35m65df2Prll7d++Qdbv3zkj9QvHysP+QR5yqfL
O/JZ8pLPl80rGo+ylR+SnfyU7OUX5CC/LEf5FTnJb8tZfkcu8gdylX8sN/mA
v69++RB5yEfLUz5Z3pFPk5d8jmx+d5/Pk618k+zk22Qvf1cO8r1ylB+Vk/y8
nOU35SJ/JFf5Mx+rXz5U7vLx8pC/Kk/5UnlHvkpe2+uRzQ+03spWfll28ruy
l9+Xg/wjOcqfykne/x+oXz5YLvLxcpU/Kzf5dLnLF8hDvkae8o3yjnybvOR7
ZPN7Gq+ylR+XnfyU7OVX5CC/Kkf5DTnJ72398odbv/zjrV8+/BP1yyfKXf6s
POQvyVM+Q96Rz5SX/BX5/33h/5/Plq38DdnJl8pevlwO8nVylO+Tk/ywnOWn
5SL/QK7ya1u//ObWL3+y9csH/EP1y5+Rd+Rj5CWfJJvf13ojW/mrspPPkb18
rhzky+Qof0tO8tVylm+Vi/yIXOXH5CY/JXf5B/KQ39365fe3fvmDrV8+8FP1
v6b15R/xHz73kNuPeObz///P/6PegSc84A43uMIFznCCIxxgDzvYwgbevV72
9MMTHnCHG1zhAmc4wREOsIcdbGED784Xe/rhCQ+4ww2ucIEznOAIB9jDDraw
gXfXiz398IQH3OEGV7jAGU5whAPsYQdb2MC7fy/s6YcnPOAON7jCBc5wgiMc
YA872MIG3v17cU8/POEBd7jBFS5whhMc4QB72MEWNvDu/wt7+uEJD7jDDa5w
gTOc4AgH2MMOtrCBd/9f3NMPT3jAHW5whQuc4QRHOMAedrCFDbz7ecGefnjC
A+5wgytc4AwnOMIB9rCDLWzg3c+L9vTDEx5whxtc4QJnOMERDrCHHWxhA+9+
XrinH57wgDvc4AoXOMMJjnCAPexgCxt49/PiPf3whAfc4QZXuMAZTnCEA+xh
B1vYwLvfF+zphyc84A43uMIFznCCIxxgDzvYwgbe/b5oTz884QF3uMEVLnCG
ExzhAHvYwRY28O73hXv64QkPuMMNrnCBM5zgCAfYww62sIF3vy/e0w9PeMAd
bnCFC5zhBEc4wB52sIUNvHu/wJ5+eMID7nCDK1zgDCc4wgH2sIMtbODd+0X2
9MMTHnCHG1zhAmc4wREOsIcdbGED794vtKcfnvCAO9zgChc4wwmOcIA97GAL
G3j3frE9/fCEB9zhBle4wBlOcIQD7GEHW9jAu/cL7umHJzzgDje4wgXOcIIj
HGAPO9jCBt69X3RPPzzhAXe4wRUucIYTHOEAe9jBFjbw7v3Ce/rhCQ+4ww2u
cIEznOAIB9jDDrawgXfvF9/TD094wB1ucIULnOEERzjAHnawhQ28+7zAnn54
wgPucIMrXOAMJzjCAfawgy1s4N3nRfb0wxMecIcbXOECZzjBEQ6whx1sYQPv
Pi+0px+e8IA73OAKFzjDCY5wgD3sYAsbePd5sT398IQH3OEGV7jAGU5whAPs
YQdb2MC7zwvu6YcnPOAON7jCBc5wgiMcYA872MIG3n1edE8/POEBd7jBFS5w
hhMc4QB72MEWNvDu88J7+uEJD7jDDa5wgTOc4AgH2MMOtrCBd58X39MPT3jA
HW5whQuc4QRHOMAedrCFDby7X8CefnjCA+5wgytc4AwnOMIB9rCDLWzg3f0i
9vTDEx5whxtc4QJnOMERDrCHHWxhA+/uF7KnH57wgDvc4AoXOMMJjnCAPexg
Cxt4d7+YPf3whAfc4QZXuMAZTnCEA+xhB1vYwLv7Be3phyc84A43uMIFznCC
IxxgDzvYwgbe3S9qTz884QF3uMEVLnCGExzhAHvYwRY28O5+YXv64QkPuMMN
rnCBM5zgCAfYww62sIF394vb0w9PeMAdbnCFC5zhBEc4wB52sIUNvLtf4J5+
eMID7nCDK1zgDCc4wgH2sIMtbODd/SL39MMTHnCHG1zhAmc4wREOsIcdbGED
7+4XuqcfnvCAO9zgChc4wwmOcIA97GALG3h3v9g9/fCEB9zhBle4wBlOcIQD
7GEHW9jAu/sF7+mHJzzgDje4wgXOcIIjHGAPO9jCBt7dL3pPPzzhAXe4wRUu
cIYTHOEAe9jBFjbw7n7he/rhCQ+4ww2ucIEznOAIB9jDDrawgXf3i9/TD094
wB1ucIULnOEERzjAHnawhQ28e17Ann54wgPucIMrXOAMJzjCAfawgy1s4N3z
Ivb0wxMecIcbXOECZzjBEQ6whx1sYQPvnheypx+e8IA73OAKFzjDCY5wgD3s
YAsbePe8mD398IQH3OEGV7jAGU5whAPsYQdb2MC75wXt6YcnPOAON7jCBc5w
giMcYA872MIG3j0vak8/POEBd7jBFS5whhMc4QB72MEWNvDueWF7+uEJD7jD
Da5wgTOc4AgH2MMOtrCBd8+L29MPT3jAHW5whQuc4QRHOMAedrCFDbx7XuCe
fnjCA+5wgytc4AwnOMIB9rCDLWzg3fMi9/TDEx5whxtc4QJnOMERDrCHHWxh
A++eF7qnH57wgDvc4AoXOMMJjnCAPexgCxt497zYPf3whAfc4QZXuMAZTnCE
A+xhB1vYwLvnBe/phyc84A43uMIFznCCIxxgDzvYwgbePS96Tz884QF3uMEV
LnCGExzhAHvYwRY28O554Xv64QkPuMMNrnCBM5zgCAfYww62sIF3z4vf0w9P
eMAdbnCFC5zhBEc4wB52sIUNvH4S/fCEB9zhBle4wBlOcIQD7GEHW9jA6070
wxMecIcbXOECZzjBEQ6whx1sYQOvn0A/POEBd7jBFS5whhMc4QB72MEWNvC6
A/3whAfc4QZXuMAZTnCEA+xhB1vYwOvPoB+e8IA73OAKFzjDCY5wgD3sYAsb
eN2OfnjCA+5wgytc4AwnOMIB9rCDLWzg9afRD094wB1ucIULnOEERzjAHnaw
hQ28bkM/POEBd7jBFS5whhMc4QB72MEWNvD6U+iHJzzgDje4wgXOcIIjHGAP
O9jCBl63oh+e8IA73OAKFzjDCY5wgD3sYAsbeFX0wxMecIcbXOECZzjBEQ6w
hx1sYQOv76AfnvCAO9zgChc4wwmOcIA97GALG3j9SfTDEx5whxtc4QJnOMER
DrCHHWxhA69b0A9PeMAdbnCFC5zhBEc4wB52sIUNvP4E+uEJD7jDDa5wgTOc
4AgH2MMOtrCB183ohyc84A43uMIFznCCIxxgDzvYwgZefxz98IQH3OEGV7jA
GU5whAPsYQdb2MDrJvTDEx5whxtc4QJnOMERDrCHHWxhA68/hn54wgPucIMr
XOAMJzjCAfawgy1s4HUj+uEJD7jDDa5wgTOc4AgH2MMOtrCB1x9FPzzhAXe4
wRUucIYTHOEAe9jBFjbwugH98IQH3OEGV7jAGU5whAPsYQdb2MDrj6AfnvCA
O9zgChc4wwmOcIA97GALG3hdj354wgPucIMrXOAMJzjCAfawgy1s4PWH0Q9P
eMAdbnCFC5zhBEc4wB52sIUNvK5DPzzhAXe4wRUucIYTHOEAe9jBFjbwKuiH
JzzgDje4wgXOcIIjHGAPO9jCBl7fRj884QF3uMEVLnCGExzhAHvYwRY28PpD
6IcnPOAON7jCBc5wgiMcYA872MIGXteiH57wgDvc4AoXOMMJjnCAPexgCxt4
/UH0wxMecIcbXOECZzjBEQ6whx1sYQOva9APT3jAHW5whQuc4QRHOMAedrCF
Dbz+APrhCQ+4ww2ucIEznOAIB9jDDrawgdfV6IcnPOAON7jCBc5wgiMcYA87
2MIGXv8X+uEJD7jDDa5wgTOc4AgH2MMOtrCB11Xohyc84A43uMIFznCCIxxg
DzvYwgZe/yf64QkPuMMNrnCBM5zgCAfYww62sIHXleiHJzzgDje4wgXOcIIj
HGAPO9jCBl7/B/rhCQ+4ww2ucIEznOAIB9jDDrawgde30A9PeMAdbnCFC5zh
BEc4wB52sIUNvP539MMTHnCHG1zhAmc4wREOsIcdbGEDryvQD094wB1ucIUL
nOEERzjAHnawhQ28MvrhCQ+4ww2ucIEznOAIB9jDDrawgdfl6IcnPOAON7jC
Bc5wgiMcYA872MIGXv8b+uEJD7jDDa5wgTOc4AgH2MMOtrCB12Xohyc84A43
uMIFznCCIxxgDzvYwgZe/yv64QkPuMMNrnCBM5zgCAfYww62sIHXpeiHJzzg
Dje4wgXOcIIjHGAPO9jCBl7/C/rhCQ+4ww2ucIEznOAIB9jDDrawgdc30Q9P
eMAdbnCFC5zhBEc4wB52sIUNvP5n9MMTHnCHG1zhAmc4wREOsIcdbGEDr0vQ
D094wB1ucIULnOEERzjAHnawhQ28/if0wxMecIcbXOECZzjBEQ6whx1sYQOv
i9EPT3jAHW5whQuc4QRHOMAedrCFDbz+R/TDEx5whxtc4QJnOMERDrCHHWxh
A69voB+e8IA73OAKFzjDCY5wgD3sYAsbeP0P6IcnPOAON7jCBc5wgiMcYA87
2MIGXhehH57wgDvc4AoXOMMJjnCAPexgCxt4JfTDEx5whxtc4QJnOMERDrCH
HWxhA68L0Q9PeMAdbnCFC5zhBEc4wB52sIUNvP579MMTHnCHG1zhAmc4wREO
sIcdbGEDrwvQD094wB1ucIULnOEERzjAHnawhQ28/jv0wxMecIcbXOECZzjB
EQ6whx1sYQOv89EPT3jAHW5whQuc4QRHOMAedrCFDbz+W/TDEx5whxtc4QJn
OMERDrCHHWxhA6/z0A9PeMAdbnCFC5zhBEc4wB52sIUNvP4b9MMTHnCHG1zh
Amc4wREOsIcdbGEDr6+jH57wgDvc4AoXOMMJjnCAPexgCxt4/dfohyc84A43
uMIFznCCIxxgDzvYwgZe56IfnvCAO9zgChc4wwmOcIA97GALG3j9V+iHJzzg
Dje4wgXOcIIjHGAPO9jCBl7noB+e8IA73OAKFzjDCY5wgD3sYAsbeP2X6Icn
POAON7jCBc5wgiMcYA872MIGXl9DPzzhAXe4wRUucIYTHOEAe9jBFjbwiuiH
JzzgDje4wgXOcIIjHGAPO9jCBl5fRT884QF3uMEVLnCGExzhAHvYwRY28Pov
0A9PeMAdbnCFC5zhBEc4wB52sIUNvM5GPzzhAXe4wRUucIYTHOEAe9jBFjbw
+s/RD094wB1ucIULnOEERzjAHnawhQ28voJ+eMID7nCDK1zgDCc4wgH2sIMt
bOD1n6EfnvCAO9zgChc4wwmOcIA97GALG3idhX54wgPucIMrXOAMJzjCAfaw
gy1s4PWfoh+e8IA73OAKFzjDCY5wgD3sYAsbeJ2JfnjCA+5wgytc4AwnOMIB
9rCDLWzg9Z+gH57wgDvc4AoXOMMJjnCAPexgCxt4nYF+eMID7nCDK1zgDCc4
wgH2sIMtbOD1H6MfnvCAO9zgChc4wwmOcIA97GALG3h9Gf3whAfc4QZXuMAZ
TnCEA+xhB1vYwOs/Qj884QF3uMEVLnCGExzhAHvYwRY28PoS+uEJD7jDDa5w
gTOc4AgH2MMOtrCBV0A/POEBd7jBFS5whhMc4QB72MEWNvD6IvrhCQ+4ww2u
cIEznOAIB9jDDrawgdd/iH54wgPucIMrXOAMJzjCAfawgy1s4HU6+uEJD7jD
Da5wgTOc4AgH2MMOtrCB13+AfnjCA+5wgytc4AwnOMIB9rCDLWzgdRr64QkP
uMMNrnCBM5zgCAfYww62sIHXv49+eMID7nCDK1zgDCc4wgH2sIMtbOB1Kvrh
CQ+4ww2ucIEznOAIB9jDDrawgde/h354wgPucIMrXOAMJzjCAfawgy1s4PUF
9MMTHnCHG1zhAmc4wREOsIcdbGEDr38X/fCEB9zhBle4wBlOcIQD7GEHW9jA
6xT0wxMecIcbXOECZzjBEQ6whx1sYQOvfwf98IQH3OEGV7jAGU5whAPsYQdb
2MDr8+iHJzzgDje4wgXOcIIjHGAPO9jCBl7/NvrhCQ+4ww2ucIEznOAIB9jD
Drawgdfn0A9PeMAdbnCFC5zhBEc4wB52sIUNvDz64QkPuMMNrnCBM5zgCAfY
ww62sIHXyeiHJzzgDje4wgXOcIIjHGAPO9jCBl7/FvrhCQ+4ww2ucIEznOAI
B9jDDrawgddn0Q9PeMAdbnCFC5zhBEc4wB52sIUNvP5N9MMTHnCHG1zhAmc4
wREOsIcdbGEDr5PQD094wB1ucIULnOEERzjAHnawhQ28/g30wxMecIcbXOEC
ZzjBEQ6whx1sYQOvE9EPT3jAHW5whQuc4QRHOMAedrCFDbz+dfTDEx5whxtc
4QJnOMERDrCHHWxhA68T0A9PeMAdbnCFC5zhBEc4wB52sIUNvP419MMTHnCH
G1zhAmc4wREOsIcdbGEDr+PRD094wB1ucIULnOEERzjAHnawhQ28/lX0wxMe
cIcbXOECZzjBEQ6whx1sYQOv49APT3jAHW5whQuc4QRHOMAedrCFDbz+FfTD
Ex5whxtc4QJnOMERDrCHHWxhA69j0Q9PeMAdbnCFC5zhBEc4wB52sIUNvBz6
4QkPuMMNrnCBM5zgCAfYww62sIHXMeiHJzzgDje4wgXOcIIjHGAPO9jCBl7/
MvrhCQ+4ww2ucIEznOAIB9jDDrawgdfR6IcnPOAON7jCBc5wgiMcYA872MIG
Xv8S+uEJD7jDDa5wgTOc4AgH2MMOtrCB11Hohyc84A43uMIFznCCIxxgDzvY
wgZe/yL64QkPuMMNrnCBM5zgCAfYww62sIHXkeiHJzzgDje4wgXOcIIjHGAP
O9jCBl7/AvrhCQ+4ww2ucIEznOAIB9jDDrawgdcR6IcnPOAON7jCBc5wgiMc
YA872MIGXv88+uEJD7jDDa5wgTOc4AgH2MMOtrCB1+Hohyc84A43uMIFznCC
IxxgDzvYwgZe/xz64QkPuMMNrnCBM5zgCAfYww62sIHXYeiHJzzgDje4wgXO
cIIjHGAPO9jCBl7/LPrhCQ+4ww2ucIEznOAIB9jDDrawgdeh6IcnPOAON7jC
Bc5wgiMcYA872MIGXhb98IQH3OEGV7jAGU5whAPsYQdb2MDrEPTDEx5whxtc
4QJnOMERDrCHHWxhA69/Bv3whAfc4QZXuMAZTnCEA+xhB1vYwOtg9MMTHnCH
G1zhAmc4wREOsIcdbGEDr38a/fCEB9zhBle4wBlOcIQD7GEHW9jA6zPohyc8
4A43uMIFznCCIxxgDzvYwgZe/xT64QkPuMMNrnCBM5zgCAfYww62sIHXQeiH
JzzgDje4wgXOcIIjHGAPO9jCBl7/JPrhCQ+4ww2ucIEznOAIB9jDDrawgdeB
6IcnPOAON7jCBc5wgiMcYA872MIGXv8E+uEJD7jDDa5wgTOc4AgH2MMOtrCB
1wHohyc84A43uMIFznCCIxxgDzvYwgZe/zj64QkPuMMNrnCBM5zgCAfYww62
sIHX/uiHJzzgDje4wgXOcIIjHGAPO9jCBl7/GPrhCQ+4ww2ucIEznOAIB9jD
Drawgdd+6IcnPOAON7jCBc5wgiMcYA872MIGXgb98IQH3OEGV7jAGU5whAPs
YQdb2MDrxx/v7YcnPOAON7jCBc5wgiMcYA872MIGXv83+uEJD7jDDa5wgTOc
4AgH2MMOtrCB16fohyc84A43uMIFznCCIxxgDzvYwgZe/xD98IQH3OEGV7jA
GU5whAPsYQdb2MDrE/TDEx5whxtc4QJnOMERDrCHHWxhA69/gH54wgPucIMr
XOAMJzjCAfawgy1s4PUx+uEJD7jDDa5wgTOc4AgH2MMOtrCB199HPzzhAXe4
wRUucIYTHOEAe9jBFjbw+hH64QkPuMMNrnCBM5zgCAfYww62sIHX30M/POEB
d7jBFS5whhMc4QB72MEWNvD6CP3whAfc4QZXuMAZTnCEA+xhB1vYwOvvoh+e
8IA73OAKFzjDCY5wgD3sYAsbeH2IfnjCA+5wgytc4AwnOMIB9rCDLWzg9XfQ
D094wB1ucIULnOEERzjAHnawhQ28PkA/POEBd7jBFS5whhMc4QB72MEWNvBa
6IcnPOAON7jCBc5wgiMcYA872MIGXu+jH57wgDvc4AoXOMMJjnCAPexgCxt4
/W30wxMecIcbXOECZzjBEQ6whx1sYQOv99APT3jAHW5whQuc4QRHOMAedrCF
Dbz+FvrhCQ+4ww2ucIEznOAIB9jDDrawgdcP0Q9PeMAdbnCFC5zhBEc4wB52
sIUNvP4m+uEJD7jDDa5wgTOc4AgH2MMOtrCB17vohyc84A43uMIFznCCIxxg
DzvYwgZefwP98IQH3OEGV7jAGU5whAPsYQdb2MDrHfTDEx5whxtc4QJnOMER
DrCHHWxhA6+/jn54wgPucIMrXOAMJzjCAfawgy1s4PU2+uEJD7jDDa5wgTOc
4AgH2MMOtrCB119DPzzhAXe4wRUucIYTHOEAe9jBFjbwegv98IQH3OEGV7jA
GU5whAPsYQdb2MDrr6IfnvCAO9zgChc4wwmOcIA97GALG3i9iX54wgPucIMr
XOAMJzjCAfawgy1s4LWDfnjCA+5wgytc4AwnOMIB9rCDLWzg9Qb64QkPuMMN
rnCBM5zgCAfYww62sIHXX0E/POEBd7jBFS5whhMc4QB72MEWNvB6Hf3whAfc
4QZXuMAZTnCEA+xhB1vYwOsvox+e8IA73OAKFzjDCY5wgD3sYAsbeL2GfnjC
A+5wgytc4AwnOMIB9rCDLWzg9fvohyc84A43uMIFznCCIxxgDzvYwgZer6If
nvCAO9zgChc4wwmOcIA97GALG3j9HvrhCQ+4ww2ucIEznOAIB9jDDrawgdcP
0A9PeMAdbnCFC5zhBEc4wB52sIUNvH4X/fCEB9zhBle4wBlOcIQD7GEHW9jA
6xX0wxMecIcbXOECZzjBEQ6whx1sYQOv30E/POEBd7jBFS5whhMc4QB72MEW
NvB6Gf3whAfc4QZXuMAZTnCEA+xhB1vYwOu30Q9PeMAdbnCFC5zhBEc4wB52
sIUNvF5CPzzhAXe4wRUucIYTHOEAe9jBFjbwmuiHJzzgDje4wgXOcIIjHGAP
O9jCBl4voh+e8IA73OAKFzjDCY5wgD3sYAsbeP0W+uEJD7jDDa5wgTOc4AgH
2MMOtrCB1wvohyc84A43uMIFznCCIxxgDzvYwgZev4l+eMID7nCDK1zgDCc4
wgH2sIMtbOD1PPrhCQ+4ww2ucIEznOAIB9jDDrawgddvoB+e8IA73OAKFzjD
CY5wgD3sYAsbeD2HfnjCA+5wgytc4AwnOMIB9rCDLWzg9evohyc84A43uMIF
znCCIxxgDzvYwgZez6IfnvCAO9zgChc4wwmOcIA97GALG3j9GvrhCQ+4ww2u
cIEznOAIB9jDDrawgdcz6IcnPOAON7jCBc5wgiMcYA872MIGXr+KfnjCA+5w
gytc4AwnOMIB9rCDLWzg9TT64QkPuMMNrnCBM5zgCAfYww62sIHXr6AfnvCA
O9zgChc4wwmOcIA97GALG3g9hX54wgPucIMrXOAMJzjCAfawgy1s4DXQD094
wB1ucIULnOEERzjAHnawhQ28nkQ/POEBd7jBFS5whhMc4QB72MEWNvD6ZfTD
Ex5whxtc4QJnOMERDrCHHWxhA68n0A9PeMAdbnCFC5zhBEc4wB52sIUNvH4J
/fCEB9zhBle4wBlOcIQD7GEHW9jA63H0wxMecIcbXOECZzjBEQ6whx1sYQOv
X0Q/POEBd7jBFS5whhMc4QB72MEWNvB6DP3whAfc4QZXuMAZTnCEA+xhB1vY
wOsX0A9PeMAdbnCFC5zhBEc4wB52sIUNvB5FPzzhAXe4wRUucIYTHOEAe9jB
Fjbw+nn0wxMecIcbXOECZzjBEQ6whx1sYQOvR9APT3jAHW5whQuc4QRHOMAe
drCFDbx+Dv3whAfc4QZXuMAZTnCEA+xhB1vYwOv76IcnPOAON7jCBc5wgiMc
YA872MIGXj+LfnjCA+5wgytc4AwnOMIB9rCDLWzg9TD64QkPuMMNrnCBM5zg
CAfYww62sIFXRz884QF3uMEVLnCGExzhAHvYwRY28HoI/fCEB9zhBle4wBlO
cIQD7GEHW9jA62fQD094wB1ucIULnOEERzjAHnawhQ28HkQ/POEBd7jBFS5w
hhMc4QB72MEWNvD6afTDEx5whxtc4QJnOMERDrCHHWxhA68H0A9PeMAdbnCF
C5zhBEc4wB52sIUNvH4K/fCEB9zhBle4wBlOcIQD7GEHW9jA6370wxMecIcb
XOECZzjBEQ6whx1sYQOvv4R+eMID7nCDK1zgDCc4wgH2sIMtbOB1H/rhCQ+4
ww2ucIEznOAIB9jDDrawgddfRD884QF3uMEVLnCGExzhAHvYwRY28LoX/fCE
B9zhBle4wBlOcIQD7GEHW9jA6y+gH57wgDvc4AoXOMMJjnCAPexgCxt43YN+
eMID7nCDK1zgDCc4wgH2sIMtbOD159EPT3jAHW5whQuc4QRHOMAedrCFDby+
h354wgPucIMrXOAMJzjCAfawgy1s4NXQD094wB1ucIULnOEERzjAHnawhQ28
vot+eMID7nCDK1zgDCc4wgH2sIMtbOD159APT3jAHW5whQuc4QRHOMAedrCF
DbzuRj884QF3uMEVLnCGExzhAHvYwRY28Pqz6IcnPOAON7jCBc5wgiMcYA87
2MIGXnehH57wgDvc4AoXOMMJjnCAPexgCxt4/ST64QkPuMMNrnCBM5zgCAfY
ww62sIHXneiHJzzgDje4wgXOcIIjHGAPO9jCBl4/gX54wgPucIMrXOAMJzjC
Afawgy1s4HUH+uEJD7jDDa5wgTOc4AgH2MMOtrCB159BPzzhAXe4wfX/6Xqu
AgCAAUSATjfTzXQz3Uw30810M3HcueMmLtV0M91MN9PNdHf3dMcv7/N9Pjxw
xw1XXHDGCUcc8Pvp/PHFB2+88MQDd9xwxQVnnHDEAb+fxh9ffPDGC088cMcN
V1xwxglHHPD7qfzxxQdvvPDEA3fccMUFZ5xwxAG/n8IfX3zwxgtPPHDHDVdc
cMYJRxzw+8n88cUHb7zwxAN33HDFBWeccMQBv8kfX3zwxgtPPHDHDVdccMYJ
Rxzw+0n88cUHb7zwxAN33HDFBWeccMQBv5/IH1988MYLTzxwxw1XXHDGCUcc
8PsJ/PHFB2+88MQDd9xwxQVnnHDEAb8fzx9ffPDGC088cMcNV1xwxglHHPD7
cfzxxQdvvPDEA3fccMUFZ5xwxAG/j+aPLz5444UnHrjjhisuOOOEIw74fRR/
fPHBGy888cAdN1xxwRknHHHA7yP544sP3njhiQfuuOGKC8444YgDfh/BH198
8MYLTzxwxw1XXHDGCUcc8Ptw/vjigzdeeOKBO2644oIzTjjigN+H8ccXH7zx
whMP3HHDFRecccIRB/x+LH988cEbLzzxwB03XHHBGSccccDvx/DHFx+88cIT
D9xxwxUXnHHCEQf8fjR/fPHBGy888cAdN1xxwRknHHHA70fxxxcfvPHCEw/c
ccMVF5xxwhEH/AZ/fPHBGy888cAdN1xxwRknHHHA70P544sP3njhiQfuuOGK
C8444YgDfj+SP7744I0XnnjgjhuuuOCME4444Pcj+OOLD9544YkH7rjhigvO
OOGIA34fwh9ffPDGC088cMcNV1xwxglHHPD7YP744oM3XnjigTtuuOKCM044
4oDfD+ePLz5444UnHrjjhisuOOOEIw74fRB/fPHBGy888cAdN1xxwRknHHHA
7wP544sP3njhiQfuuOGKC8444YgDfj+MP7744I0XnnjgjhuuuOCME4444PdD
+eOLD9544YkH7rjhigvOOOGIA34fwB9ffPDGC088cMcNV1xwxglHHPD7Ifzx
xQdvvPDEA3fccMUFZ5xwxAG/H8wfX3zwxgtPPHDHDVdccMYJRxzw+0H88cUH
b7zwxAN33HDFBWeccMQBvx/IH1988MYLTzxwxw1XXHDGCUcc8Ov88cUHb7zw
xAN33HDFBWeccMQBvx/AH1988MYLTzxwxw1XXHDGCUcc8Pv+/PHFB2+88MQD
d9xwxQVnnHDEAb/vxx9ffPDGC088cMcNV1xwxglHHPD7vvzxxQdvvPDEA3fc
cMUFZ5xwxAG/78MfX3zwxgtPPHDHDVdccMYJRxzw+9788cUHb7zwxAN33HDF
BWeccMQBv+/FH1988MYLTzxwxw1XXHDGCUcc8Pue/PHFB2+88MQDd9xwxQVn
nHDEAb/vwR9ffPDGC088cMcNV1xwxglHHPD77vzxxQdvvPDEA3fccMUFZ5xw
xAG/78YfX3zwxgtPPHDHDVdccMYJRxzw+6788cUHb7zwxAN33HDFBWeccMQB
v+/CH1988MYLTzxwxw1XXHDGCUcc8PvO/PHFB2+88MQDd9xwxQVnnHDEAb/v
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
wh9ffPDGC088cMcNV1xwxglHHPD7xPzxxQdvvPDEA3fccMUFZ5xwxAG/T8Qf
X3zwxgtPPHDHDVdccMYJRxzw+4T88cUHb7zwxAN33HDFBWeccMQBv0/AH198
8MYLTzxwxw1XXHDGCUcc8Pv4/PHFB2+88MQDd9xwxQVnnHDEAb+Pxx9ffPDG
C088cMcNV1xwxglHHPD7uPzxxQdvvPDEA3fccMUFZ5xwxAG/j8MfX3zwxgtP
PHDHDVdccMYJRxzw+9j88cUHb7zwxAN33HDFBWeccMQBv4/FH1988MYLTzxw
xw1XXHDGCUcc8PuY/PHFB2+88MQDd9xwxQVnnHDEAb+PwR9ffPDGC088cMcN
V1xwxglHHPAL/PHFB2+88MQDd9xwxQVnnHDEAb//81///z+++OCNF5544I4b
rrjgjBOOOOD3v/njiw/eeOGJB+644YoLzjjhiAN+/4s/vvjgjReeeOCOG664
4IwTjjjg9z/544sP3njhiQfuuOGKC8444YgDfv+DP7744I0XnnjgjhuuuOCM
E4444Pff+eOLD9544YkH7rjhigvOOOGIA37/jT+++OCNF5544I4brrjgjBOO
OOD3X/njiw/eeOGJB+644YoLzjjhiAN+/4U/vvjgjReeeOCOG6644IwTjjjg
95/544sP3njhiQfuuOGKC8444YgDfv+JP7744I0XnnjgjhuuuOCME4444Pcf
+eOLD9544YkH7rjhigvOOOGIA37/gT+++OCNF5544I4brrjgjBOOOOD37/nj
iw/eeOGJB+644YoLzjjhiAN+/44/vvjgjReeeOCOG6644IwTjjjg9/jjiw/e
eOGJB+644YoLzjjhiAN+/5Y/vvjgjReeeOCOG6644IwTjjjg92/444sP3njh
iQfuuOGKC8444YgDfv+aP7744I0XnnjgjhuuuOCME4444Pev+OOLD9544YkH
7rjhigvOOOGIA37/kj+++OCNF5544I4brrjgjBOOOOD3L/jjiw/eeOGJB+64
4YoLzjjhiAN+/5w/vvjgjReeeOCOG6644IwTjjjg98/444sP3njhiQfuuOGK
C8444YgDfv+UP7744I0XnnjgjhuuuOCME4444PdP+OOLD9544YkH7rjhigvO
OOGIA37/mD+++OCNF5544I4brrjgjBOOOOD3j/jjiw/eeOGJB+644YoLzjjh
iAN+/5A/vvjgjReeeOCOG6644IwTjjjg9w/444sP3njhiQfuuOGKC8444YgD
fn+fP7744I0XnnjgjhuuuOCME4444Pf3+OOLD9544YkH7rjhigvOOOGIA35/
lz+++OCNF5544I4brrjgjBOOOOD3d/jjiw/eeOGJB+644YoLzjjhiAN+f5s/
vvjgjReeeOCOG6644IwTjjjg97f444sP3njhiQfuuOGKC8444YgDfn+TP774
4I0XnnjgjhuuuOCME4444Pc3+OOLD9544YkH7rjhigvOOOGIA35/nT+++OCN
F5544I4brrjgjBOOOOD31/jjiw/eeOGJB+644YoLzjjhiAN+f5U/vvjgjRee
eOCOG6644IwTjjjg91f444sP3njhiQfuuOGKC8444YgDfn+ZP7744I0Xnnjg
jhuuuOCME4444PeX+OOLD9544YkH7rjhigvOOOGIA35/kT+++OCNF5544I4b
rrjgjBOOOOD3F/jjiw/eeOGJB+644YoLzjjhiAN+f54/vvjgjReeeOCOG664
4IwTjjjgd/njiw/eeOGJB+644YoLzjjhiAN+f44/vvjgjReeeOCOG6644IwT
jjjg92f544sP3njhiQfuuOGKC8444YgDfn+GP7744I0XnnjgjhuuuOCME444
4Pen+eOLD9544YkH7rjhigvOOOGIA35/ij+++OCNF5544I4brrjgjBOOOOD3
J/njiw/eeOGJB+644YoLzjjhiAN+f4I/vvjgjReeeOCOG6644IwTjjjg98f5
44sP3njhiQfuuOGKC8444YgDfn+MP7744I0XnnjgjhuuuOCME4444PdH+eOL
D9544YkH7rjhigvOOOGIA35/hD+++OCNF5544I4brrjgjBOOOOD3h/njiw/e
eOGJB+644YoLzjjhiAN+f4g/vvjgjReeeOCOG6644IwTjjjg9wf544sP3njh
iQfuuOGKC8444YgDfn+AP7744I0XnnjgjhuuuOCME4444Hf444sP3njhiQfu
uOGKC8444YgDfr+fP7744I0XnnjgjhuuuOCME4444Pf7+OOLD9544YkH7rjh
igvOOOGIA36/lz+++OCNF5544I4brrjgjBOOOOD3e/jjiw/eeOGJB+644YoL
zjjhiAN+v5s/vvjgjReeeOCOG6644IwTjjjg97v444sP3njhiQfuuOGKC844
4YgDfr+TP7744I0XnnjgjhuuuOCME4444Pc7+OOLD9544YkH7rjhigvOOOGI
A36/nT+++OCNF5544I4brrjgjBOOOOD32/jjiw/eeOGJB+644YoLzjjhiAN+
v5U/vvjgjReeeOCOG6644IwTjjjg91v444sP3njhiQfuuOGKC8444YgDfr+Z
P7744I0XnnjgjhuuuOCME4444Peb+OOLD9544YkH7rjhigvOOOGIA36/kT++
+OCNF5544I4brrjgjBOOOOC3+eOLD9544YkH7rjhigvOOOGIA36/gT+++OCN
F5544I4brrjgjBOOOOD36/njiw/eeOGJB+644YoLzjjhiAN+v44/vvjgjRee
eOCOG6644IwTjjjg92v544sP3njhiQfuuOGKC8444YgDfr+GP7744I0Xnnjg
jhuuuOCME4444Per+eOLD9544YkH7rjhigvOOOGIA36/ij+++OCNF5544I4b
rrjgjBOOOOD3K/njiw/eeOGJB+644YoLzjjhiAN+v4I/vvjgjReeeOCOG664
4IwTjjjg98v544sP3njhiQfuuOGKC8444YgDfr+MP7744I0XnnjgjhuuuOCM
E4444PdL+eOLD9544YkH7rjhigvOOOGIA36/hD+++OCNF5544I4brrjgjBOO
OOD3i/njiw/eeOGJB+644YoLzjjhiAN+v4g/vvjgjReeeOCOG6644IwTjjjg
t/jjiw/eeOGJB+644YoLzjjhiAN+v5A/vvjgjReeeOCOG6644IwTjjjg9wv4
44sP3njhiQfuuOGKC8444YgDfj+fP7744I0XnnjgjhuuuOCME4444Pfz+OOL
D9544YkH7rjhigvOOOGIA34/lz+++OCNF5544I4brrjgjBOOOOD3c/jjiw/e
eOGJB+644YoLzjjhiAN+P5s/vvjgjReeeOCOG6644IwTjjjg97P444sP3njh
iQfuuOGKC8444YgDfj+TP7744I0XnnjgjhuuuOCME4444Pcz+OOLD9544YkH
7rjhigvOOOGIA34/nT+++OCNF5544I4brrjgjBOOOOD30/jjiw/eeOGJB+64
4YoLzjjhiAN+P5U/vvjgjReeeOCOG6644IwTjjjg91P444sP3njhiQfuuOGK
C8444YgDfj+ZP7744I0XnnjgjhuuuOCME4444Df544sP3njhiQfuuOGKC844
4YgDfj+JP7744I0XnnjgjhuuuOCME4444PcT+eOLD9544YkH7rjhigvOOOGI
A34/gT+++OCNF5544I4brrjgjBOOOOD34/njiw/eeOGJB+644YoLzjjhiAN+
P44/vvjgjReeeOCOG6644IwTjjjg99H88cUHb7zwxAN33HDFBWeccMQBv4/i
jy8+eOOFJx6444YrLjjjhCMO+H0kf3zxwRsvPPHAHTdcccEZJxxxwO8j+OOL
D9544YkH7rjhigvOOOGIA34fzh9ffPDGC088cMcNV1xwxglHHPD7MP744oM3
XnjigTtuuOKCM0444oDfj+WPLz5444UnHrjjhisuOOOEIw74/Rj++OKDN154
4oE7brjigjNOOOKA34/mjy8+eOOFJx6444YrLjjjhCMO+P0o/vjigzdeeOKB
O2644oIzTjjigN/gjy8+eOOFJx6444YrLjjjhCMO+H0of3zxwRsvPPHAHTdc
ccEZJxxxwO9H8scXH7zxwhMP3HHDFRecccIRB/x+BH988cEbLzzxwB03XHHB
GSccccDvQ/jjiw/eeOGJB+644YoLzjjhiAN+H8wfX3zwxgtPPHDHDVdccMYJ
Rxzw++H88cUHb7zwxAN33HDFBWeccMQBvw/ijy8+eOOFJx6444YrLjjjhCMO
+H0gf3zxwRsvPPHAHTdcccEZJxxxwO+H8ccXH7zxwhMP3HHDFRecccIRB/x+
KH988cEbLzzxwB03XHHBGSccccDvA/jjiw/eeOGJB+644YoLzjjhiAN+P4Q/
vvjgjReeeOCOG6644IwTjjjg94P544sP3njhiQfuuOGKC8444YgDfj+IP774
4I0XnnjgjhuuuOCME4444PcD+eOLD9544YkH7rjhigvOOOGIA36dP7744I0X
nnjgjhuuuOCME4444PcD+OOLD9544YkH7rjhigvOOOGIA37fnz+++OCNF554
4I4brrjgjBOOOOD3/fjjiw/eeOGJB+644YoLzjjhiAN+35c/vvjgjReeeOCO
G6644IwTjjjg933444sP3njhiQfuuOGKC8444YgDft+bP7744I0Xnnjgjhuu
uOCME444/D/+v5oSK3E=
       "],
       VertexColors->None]}, 
     {RGBColor[0, 0, 1], PointSize[0.002777777777777778], AbsoluteThickness[
      1.6], Opacity[0.2]}}, 
    {GrayLevel[0], PointSize[0.002777777777777778], AbsoluteThickness[1.6], 
     {GrayLevel[0], PointSize[0.002777777777777778], AbsoluteThickness[1.6], 
      Opacity[0.2], PolygonBox[CompressedData["
1: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
Fo5v8V4/htbBv9t3ujWd1sOHPkc+WEAb4MTpt19G0ka4YH2jL7G0CR49a+bf
RFqyslxo8Cut2hFaCjcVqtRLp2XwnK5jml2j5fDvV8nt7tMCfGvgj+7FYj/8
fNKQgV/EfrhL610+kqfsh+8kf1ba0mr4wMP+cxrTGvjy5e0hbWgt3GiiaUUX
WgefPOK50ZPWw+t0ibt8aAO8N+DrIT/aCH/PG5amok1wzNf9GeG0ZFW5MO6G
xLCOlsIBI8c/3k7L4BOa028O0HK4c1Str6dpAS5vOa9CFq2ASyNv2uTSSrit
pk3D52I/vMN7TYtPYj/c//obtz9iP9yqbGAv62fsNy/PPTikAa2Dt86wHtuS
1sNOx+ZMc6cN8JuDBlVf2ggX+XZc5kWb4NoXt66ZTEtWY7x8/0/8HFoK1907
NSmUlsFvmt04toaWwx/Gtj+3hRbgVn22Zf9HK+D4ZxXyTtJKuFP7QONlWgVX
7ZxfcodWw7afe/14Qmtgz8mHK5WI/fDxyHq1for98MCxy+2tjOyHaxV9blOX
NsDVHZWdm9NG8/7r3OnrRpvgDec9FAItWYPHo/7xCcNpKXyjpWzmBFoGH30f
t2gWLYfPT7WMCqYFuDx2yYaVtAL2U73fvplWwt8slclJtAo+PSz/pI5Ww3sG
D9FfpDXm5b8u37xJa+Gvyq4PHtI6eNLSEy/fiP3wpwFtvnwT++GD1/f+tXzO
fnj9vybWdrQJTni7tV5TWrIW881VtZu3o6Ww/UONvCctg3cabXoOoeWwsCNm
kC8twFWrVRvtTyvg785r/BbRSriaZdV50bTKvH7smtA4Wg1vv11t9W5aA9e7
sm7zUVoLn55ZY885Wgcvydp49Dqth8fl100voA3wpG07rr4U++Homk1zS8V+
+HrP5GcVXrA/plxwtXctqUFL4ZMpqeVNaBk86lfPSs60HK5bfrVmN1qAvx1Q
2A+kFXCpzaM2o2klbNNyRudptAruV/a5bxCthhMWhSvUtAaudNh64gZaC2/Y
vG3mTloHd3BrtfgQrYdN0WlRZ2gDfGPNgNirtBFO71u4I482wVknZh54Ifav
w+s799cpk9gPNzu04fJfsR9e1NHxdvUi9sPPgk4/bEgL8KTpQ163ohVwmfXz
0k60Et49Y4mkP62CpyyytRlJq2H3LvsbTKE1sMNxjxbzaC3c5GGB2zJaB7uc
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
q+EPL8cF3Kc1cGgn69DntBY+KT8U9V7sh488UyT9Evvh8R1KrlQoZj+c3kH7
rA5thN/m9P3WjDbBlzp+rS6nJZfMQr8uu1t50lI4qsBXGEDL4JXC14DRtBzu
2Cc+dCotwFvM/TcsoBXwwZElSStpJTx3QpJ+M62Ci+sNz9HSarjJIuvvR2kN
LFl1ssYlWgtv9Zjc+i6tg5/vqef9jNbDWcdvjX4r9sOLZy2Z90Pst0x/1GGj
lYn9lse/fXWgFi25bBmfKfZqU1oKl0oHPneiZXDN1lY/utNyOOvdOZv+tAD3
HjG3zShaAU+e09ZnCq2EO3Z+FTiPVsEp+3bNX0Gr4Qz98GgNrYH3REqT42kt
3PjP3WuHaR3cq2Fk7nlaD9sW9vp5izZYesaUlz6hjfDZ5fq2BWI/vGZAWM9v
Yv8Vs/AvzXNsuS/sh5t++LegJi27Ynk/5oqmMS2HR7iHH3KkBXi2sueNrrQC
duxc8UUfWglHn7j9azitgne82FBrEq2G+54a4hhCa+A4t/q91bQWjp38YtxG
Wgd39tq/aDeth+fdmLn5EG2AR//ofPgsbYRfPfybdpM2wdVGp+c/oiV6nC9v
2GR+JfbDvrPG1Pki9sMjSlo7lYn9cEXn7741vrLfMr3WVWVDWqG3jHeycXFb
WmlZ/tMxMW60yvL4y45He9NqOHvQ7/ShtAb2WX/35QRaCw8M3f17Dq2Df1Sc
bbuc1sPdfQXnKNoAN3Kp028nbYR3pRcGHaRN8KkqF5aepiVXzcKMX9HbbtBS
+KJmsi6TlsEHHne/Y6TlsOPN2m8+i/1XLd8fLvr7R+yHrQ9ds6v2jf3w8Lhd
Lva0ChZ6zPdrTavhq6v9J7vSGvj50nbYQdkPRzWpuGMwrbtq+X7bq9TxtB5O
nXTl3izaALeqEle4hDbCLgFLJOtoE5wxbHSD7bTkmlmw+tO1cxItvWa5n26D
QSdpGdxq4O/ga7QcrvcrN9xAC/COAVd2vaAV8NGBiac+iv3wiNJVGaViPxw9
ZPr7yt/ZD48e4W9lR2vgUxVcG7ektfAeZUO3TrQObhxcfrA3rYfb2RdN96cN
cNqCzJVjaSNcHHYhfgZtgg903n/2P1py3Sx8jonOXENL4avaxR+30jK4xagp
FffRcrj2hSGyVFqAN9z26qanFfCWCKdhD2gl3PJ9w9m5tAruWVo1skjshz+c
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
LDXPk014dOXCPe+QLXhr7Soznnv9cPefTbd98frhzfV7uHFXUz88pPboTyLZ
B599OydNFrIfXlV8fYkCZGEq9mc5j7QoSxbh1wevj6hFluCm318vbU6W4Rr3
4h7rQlbgY50yRg8kq/ChiGJB48gaXKZn/ZwmWYcrvuheYznZgM8kmdBjC9mE
r91YMf0g2YK1aoe3niXbcL82d6/cIjtw3NDvH596/XDImJA0n71+eNOUYiXi
rKF+2CndpEUKsjAtRmk2Z9CIzGQR7jl7/tJ8ZAmOU2zf0dJkGQ4Jv+urQVbg
jfqvuM3IKnwokZSzM1mD69SoWmMAWYdb5u/RwyAb8NN9s6bPIpvw21e7ty4l
W7B+/P6VTWQb7l8p6NN+shO4f9d8ac6Q3cD2ijQpcZPsC/StHd3iidcPVz66
fsRHr396jLJh9LWlf71+eNqT30eTraV++MmHPNEZyTK8d1WzoLxkBY7za3zO
UmQVPvnfjhrVyRr8d6WvRxOyPj1wPmqKGR3JBnw/uuI2nWzCI0fq7hiyBc85
tPLTDLINZ151Pc0SsgP/UyhByY1kF57XsXTLfWQfPKZcn5GnyH7438Mrl10n
CzNiFPvJrWPRZBH+Zgc//uD1w9tzVIn3x+uH71cYERa8jvrh4X931Awlq/CU
rq975iZrcOJB2WeWIOvwf7nabq9KNuB24yKvNiKbsDz+2meNbMGD8iZP249s
w2HDapcaTXbgmr0nt5pOduHbCU6NWkT2wbdqBK1YT/bDlQpVjtpDFmbGKJmO
jH1ygizCHT9Gxb9GluC0F+Pm9pFluHi9qrXfe/1w1KBJvX95/fD+yudmJVlP
/XDovuAd6ck6/OKqej2MbMD/RMz/Woxswsdi7qWrQrbg84mylmlItuEKR7q1
aU92AttPv31MH7ILt8/w3RpJ9sHBURVPTCX74awppj6LJAuz8H4edD3hOrII
hy/PnHc3WYLPPupe9zhZhoee2d3XJSvw9KZx5jwkq3D8afV3vfX64Sedl96M
8frhsOevvyfaQP3w5WRlQtORTfj2/anlcpItuLp6r11Rsg2n65VvbCWyA9fO
P3p1A7ILP4q4cqot2QffWpntZS+yf1bgepMhSUaQhdkxynP7fP4pZBGOszNL
gwVkCR7RcnD/NWQZbrz+QsROsgJPX5Jtr0NW4ewlRty5TNbgDEOvxTwg63Cf
dvkyv/H64SxvJ1T86fXDBaVHHRJupH54cUzpCSFkG+40cv667GQHnrLq49nC
ZBdOrNd/U5Hsg58+2ZysPtkPZ/yTWG5DFszA+qDdG/Uki/DCnGcHDSNL8MMi
uSMnkWV41PMpB+aRFXiQ8vr+KrIKn1Lq/rHJGtznxTbpGFkPuFiqKpfIRuD+
uYZ0uU824cFR9ya/8vrh4XGUTd+9fvjWi7UX42+ifnjKoOAPqckuPGv9wJTZ
yD74tXG/qEz2w0uEqs0qkIU5McrKsK3D6pJF+OentEtakSV4XZexR7qT5YDH
vH00hKzAP8q3iDuRrMLLVp/MEUHW4IjthWusJOvwgw4remwnG/Cgg8lmHCGb
cPsDo7ZdIFvwonZv3btkG86xqc3nF14//HvJpZBvXj8cVqxiqXibqR9ePmBH
q1RkP9y5eY7RElmYG6MMexy5oiBZhO+lDj5ejizBU98YT2uTZXhCj28JWpIV
+OLM3nm6kVW4Q4sndQaTNVg516rveLI+N3D96zVzDtmAfcvq7FpBNuGVcU7d
3Eq24C1JK/44RLZh4fCB0PNkB16Wqnj5O2QXHp9iR/vnXj+8Y2eBcV+8fjj3
r01r4m6h/gi8/t/kPiOSRfjt2PWv/iFLcKmjYcEFyDJ8wVpXsCxZgdfmydWw
FlmFT7bYMLA5WYNzF8y7oAtZh92NW/YPJBvwsQuF7o8lm7A/Ytfv2WQL7hq3
lLScbMNZ0h2pvIXswKHXKnc5SHbhVkXPTT5L9sH3yqibbpH98NKXty8+9frn
xShWOe3DJ68fflbiVco4W6kf7nV7QLEUZBmW//ndLDNZgUsknTI8H1mFRy5P
vbQ0WYP/3l5xtAZZh6P25Y9uSjbg4+UPBnUmm3CcnjXDBpAteHS52zUNsh14
vD1de80iO3CBG99mLiW7cPtFk+1NZB98KV6G6/vJfnho2s1fT5OF+TFKm8vl
098ki/DI/FfLPPH64Rtyl7YfvX64+/2f4X+9frhE/tmrkm2jfrh89pynMpI1
eJRz6EUesg5/CWqcpBTZgFe/e52/OtmEp40e36AJ2YI37Mo0oCPZhn/P3jtP
JzvwlFQN940hu3Ctsm/vziD74EpJpvxaTPbDfcJzZNlIFhZg/7s4qtI+sgh3
atO+8ymyBBc4+XvSdbIM5722dGM0WYFbTSp38YPXDx/1PXj/2+uHG0ePThm8
nfrh0ClZioWSDTjNzahmuckmXPFs5+ElyBa8uEOipVXJNhy2csvRRmQHfjKp
YbRGduErqb4H9SP74DdVl4WNJvvhYpmr1ppOFiJxfLnkTa9FZBFu4kTMWk+W
4NzTy+3YQ5bhvL+eXT9BVuCWqc1vV8kqvMctk8FH1uDyxZ6Xfe/1wx/Kz233
y+uHr7yrMDaJTf3wnSpvV6cnW3AyZfHpMLIN935c81UxsgN/yfsjaRWyC6/L
sKFgQ7IPHrutRcP2ZD888VXiQX3IwkKM/88fWjCSLMLxGvU9MJUsweHhWR9E
kmU4W+Obf9aSFfj1xalZd5NV+N7bClWPkzX4w84vXV2yDufJsnnqQ7IBTync
cctbrx9O9jrDlRivH95T89rHRDuoHx5Xb3qadGQHHvCjasmcZBeeWOtvy6Jk
H3xIOTiqEtkPp3k4eEUDsrAI44WsRY63JYtw3qQfnvYiS/CLxVsSjiDL8Cm3
Z94pZAU+uSVPvQVkFX5c8FW/NWQNlppvnLuTrMOjcvbc45AN+OeifHcuk004
Yve7mAdkC6472M78xuuHsz0YqPz0+uG0r0p2SriT+uGwpb8mhpB9cKOvURuy
k/3w4i+TLxQmC4vx/ryo/vuKZBEOfxaSsj5ZgjPc/rdoG7IMX+m7rllPMgan
yrIt/YYPI6vwZLP00klkDZ4SGu/YPLIOr619JXoV2VgcWP9mSbwdZBPOsaxb
rmNkK7C9Y8VqXyLbiwPzM8Xtc5/swPO+ubNfef1w+aTWzu9eP/zrVL+b8XdR
P3w1TPmRmiwsiVEOFkiZMRtZhA/ce1xeJkvw5QJ7tApkGf4aNmV8XbICFz7d
el0rsgobSeVz3ckaHP0t3tshZB1uPuVe8olkA354zC4cQTbhIcsmN1lJtpYE
1l9pP3Q72Yb/rV1y8RGyA28MFY9cILvwJPPVo7tkHzxgy4m4L71+uF/f5Tm/
ef1LcXxza3jNeLupH577tGmvVGQJPrywyCyJLMOfPqXYUZCswMU/v7tejqzC
kxZd/FabrMFPn23O0JKsw/XvTC/XjWzAJ/Te7QeTTbj69nrjxpMt+FpEobVz
yDbc859UZ1eQHTi4wdfXW8kufCDn3WSHyT64z6oj8nmyH85/alXjO2RhGd4/
Z04Z8tzrh0/96rvoi9cPL0vZ7HDcPdQPj75Y/pFIVuAuBcLiZiGrcKNiKXIW
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
KLjGpdFkFe5XJMo/nazBk/+UTbOYrMMN9H0lN5AN+NTkoq33kk34RVV7zEmy
BR9YX2DVNbId+H3tzad8ZAfW2uV99d7rh0vu3Bj82+uH92/OIyc9Tv3w89qb
GmcgC1swXpidb2gusggrI7YuLk6W4D5J5KNVyDJcVdkV3ZCswCczloyvkVX4
3dJDufuSNdg5odQdRdbh0ubpftPIBtwqbr2IhWQTzh56Y+86sgXPu9363m6y
DW8u8/T3cbIDd6vSJ+tVsgtf+Pit6iOyD75ebWz3d14/PLZi8Iz/vP6tgfXD
IrcnPkH98PnsOa6nI0twp+Q7vuUky/DK5RVCi5EVePyNi+Urk1U4od26g0rW
4PyF30xoR9bhr81HbuhNNuD2OYIvjiCbcI8Fyz5MIVtwyLZCqSPJNtyh1/ES
a8kOXO9y01a7yC5899ar0VFkHxx/4piVV8h++PKd1Kf+JQvb8Hy5tvHlG68f
Lt9fCY7x+uHoPbcLJTpJ/XA2q1/jtGQFjiMnGpqDrMIju6xcXISswXOVskcV
sg5XjboZXZ9sBG5/ocdvSzbhUbuC8/QiW/DfHBvrDifbcOZy1fXJZAe+/uNJ
xHyyC+doPW7farIPTt4p6/0dZD9silF/jpGF7Xg+deqQ7TJZhNu2iVv9AVmC
18es7vHa64enVKg+84fXvz0wv8YrO8Ep6oeT7ZtxIw1Zg+038o9sZB1+depm
xsJkA95XbWTFimQTDu2VtVM9sgWnLHF2UmuyDS9d129TD7IDHzqc7vJQsgv3
GeZ8nEj2wTvv9giZR/bDU32pS68iCzbGEzOOtrHJIvz2YQ/jKFmCh94KWXOR
LMMRA4+fuUdWYGVvvzcvvX549PLMKb57/Xbg/IyLReKfpn54XfuRzVKTDdgs
lW9EVrJpB9ZbvL+sENmCU96fEVWebMNr11R4VofswGdSf0zUiuzCQ3Kvyd+d
7IN3Pm6uDiH74RGVgwdNIAs7YpRLNaIi55JFePOnIYcssgSHVCnwaBtZhhOX
fhr3CFmBp9xYEnaBrMJmSJPad8kanO1XcN8XXj9cfsrpOV+9fth3wNgTdIb6
4aRzyt5NSbbgo8m+/8pCtuGfhXZJBckOfOh7v6rlyC4c1KVA99pkH3xt6Jvp
Lch+OEzetL0rWdgZuJ6gx/VBZBFuPyfP93FkCa5S5nXoHLIMb5myucIKsgJH
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
bF+MLMIZF9ybUJkswbPrH96okmX4zubll9uRFfjn1rGfe5NV+H2TLulHkjX4
oFWr/FSyDreYU7BjJNmAL4elmbyWbMJpO8Rs3kW2Lgfmn4l2o8g2nO3k2a9X
yA789K0d+pDswiMOLqr41uuHo/OP7xzj9cOhVftMTRRN/Vcw3hJabEtLFmGh
Q5XrOcgSvLVroR9FyDKcJ2WmzJXICjxES1y5AVmF5zb53rUtWYNHv3s2vRdZ
h0vku2kPJxtXAt/vnro5mWzCIfP3xMwnW3CpqHVZ1pDtwOPPXVh1J9mBnyec
3sMhu7Cebcysy2QffCa6/64HZD/8slrXO6+9fhfPt/qtf//w+uGZv9RsCR9T
P5y8QY0aIWQZblO9Qu/sZAXu/7j4nMJkFVazF9xbkazBPxLlul+PrMM9IiSh
DdmAVx8PzdmTbAa8IKT2MLIF90qRst8ksg3H5E82bx7ZgRt8SHxgFdmFezdL
+NAm++B6HeMHHSP74S+p4uW+RBauYjzbPajefbIIz+0YNOCV1w9PjhMv8rvX
DyvV4h+O/4T64cMFEkanJqvwr4OJE2Qja/Cft8H5ZLIOnzwhqhXIBly7Ysjg
umQz8PjtQxe3Ilvw0hzSse5kG+42K+zpELIDf1paIPFEsguXU4sXjCD74Bob
yjdeSfbDKddWH7adLFyLURZVV5cdIYvXAvPVtzp+gSzBz4d2eXGXLMMbE/YP
fun1w3nKjS78zeuHu4ZMaxbvKfXDWkTkyFRkHU63d60lkQ14yujdpwqSTXjv
qxOvy5EteHnM9RR1yDZcyX5arCXZCdye5FvLbmQX3pM4Ufhgsg+etDV0zXiy
Hxa/FTg3hyxcx/7iSaX3K8ji9cD1ls1SbyNL8N/NvUodJstwj8lj254nK/C0
hAvH3SGrcMf829c/9/rhj19PX/zi9cPFOz/6GPcZ9cOFhv5Im5Jswg8LpiqX
hWzBVabn71CAbMNtZtSYVJbswHmKdNpci+zCG0eFu83JPvjfXku/diH74RN/
D4QOIgs3YpS2pe5UHEcW4fUh3zubZAleG5l22nKyDDc+WmL7FrIC75za/MZB
sgof/zns51myBo9PvuSf22Qd/nTmSJVnXj+cKiy6+2evH47OHX9WnOfUD7d3
8+xKQbbhaZka3MlMduBOyQb/zkd24TerlmQrQ/bB//x7vEZNsv9GYP6I172b
kYWbMcqMiqnndiaL8Olu5fYNIEvwpmJdHxhkGS6zzowzm6zAgw8fCltGVuHW
Q1/U2UzW4Ne3Uvc/QNbhbPeVBWfIxs3A92t9D90kmzcD6xct9T3x+m8G3i8u
xP/k9cMrWv2XV3hB/YHtLcinJie7cP0hbQZnIvvgLP/NXJyX7IcjczjHSpGF
W3i9ffr0tDpZhEd0CUvSlCzBT0e1KtSJLMOfS81u0p+swOsWnRweTlbh38tj
ls8ka/DPmoVPLiHr8MLI7q82kg34/jQr+X6yCTvZ7hY9Tbbg6u1TtbxBtmFd
qTvmsdcPlzk9abXf6w/8Pv6os3+8fnjXsd/vgl9SP6wVLZM6I1m4jf17naGl
8pBFeFGiPW1LkiU4Z8/P46qRZVjVi2xoTFbg0IwDLnUgq/DYnjs/9SNr8MR2
n9ONIetwnu/Fys8gG3D3YkM7LiabcNW0BydvIFvw4aW/t+wl27B7ptK1k2QH
Do+c9P0a2YXPJb2YKZrsC/TlSFX5g9cP53/cottvr/8O/r5VrRlJX1E//KP2
yx0ZyBJc9Zt8OxdZvhO43m7Er+JkBV5T5mTWqmQVPnA9eY1GZA3unLJVb42s
wxs+r53Tl2zA40Z82juKbMKf1lZ8MI1sBX6fwTPjLCLbcMTr+2HryQ58Kihf
3T1kF54eNaL/CbIPfp79woKrZD98PW+mw4/Iwt0YpdmtPtHvvH64d5iT4JfX
D6fJmDp/ktfUDzfY3bVherICZ/x0cEgYWYVH3EixtBhZg3u17hJVmazDbyYd
eq6SDfhPs1TB7ckmvOJCj8J9yBZ89WlUs5FkG45YFTpqKtmBn8QbtDKS7MLH
k14+vZbsgwvty/12F9kP5004IeVxsnAPr4//HpVwySJ8bl65Ng/JEtzr2qKx
b71+ePHu7+tivH64WdlmFxO9oX54Sdc9H9OSNbhPiZB0Ocl6YPubBpcrSjbg
HSdudahENuFsY0tNbkC24MxPFm9pS7bhVa9+X+1FduBt8zp8H0524SpPT2Wa
QvbB2p28lReQ/XDC/ma3NWThPo4vtn2bsfN/PK5pivnpThX9//v/r33MLrPD
bDNbzCazwawza8wqs8IsM0vMIrPAHHi+xOpndpkdZpvZYjaZDWadWWNWmRVm
mVliFpkF5sD7Rax+ZpfZYbaZLWaT2WDWmTVmlVlhlpklZpFZYA7sL2L1M7vM
DrPNbDGbzAazzqwxq8wKs8wsMYvMAnNgvBCrn9lldphtZovZZDaYdWaNWWVW
mGVmiVlkFpgD48VY/cwus8NsM1vMJrPBrDNrzCqzwiwzS8wis8AcOF6I1c/s
MjvMNrPFbDIbzDqzxqwyK8wys8QsMgvMgePFWP3MLrPDbDNbzCazwawza8wq
s8IsM0vMIrPAHPi8IFY/s8vsMNvMFrPJbDDrzBqzyqwwy8wSs8gsMAc+L4rV
z+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8yBzwtj9TO7zA6zzWwxm8wGs86s
MavMCrPMLDGLzAJz4PPiWP3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPAHPi+
IFY/s8vsMNvMFrPJbDDrzBqzyqwwy8wSs8gsMAe+L4rVz+wyO8w2s8VsMhvM
OrPGrDIrzDKzxCwyC8yB7wtj9TO7zA6zzWwxm8wGs86sMavMCrPMLDGLzAJz
4PviWP3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPAHDhfIFY/s8vsMNvMFrPJ
bDDrzBqzyqwwy8wSs8gsMAfOF4nVz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwy
C8yB84Vi9TO7zA6zzWwxm8wGs86sMavMCrPMLDGLzAJz4HyxWP3MLrPDbDNb
zCazwawza8wqs8IsM0vMIrPAHDhfMFY/s8vsMNvMFrPJbDDrzBqzyqwwy8wS
s8gsMAfOF43Vz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8yB84Vj9TO7zA6z
zWwxm8wGs86sMavMCrPMLDGLzAJz4HzxWP3MLrPDbDNbzCazwawza8wqs8Is
M0vMIrPAHLheIFY/s8vsMNvMFrPJbDDrzBqzyqwwy8wSs8gsMAeuF4nVz+wy
O8w2s8VsMhvMOrPGrDIrzDKzxCwyC8yB64Vi9TO7zA6zzWwxm8wGs86sMavM
CrPMLDGLzAJz4HqxWP3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPAHLheMFY/
s8vsMNvMFrPJbDDrzBqzyqwwy8wSs8gsMAeuF43Vz+wyO8w2s8VsMhvMOrPG
rDIrzDKzxCwyC8yB64Vj9TO7zA6zzWwxm8wGs86sMavMCrPMLDGLzAJz4Hrx
WP3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPAHJgvIFY/s8vsMNvMFrPJbDDr
zBqzyqwwy8wSs8gsMAfmi4jVz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8yB
+UJi9TO7zA6zzWwxm8wGs86sMavMCrPMLDGLzAJzYL6YWP3MLrPDbDNbzCaz
wawza8wqs8IsM0vMIrPAHJgvKFY/s8vsMNvMFrPJbDDrzBqzyqwwy8wSs8gs
MAfmi4rVz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8yB+cJi9TO7zA6zzWwx
m8wGs86sMavMCrPMLDGLzAJzYL64WP3MLrPDbDNbzCazwawza8wqs8IsM0vM
IrPAHJgvMFY/s8vsMNvMFrPJbDDrzBqzyqwwy8wSs8gsMAfmi4zVz+wyO8w2
s8VsMhvMOrPGrDIrzDKzxCwyC8yB+UJj9TO7zA6zzWwxm8wGs86sMavMCrPM
LDGLzAJzYL7YWP3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPAHJgvOFY/s8vs
MNvMFrPJbDDrzBqzyqwwy8wSs8gsMAfmi47Vz+wyO8w2s8VsMhvMOrPGrDIr
zDKzxCwyC8yB+cJj9TO7zA6zzWwxm8wGs86sMavMCrPMLDGLzAJzYL74WP3M
LrPDbDNbzCazwawza8wqs8IsM0vMIrPAHFgvIFY/s8vsMNvMFrPJbDDrzBqz
yqwwy8wSs8gsMAfWi4jVz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8yB9UJi
9TO7zA6zzWwxm8wGs86sMavMCrPMLDGLzAJzYL2YWP3MLrPDbDNbzCazwawz
a8wqs8IsM0vMIrPAHFgvKFY/s8vsMNvMFrPJbDDrzBqzyqwwy8wSs8gsMAfW
i4rVz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8yB9cJi9TO7zA6zzWwxm8wG
s86sMavMCrPMLDGLzAJzYL24WP3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPA
HFgvMFY/s8vsMNvMFrPJbDDrzBqzyqwwy8wSs8gsMAfWi4zVz+wyO8w2s8Vs
MhvMOrPGrDIrzDKzxCwyC8yB9UJj9TO7zA6zzWwxm8wGs86sMavMCrPMLDGL
zAJzYL3YWP3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPAHFgvOFY/s8vsMNvM
FrPJbDDrzBqzyqwwy8wSs8gsMAfWi47Vz+wyO8w2s8VsMhvMOrPGrDIrzDKz
xCwyC8yB9cJj9TO7zA6zzWwxm8wGs86sMavMCrPMLDGLzAJzYL34WP3MLrPD
bDNbzCazwawza8wqs8IsM0vMIrPA7F/M+pldZofZZraYTWaDWWfWmFVmhVlm
lphFZoHZv4j1M7vMDrPNbDGbzAazzqwxq8wKs8wsMYvMArN/IetndpkdZpvZ
YjaZDWadWWNWmRVmmVliFpkFZn8k62d2mR1mm9liNpkNZp1ZY1aZFWaZWWIW
mQVm/wLWz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8z++ayf2WV2mG1mi9lk
Nph1Zo1ZZVaYZWaJWWQWmP3zWD+zy+ww28wWs8lsMOvMGrPKrDDLzBKzyCww
+yNYP7PL7DDbzBazyWww68was8qsMMvMErPILDD757J+ZpfZYbaZLWaT2WDW
mTVmlVlhlpklZpFZYPbPYf3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPA7DdZ
P7PL7DDbzBazyWww68was8qsMMvMErPILDD7Z7N+ZpfZYbaZLWaT2WDWmTVm
lVlhlpklZpFZYPbPYv3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPA7J/J+pld
ZofZZraYTWaDWWfWmFVmhVlmlphFZoHZP4P1M7vMDrPNbDGbzAazzqwxq8wK
s8wsMYvMArN/OutndpkdZpvZYjaZDWadWWNWmRVmmVliFpkFZv801s/sMjvM
NrPFbDIbzDqzxqwyK8wys8QsMgvM/qmsn9lldphtZovZZDaYdWaNWWVWmGVm
iVlkFpj9U1g/s8vsMNvMFrPJbDDrzBqzyqwwy8wSs8gsMPsns35ml9lhtpkt
ZpPZYNaZNWaVWWGWmSVmkVlg9k9i/cwus8NsM1vMJrPBrDNrzCqzwiwzS8wi
s8Dsn8j6mV1mh9lmtphNZoNZZ9aYVWaFWWaWmEVmgdk/gfUzu8wOs81sMZvM
BrPOrDGrzAqzzCwxi8wCs38862d2mR1mm9liNpkNZp1ZY1aZFWaZWWIWmQVm
/zjWz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8z+sayf2WV2mG1mi9lkNph1
Zo1ZZVaYZWaJWWQWmP0G62d2mR1mm9liNpkNZp1ZY1aZFWaZWWIWmQVmfzjr
Z3aZHWab2WI2mQ1mnVljVpkVZplZYhaZBWb/GNbP7DI7zDazxWwyG8w6s8as
MivMMrPELDILzP7RrJ/ZZXaYbWaL2WQ2mHVmjVllVphlZolZZBaY/aNYP7PL
7DDbzBazyWww68was8qsMMvMErPILDD7R7J+ZpfZYbaZLWaT2WDWmTVmlVlh
lpklZpFZYPaPYP3MLrPDbDNbzCazwawza8wqs8IsM0vMIrPA7B/O+pldZofZ
ZraYTWaDWWfWmFVmhVlmlphFZoHZP4z1M7vMDrPNbDGbzAazzqwxq8wKs8ws
MYvMArN/KOtndpkd5v/jeq4CAIABRIBON9PNcLqm2+2cPJzpZrqZboYTJyfu
9JluppvpZrq7e/pOf3uf7/NtvPDEA3fccMUFZ5xwxAG/H8QfX3zwxgtPPHDH
DVdccMYJRxzw+4H88cUHb7zwxAN33HDFBWeccMQBvx/AH1988MYLTzxwxw1X
XHDGCUcc8Pv+/PHFB2+88MQDd9xwxQVnnHDEAb/vxx9ffPDGC088cMcNV1xw
xglHHPD7vvzxxQdvvPDEA3fccMUFZ5xwxAG/zh9ffPDGC088cMcNV1xwxglH
HPD7PvzxxQdvvPDEA3fccMUFZ5xwxAG/780fX3zwxgtPPHDHDVdccMYJRxzw
+1788cUHb7zwxAN33HDFBWeccMQBv+/JH1988MYLTzxwxw1XXHDGCUcc8Pse
/PHFB2+88MQDd9xwxQVnnHDEAb/vzh9ffPDGC088cMcNV1xwxglHHPD7bvzx
xQdvvPDEA3fccMUFZ5xwxAG/78ofX3zwxgtPPHDHDVdccMYJRxzw+y788cUH
b7zwxAN33HDFBWeccMQBv+/MH1988MYLTzxwxw1XXHDGCUcc8PtO/PHFB2+8
8MQDd9xwxQVnnHDEAb/vyB9ffPDGC088cMcNV1xwxglHHPD7DvzxxQdvvPDE
A3fccMUFZ5xwxAG/b88fX3zwxgtPPHDHDVdccMYJRxzw+3b88cUHb7zwxAN3
3HDFBWeccMQBv8YfX3zwxgtPPHDHDVdccMYJRxzw+7b88cUHb7zwxAN33HDF
BWeccMQBv2/DH1988MYLTzxwxw1XXHDGCUcc8PvW/PHFB2+88MQDd9xwxQVn
nHDEAb9vxR9ffPDGC088cMcNV1xwxglHHPD7lvzxxQdvvPDEA3fccMUFZ5xw
xAG/b8EfX3zwxgtPPHDHDVdccMYJRxzw++b88cUHb7zwxAN33HDFBWeccMQB
v2/GH1988MYLTzxwxw1XXHDGCUcc8Pum/PHFB2+88MQDd9xwxQVnnHDEAb9v
wh9ffPDGC088cMcNV1xwxglHHPD7xvzxxQdvvPDEA3fccMUFZ5xwxAG/b8Qf
X3zwxgtPPHDHDVdccMYJRxzw+4b88cUHb7zwxAN33HDFBWeccMQBv2/AH198
8MYLTzxwxw1XXHDGCUcc8Pv6/PHFB2+88MQDd9xwxQVnnHDEAb/KH1988MYL
Tzxwxw1XXHDGCUcc8Pt6/PHFB2+88MQDd9xwxQVnnHDEAb8P5Y8vPnjjhSce
uOOGKy4444QjDvh9Xf744oM3XnjigTtuuOKCM0444oDf1+GPLz5444UnHrjj
hisuOOOEIw74fW3++OKDN1544oE7brjigjNOOOKA34fwxxcfvPHCEw/cccMV
F5xxwhEH/L4Wf3zxwRsvPPHAHTdcccEZJxxxwO9r8scXH7zxwhMP3HHDFRec
ccIRB/y+Bn988cEbLzzxwB03XHHBGSccccDvq/PHFx+88cITD9xxwxUXnHHC
EQf8vhp/fPHBGy888cAdN1xxwRknHHHA76vyxxcfvPHCEw/cccMVF5xxwhEH
/D6YP7744I0XnnjgjhuuuOCME4444PdV+OOLD9544YkH7rjhigvOOOGIA34f
xB9ffPDGC088cMcNV1xwxglHHPAr/PHFB2+88MQDd9xwxQVnnHDEAb8P5I8v
PnjjhSceuOOGKy4444QjDvh9Zf744oM3XnjigTtuuOKCM0444oDfV+KPLz54
44UnHrjjhisuOOOEIw74fUX++OKDN1544oE7brjigjNOOOKA31fgjy8+eOOF
Jx6444YrLjjjhCMO+H15/vjigzdeeOKBO2644oIzTjjigN+X448vPnjjhSce
uOOGKy4444QjDvh9Wf744oM3XnjigTtuuOKCM0444oDfl+GPLz5444UnHrjj
hisuOOOEIw74fWn++OKDN1544oE7brjigjNOOOKA35fijy8+eOOFJx6444Yr
LjjjhCMO+H1J/vjigzdeeOKBO2644oIzTjjigN+X4I8vPnjjhSceuOOGKy44
44QjDvh9cf744oM3XnjigTtuuOKCM0444oDfF+OPLz5444UnHrjjhisuOOOE
Iw74Zf744oM3XnjigTtuuOKCM0444oDfF+WPLz5444UnHrjjhisuOOOEIw74
fRH++OKDN1544oE7brjigjNOOOKA3xfmjy8+eOOFJx6444YrLjjjhCMO+H0h
/vjigzdeeOKBO2644oIzTjjigN8X5I8vPnjjhSceuOOGKy4444QjDvh9Af74
4oM3XnjigTtuuOKCM0444oDf5+ePLz5444UnHrjjhisuOOOEIw74fT7++OKD
N1544oE7brjigjNOOOKA3+fljy8+eOOFJx6444YrLjjjhCMO+H0e/vjigzde
eOKBO2644oIzTjjigN/n5o8vPnjjhSceuOOGKy4444QjDvh9AH988cEbLzzx
wB03XHHBGSccccDvc/HHFx+88cITD9xxwxUXnHHCEQf8Pid/fPHBGy888cAd
N1xxwRknHHHA73PwxxcfvPHCEw/cccMVF5xxwhEH/BJ/fPHBGy888cAdN1xx
wRknHHHA77PzxxcfvPHCEw/cccMVF5xxwhEH/D4bf3zxwRsvPPHAHTdcccEZ
JxxxwO+z8scXH7zxwhMP3HHDFRecccIRB/w+C3988cEbLzzxwB03XHHBGScc
ccDvM/PHFx+88cITD9xxwxUXnHHCEQf8PhN/fPHBGy888cAdN1xxwRknHHHA
7zPyxxcfvPHCEw/cccMVF5xxwhEH/D4Df3zxwRsvPPHAHTdcccEZJxxxwO/T
88cXH7zxwhMP3HHDFRecccIRB/w+HX988cEbLzzxwB03XHHBGSccccDv0/LH
Fx+88cITD9xxwxUXnHHCEQf8Pg1/fPHBGy888cAdN1xxwRknHHHA71Pzxxcf
vPHCEw/cccMVF5xxwhEH/D4Vf3zxwRsvPPHAHTdcccEZJxxxwO9T8scXH7zx
whMP3HHDFRecccIRB/wif3zxwRsvPPHAHTdcccEZJxxxwO9T8McXH7zxwhMP
3HHDFRecccIRB/w+OX988cEbLzzxwB03XHHBGSccccDvk/HHFx+88cITD9xx
wxUXnHHCEQf8Pil/fPHBGy888cAdN1xxwRknHHHA75PwxxcfvPHCEw/cccMV
F5xxwhEH/D4xf3zxwRsvPPHAHTdcccEZJxxxwO8T8ccXH7zxwhMP3HHDFRec
ccIRB/w+IX988cEbLzzxwB03XHHBGSccccDvE/DHFx+88cITD9xxwxUXnHHC
EQf8Pj5/fPHBGy888cAdN1xxwRknHHHA7+PxxxcfvPHCEw/cccMVF5xxwhEH
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
Z5xwxAG/zR9ffPDGC088cMcNV1xwxglHHPD7zfzxxQdvvPDEA3fccMUFZ5xw
xAG/38QfX3zwxgtPPHDHDVdccMYJRxzw+4388cUHb7zwxAN33HDFBWeccMQB
v9/AH1988MYLTzxwxw1XXHDGCUcc8Pv1/PHFB2+88MQDd9xwxQVnnHDEAb9f
xx9ffPDGC088cMcNV1xwxglHHPD7tfzxxQdvvPDEA3fccMUFZ5xwxAG/X8Mf
X3zwxgtPPHDHDVdccMYJRxzw+9X88cUHb7zwxAN33HDFBWeccMQBv1/FH198
8MYLTzxwxw1XXHDGCUcc8PuV/PHFB2+88MQDd9xwxQVnnHDEAb9fwR9ffPDG
C088cMcNV1xwxglHHPD75fzxxQdvvPDEA3fccMUFZ5xwxAG/X8YfX3zwxgtP
PHDHDVdccMYJRxzw+6X88cUHb7zwxAN33HDFBWeccMQBv8UfX3zwxgtPPHDH
DVdccMYJRxzw+yX88cUHb7zwxAN33HDFBWeccMQBv4/ijy8+eOOFJx6444Yr
LjjjhCMO+P1i/vjigzdeeOKBO2644oIzTjjigN8v4o8vPnjjhSceuOOGKy44
44QjDvj9Qv744oM3XnjigTtuuOKCM0444oDfL+CPLz5444UnHrjjhisuOOOE
Iw74/Xz++OKDN1544oE7brjigjNOOOKA38/jjy8+eOOFJx6444YrLjjjhCMO
+P1c/vjigzdeeOKBO2644oIzTjjigN9H8scXH7zxwhMP3HHDFRecccIRB/w+
gj+++OCNF5544I4brrjgjBOOOOD3c/jjiw/eeOGJB+644YoLzjjhiAN+P5s/
vvjgjReeeOCOG6644IwTjjjg97P444sP3njhiQfuuOGKC8444YgDfj+TP774
4I0XnnjgjhuuuOCME4444Df544sP3njhiQfuuOGKC8444YgDfj+DP7744I0X
nnjgjhuuuOCME4444PfT+eOLD9544YkH7rjhigvOOOGIA34/jT+++OCNF554
4I4brrjgjBOOOOD3U/njiw/eeOGJB+644YoLzjjhiAN+P4U/vvjgjReeeOCO
G6644IwTjjjg95P544sP3njhiQfuuOGKC8444YgDfh/OH1988MYLTzxwxw1X
XHDGCUcc8PtJ/PHFB2+88MQDd9xwxQVnnHDEAb+fyB9ffPDGC088cMcNV1xw
xglHHPD7CfzxxQdvvPDEA3fccMUFZ5xwxAG/H88fX3zwxgtPPHDHDVdccMYJ
Rxzw+zD++OKDN1544oE7brjigjNOOOKA34/jjy8+eOOFJx6444YrLjjjhCMO
+P1Y/vjigzdeeOKBO2644oIzTjjigN+P4Y8vPnjjhSceuOOGKy4444QjDvgN
/vjigzdeeOKBO2644oIzTjjigN+P5o8vPnjjhSceuOOGKy4444QjDvj9KP74
4oM3XnjigTtuuOKCM0444oDfj+SPLz5444UnHrjjhisuOOOEIw74/Qj++OKD
N1544oE7brjigjNOOOKA3w/njy8+eOOFJx6444YrLjjjhCMO+P0w/vjigzde
eOKBO2644oIzTjjigN8P5Y8vPnjjhSceuOOGKy4444QjDvj9EP744oM3Xnji
gTtuuOKCM0444oDfD+aPLz5444UnHrjjhisuOOOEIw74/SD++OKDN1544oE7
brjigjNOOOKA3w/kjy8+eOOFJx6444YrLjjjhCMO+P0A/vjigzdeeOKBO264
4oIzTjjigN/3548vPnjjhSceuOOGKy4444QjDvh9P/744oM3XnjigTtuuOKC
M0444oDf9+WPLz5444UnHrjjhisuOOOEIw74df744oM3XnjigTtuuOKCM044
4oDf9+GPLz5444UnHrjjhisuOOOEIw74fW/++OKDN1544oE7brjigjNOOOKA
3/fijy8+eOOFJx6444YrLjjjhCMO+H1P/vjigzdeeOKBO2644oIzTjjigN/3
4I8vPnjjhSceuOOGKy4444QjDvh9d/744oM3XnjigTtuuOKCM0444oDfd+OP
Lz5444UnHrjjhisuOOOEIw74fVf++OKDN1544oE7brjigjNOOOKA33fhjy8+
eOOFJx6444YrLjjjhCMO+H1n/vjigzdeeOKBO2644oIzTjjigN934o8vPnjj
hSceuOOGKy4444QjDvh9R/744oM3XnjigTtuuOKCM0444oDfd+CPLz5444Un
HrjjhisuOOOEIw74fXv++OKDN1544oE7brjigjNOOOKA37fjjy8+eOOFJx64
44YrLjjjhCMO+DX++OKDN1544oE7brjigjNOOOKA37fljy8+eOOFJx6444Yr
LjjjhCMO+H0b/vjigzdeeOKBO2644oIzTjjigN+35o8vPnjjhSceuOOGKy44
44QjDvh9K/744oM3XnjigTtuuOKCM0444oDft+SPLz5444UnHrjjhisuOOOE
Iw74fQv++OKDN1544oE7brjigjNOOOKA3zfnjy8+eOOFJx6444YrLjjjhCMO
+H0z/vjigzdeeOKBO2644oIzTjjigN835Y8vPnjjhSceuOOGKy4444QjDvh9
E/744oM3XnjigTtuuOKCM0444oDfN+aPLz5444UnHrjjhisuOOOEIw74fSP+
+OKDN1544oE7brjigjNOOOKA3zfkjy8+eOOFJx6444YrLjjjhCMO+H0D/vji
gzdeeOKBO2644oIzTjjigN/X548vPnjjhSceuOOGKy4444QjDvhV/vjigzde
eOKBO2644oIzTjjigN/X448vPnjjhSceuOOGKy4444QjDvh9KH988cEbLzzx
wB03XHHBGSccccDv6/LHFx+88cITD9xxwxUXnHHCEQf8vg5/fPHBGy888cAd
N1xxwRknHHHA72vzxxcfvPHCEw/cccMVF5xxwhEH/D6EP7744I0Xnnjgjhuu
uOCME4444Pe1+OOLD9544YkH7rjhigvOOOGIA35fkz+++OCNF5544I4brrjg
jBOOOOD3Nfjjiw/eeOGJB+644YoLzjjhiAN+X50/vvjgjReeeOCOG6644IwT
jjjg99X444sP3njhiQfuuOGKC8444YgDfl+VP7744I0XnnjgjhuuuOCME444
4PfB/PHFB2+88MQDd9xwxQVnnHDEAb+vwh9ffPDGC088cMcNV1xwxglHHPD7
IP744oM3XnjigTtuuOKCM0444oBf4Y8vPnjjhSceuOOGKy4444QjDvh9IH98
8cEbLzzxwB03XHHBGSccccDvK/PHFx+88cITD9xxwxUXnHHCEQf8vhJ/fPHB
Gy888cAdN1xxwRknHHHA7yvyxxcfvPHCEw/cccMVF5xxwhEH/L4Cf3zxwRsv
PPHAHTdcccEZJxxxwO/L88cXH7zxwhMP3HHDFRecccIRB/y+HH988cEbLzzx
wB03XHHBGSccccDvy/LHFx+88cITD9xxwxUXnHHCEQf8vgx/fPHBGy888cAd
N1xxwRknHHHA70vzxxcfvPHCEw/cccMVF5xxwhEH/L4Uf3zxwRsvPPHAHTdc
ccEZJxxxwO9L8scXH7zxwhMP3HHDFRecccIRB/y+BH988cEbLzzxwB03XHHB
GSccccDvi/PHFx+88cITD9xxwxUXnHHCEQf8vhh/fPHBGy888cAdN1xxwRkn
HHHAL/PHFx+88cITD9xxwxUXnHHCEQf8vih/fPHBGy888cAdN1xxwRknHHHA
74vwxxcfvPHCEw/cccMVF5xxwhEH/L4wf3zxwRsvPPHAHTdcccEZJxxxwO8L
8ccXH7zxwhMP3HHDFRecccIRB/y+IH988cEbLzzxwB03XHHBGSccccDvC/DH
Fx+88cITD9xxwxUXnHHCEQf8Pj9/fPHBGy888cAdN1xxwRknHHHA7/Pxxxcf
vPHCEw/cccMVF5xxwhEH/D4vf3zxwRsvPPHAHTdcccEZJxxxwO/z8McXH7zx
whMP3HHDFRecccIRB/w+N3988cEbLzzxwB03XHHBGSccccDvA/jjiw/eeOGJ
B+644YoLzjjhiAN+n4s/vvjgjReeeOCOG6644IwTjjjg9zn544sP3njhiQfu
uOGKC8444YgDfp+DP7744I0XnnjgjhuuuOCME4444Jf444sP3njhiQfuuOGK
C8444YgDfp+dP7744I0XnnjgjhuuuOCME4444PfZ+OOLD9544YkH7rjhigvO
OOGIA36flT+++OCNF5544I4brrjgjBOOOOD3Wfjjiw/eeOGJB+644YoLzjjh
iAN+n5k/vvjgjReeeOCOG6644IwTjjjg95n444sP3njhiQfuuOGKC8444YgD
fp+RP7744I0XnnjgjhuuuOCME4444PcZ+OOLD9544YkH7rjhigvOOOGIA36f
nj+++OCNF5544I4brrjgjBOOOOD36fjjiw/eeOGJB+644YoLzjjhiAN+n5Y/
vvjgjReeeOCOG6644IwTjjjg92n444sP3njhiQfuuOGKC8444YgDfp+aP774
4I0XnnjgjhuuuOCME4444Pep+OOLD9544YkH7rjhigvOOOGIA36fkj+++OCN
F5544I4brrjgjBOOOOAX+eOLD9544YkH7rjhigvOOOGIA36fgj+++OCNF554
4I4brrjgjBOOOOD3yfnjiw/eeOGJB+644YoLzjjhiAN+n4w/vvjgjReeeOCO
G6644IwTjjjg90n544sP3njhiQfuuOGKC8444YgDfp+EP7744I0Xnnjgjhuu
uOCME4444PeJ+eOLD9544YkH7rjhigvOOOGIA36fiD+++OCNF5544I4brrjg
jBOOOOD3Cfnjiw/eeOGJB+644YoLzjjhiAN+n4A/vvjgjReeeOCOG6644IwT
jjjg9/H544sP3njhiQfuuOGKC8444YgDfh+PP7744I0XnnjgjhuuuOCME444
4Pdx+eOLD9544YkH7rjhigvOOOGIA34fhz+++OCNF5544I4brrjgjBOOOOD3
sfnjiw/eeOGJB+644YoLzjjhiAN+H4s/vvjgjReeeOCOG6644IwTjjjgF/jj
iw/eeOGJB+644YoLzjjhiAN+//ej//8/vvjgjReeeOCOG6644IwTjjjg93/4
44sP3njhiQfuuOGKC8444YgDfv+bP7744I0XnnjgjhuuuOCME4444Pe/+OOL
D9544YkH7rjhigvOOOGIA37/kz+++OCNF5544I4brrjgjBOOOOD3P/jjiw/e
eOGJB+644YoLzjjhiAN+H8MfX3zwxgtPPHDHDVdccMYJRxzw+2j++OKDN154
4oE7brjigjNOOOKA33/njy8+eOOFJx6444YrLjjjhCMO+P03/vjigzdeeOKB
O2644oIzTjjigN9/5Y8vPnjjhSceuOOGKy4444QjDvj9F/744oM3XnjigTtu
uOKCM0444oDff+aPLz5444UnHrjjhisuOOOEIw74/Sf++OKDN1544oE7brji
gjNOOOKA33/kjy8+eOOFJx6444YrLjjjhCMO+D3++OKDN1544oE7brjigjNO
OOKA33/gjy8+eOOFJx6444YrLjjjhCMO+P17/vjigzdeeOKBO2644oIzTjji
gN+/448vPnjjhSceuOOGKy4444QjDvj9W/744oM3XnjigTtuuOKCM0444oDf
v+GPLz5444UnHrjjhisuOOOEIw74/Wv++OKDN1544oE7brjigjNOOOKA37/i
jy8+eOOFJx6444YrLjjjhCMO+P1L/vjigzdeeOKBO2644oIzTjjigN+/4I8v
PnjjhSceuOOGKy4444QjDvj9c/744oM3XnjigTtuuOKCM0444oDfP+OPLz54
44UnHrjjhisuOOOEIw74/VP++OKDN1544oE7brjigjNOOOKA3z/hjy8+eOOF
Jx6444YrLjjjhCMO+P1j/vjigzdeeOKBO2644oIzTjjigN8/4o8vPnjjhSce
uOOGKy4444QjDvj9Q/744oM3XnjigTtuuOKCM0444oDfP+CPLz5444UnHrjj
hisuOOOEIw74/X3++OKDN1544oE7brjigjNOOOKA39/jjy8+eOOFJx6444Yr
LjjjhCMO+P1d/vjigzdeeOKBO2644oIzTjjigN/f4Y8vPnjjhSceuOOGKy44
44QjDvj9bf744oM3XnjigTtuuOKCM0444oDf3+KPLz5444UnHrjjhisuOOOE
Iw74/U3++OKDN1544oE7brjigjNOOOKA39/gjy8+eOOFJx6444YrLjjjhCMO
+P11/vjigzdeeOKBO2644oIzTjjigN9f448vPnjjhSceuOOGKy4444QjDvj9
Vf744oM3XnjigTtuuOKCM0444oDfX+GPLz5444UnHrjjhisuOOOEIw74/WX+
+OKDN1544oE7brjigjNOOOKA31/ijy8+eOOFJx6444YrLjjjhCMO+F3++OKD
N1544oE7brjigjNOOOKA31/kjy8+eOOFJx6444YrLjjjhCMO+P0F/vjigzde
eOKBO2644oIzTjjigN+f548vPnjjhSceuOOGKy4444QjDvj9Of744oM3Xnji
gTtuuOKCM0444oDfn+WPLz5444UnHrjjhisuOOOEIw74/Rn++OKDN1544oE7
brjigjNOOOKA35/mjy8+eOOFJx6444YrLjjjhCMO+P0p/vjigzdeeOKBO264
4oIzTjjigN+f5I8vPnjjhSceuOOGKy4444QjDvj9Cf744oM3XnjigTtuuOKC
M0444oDfH+ePLz5444UnHrjjhisuOOOEIw74/TH++OKDN1544oE7brjigjNO
OOKA3x/ljy8+eOOFJx6444YrLjjjhCMO+P0R/vjigzdeeOKBO2644oIzTjji
gN8f5o8vPnjjhSceuOOGKy4444QjDvgd/vjigzdeeOKBO2644oIzTjjigN8f
4o8vPnjjhSceuOOGKy4444QjDvj9Qf744oM3XnjigTtuuOKCM0444oDfH+CP
Lz5444UnHrjjhisuOOOEIw74/X7++OKDN1544oE7brjigjNOOOKA3+/jjy8+
eOOFJx6444YrLjjjhCMO+P1e/vjigzdeeOKBO2644oIzTjjigN/v4Y8vPnjj
hSceuOOGKy4444QjDvj9bv744oM3XnjigTtuuOKCM0444oDf7+KPLz5444Un
HrjjhisuOOOEIw74/U7++OKDN1544oE7brjigjNOOOKA3+/gjy8+eOOFJx64
44YrLjjjhCMO+P12/vjigzdeeOKBO2644oIzTjjigN9v448vPnjjhSceuOOG
Ky4444QjDvj9Vv744oM3XnjigTtuuOKCM0444oDfb+GPLz5444UnHrjjhisu
OOOEIw74bf744oM3XnjigTtuuOKCM0444oDfb+aPLz5444UnHrjjhisuOOOE
Iw74/Sb++OKDN1544oE7brjigjNOOOKA32/kjy8+eOOFJx6444YrLjjjhCMO
+P0G/vjigzdeeOKBO2644oIzTjjigN+v548vPnjjhSceuOOGKy4444QjDvj9
Ov744oM3XnjigTtuuOKCM0444oDfr+WPLz5444UnHrjjhisuOOOEIw74/Rr+
+OKDN1544oE7brjigjNOOOKA36/mjy8+eOOFJx6444YrLjjjhCMO+P0q/vji
gzdeeOKBO2644oIzTjjigN+v5I8vPnjjhSceuOOGKy4444QjDvj9Cv744oM3
XnjigTtuuOKCM0444oDfL+ePLz5444UnHrjjhisuOOOEIw74/TL++OKDN154
4oE7brjigjNOOOKA3y/ljy8+eOOFJx6444YrLjjjhCMO+C3++OKDN1544oE7
brjigjNOOOKA3y/hjy8+eOOFJx6444YrLjjjhCMO+H0Uf3zxwRsvPPHAHTdc
ccEZJxxxwO8X88cXH7zxwhMP3HHDFRecccIRB/x+EX988cEbLzzxwB03XHHB
GSccccDvF/LHFx+88cITD9xxwxUXnHHCEQf8fgF/fPHBGy888cAdN1xxwRkn
HHHA7+fzxxcfvPHCEw/cccMVF5xxwhEH/H4ef3zxwRsvPPHAHTdcccEZJxxx
wO/n8scXH7zxwhMP3HHDFRecccIRB/w+kj+++OCNF5544I4brrjgjBOOOOD3
EfzxxQdvvPDEA3fccMUFZ5xwxAG/n8MfX3zwxgtPPHDHDVdccMYJRxzw+9n8
8cUHb7zwxAN33HDFBWeccMQBv5/FH1988MYLTzxwxw1XXHDGCUcc8PuZ/PHF
B2+88MQDd9xwxQVnnHDEAb/JH1988MYLTzxwxw1XXHDGCUcc8PsZ/PHFB2+8
8MQDd9xwxQVnnHDEAb+fzh9ffPDGC088cMcNV1xwxglHHPD7afzxxQdvvPDE
A3fccMUFZ5xwxAG/n8ofX3zwxgtPPHDHDVdccMYJRxzw+yn88cUHb7zwxAN3
3HDFBWeccMQBv5/MH1988MYLTzxwxw1XXHDGCUcc8Ptw/vjigzdeeOKBO264
4oIzTjjigN9P4o8vPnjjhSceuOOGKy4444QjDvj9RP744oM3XnjigTtuuOKC
M0444oDfT+CPLz5444UnHrjjhisuOOOEIw74/Xj++OKDN1544oE7brjigjNO
OOKA34fxxxcfvPHCEw/cccMVF5xxwhEH/H4cf3zxwRsvPPHAHTdcccEZJxxx
wO/H8scXH7zxwhMP3HHDFRecccIRB/x+DH988cEbLzzxwB03XHHBGSccccBv
8McXH7zxwhMP3HHDFRecccIRB/x+NH988cEbLzzxwB03XHHBGSccccDvR/HH
Fx+88cITD9xxwxUXnHHCEQf8fiR/fPHBGy888cAdN1xxwRknHHHA70fwxxcf
vPHCEw/cccMVF5xxwhEH/H44f3zxwRsvPPHAHTdcccEZJxxxwO+H8ccXH7zx
whMP3HHDFRecccIRB/x+KH988cEbLzzxwB03XHHBGSccccDvh/DHFx+88cIT
D9xxwxUXnHHCEQf8fjB/fP9f13NOJAYIAAAQCUhAAhKQgATqXB7yXGokIAEJ
SEACUpCQNrPllosP3njhiQfuuOGKC8444YgDfn/544sP3njhiQfuuOGKC844
4YgDfp/88cUHb7zwxAN33HDFBWeccMQBvz/88cUHb7zwxAN33HDFBWeccMQB
v9/88cUHb7zwxAN33HDFBWeccMQBv1/88cUHb7zwxAN33HDFBWeccMQBv5/8
8cUHb7zwxAN33HDFBWeccMQBv84fX3zwxgtPPHDHDVdccMYJRxzw+8EfX3zw
xgtPPHDHDVdccMYJRxzw+84fX3zwxgtPPHDHDVdccMYJRxzw+8YfX3zwxgtP
PHDHDVdccMYJRxzw+8ofX3zwxgtPPHDHDVdccMYJRxzw++CPLz5444UnHrjj
hisuOOOEIw74feGPLz5444UnHrjjhisuOOOEIw7/+R8RllQU
       "],
       VertexColors->None]}, 
     {GrayLevel[0], PointSize[0.002777777777777778], AbsoluteThickness[1.6], 
      Opacity[0.2]}}, 
    {RGBColor[1, 0, 0], PointSize[0.002777777777777778], AbsoluteThickness[
     1.6], 
     {RGBColor[1, 0, 0], PointSize[0.002777777777777778], AbsoluteThickness[
      1.6], Opacity[0.2], PolygonBox[CompressedData["
1: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
etMyeMjPJ4mDaXmC5fqx4Mo4WoArtf36ZCatgPvfl3xeRCvhhe1rWa+lVXBE
r8ZNImg1HCNp3yWW1liWL3IbrKO1cHDs0KkXaR3svmrSsju0HjbXDd7+lDbA
+8auS3gv9sMtR0bpS8V+y/4q6B5XrML+o5iPTsv8VIeWwh7Ln1VqSsvgBZ5f
Gnag5XD41SouvWgB3lzadOBAWgHPf959si+thN0Wjlgyg1bBpow5mgW0Gl6X
uSF+Da2BKyw7dHEbrYWnvrn8cD+tgxPKvSw6TuvhnJyyCum0Ac4b3aDBLdoI
39F075RLm+DoFWO9C8T+RLz+Gy9TfhP74fz5+xaVr8p+ePSyi1uktBw+1vXV
oca0YFk/vuKFtrQCLr3d8kF3Wgl/ODi4sD+tgtM6BJUfTavhWXP31J9Ga+Cf
k/XyIFoLT6363msVrYMTp0knbqX18L3gbgujaQOc1XVKeCJtTLT8fjY87hxt
gic8SU27TkuO4Xx99k3OQ1oK+w6o/fG12A9Ha9zKfRH74fMbA+tJqrEfTnKN
6lCTVsAr9t7ybEgr4Wa6X+Nb0yo4ZkmbBa60Gv5c6rfZk9bADVpuPTiC1sIO
Na6cn0zrLMd76Hu2itbDu7+0+hBCG2C7rxMk4bQR9o+PsI+iTXB4rdvtE2jJ
cVxPtinveZaWworf3cZn0jL4U8j84Pu0/LhlPp+46ZXYD8cceBtbIvbDJwTZ
+T9iP6zZMS67WnX2w3327n5fn1bDV0Y8+NeC1sB1M2rbd6G1sPzt0Pb9aB3c
MG2Lhw+thx/3y/JT0gZ4/OqawXNoI6wLGrppOW2Cs+tti91IS5Jw/px3/1wk
LU2ynG/tsg/TMvi729j3p2k57H4q5t8VWoBHP3ttl00r4C5nW7V/SSvhl54q
j2KxHx668azfb7Ef3rDqX1CVGuyHN7btv8me1sI+m7bFOtE62Bj97FxnWg+7
THXOdqcNlu2/mPd+KG2E21e/+G88bYLvF1e1D6QlJzCfWTOm/VJaCgfcOeyx
npbBY29+99tFy+GaSz2C42gBDn2xc1MyrYDTSwti9bQSTrniej6LVsHz+2zK
fk6r4U8LXrz/KPbDrcd3kvwU+2Fn81p7q5rsh/M9n7e3pfXwOO9Ons1pA7zz
3/rxHWkjvHmmMbg3bYKFda6bB9MSnVk4OWbbwXG0FDbmfTw/k5bBt+w8chbR
cnhuBe2HMFqADQd/SyJoBVz8Y3S9WFoJZ/w73UFHq+ARaXW8LtJqeF/reRPu
0Bp4/2DDgqe0Fh7rKA9/L/bDWUmauFKxHzYXfU6rWIv98NMXw+/XoY3w/NCU
jzLaBOvz6pfvQEtO4vry44r6vWgpvDIxXz6QlsGfmvTv70vLYWn/pIkzaAEu
aG67aAGtgOedWr5lDa2Ej5e+ObSNVsExxYMv7KfVsBB59sFxWgNHlDYtSqO1
8B7r8Aq3aB08OMvskEvr4dNe0zoViP3wzeAc729iP7xlpDCpvJT9cLmPSYul
tCTZLDh2aqxpTEvhr+22xLelZfC8vL8Xu9NyeJ+getSfFuDg0fnFo2gF/KPp
yErTaCXspL3RMIhWwZKcni6raDUcdvbkwK20Bj6taDElmtbC4dHRSxNpHSyN
sdl+jtbDPXw2J1ynDZbl5ytefkgb4c0PV+S+FvvhE3E/Sj6L/afMwpIW860k
tdkPfxxf3LgmLYPL95/ZpSEthy+9fTu4NS3ATbtOmeZKK+BWPV8t96SV8INv
EyNG0Cq4+aSXiZNpNWy3amKGitbAx0YYn4bQWvjts0lfNtM6WG/3pkoUrYd7
VJrRNIE2wGPiP7qepY2W7f+Zo8ikTXBw5W8z7tOS02YhKGPJyldiPyx1kewu
EfvhQWPWJf0R+2Fnea1r1eqwH96ftjuvPq2Az/ySfW9BK2H/4qPVu9AqOHXH
f479aDV8sFjfw4fWwG1+DxqupLXw4PQnAXNoHVyt44zVy2k9PNn3+56NtAH2
+S/0ZCRthF9crXvzMG2Cy1nHGU/TkjNm4cJfF/MVWgrXSbhWK5uWwX8r+7Z4
ScvhlfWK3IrFfnhv3spRv8V+2HuUzZwqddkPb1mdEGZPq2D/yb2jnWg1nPv9
4enOtAZ+1nP2HXdaC8/vWunNUFoHR7+N/j2e1sN+Xl3rBtIG+LhfduultNGy
f6fAPutpE1wh1mrsLlqSYhascw7Oi6OlcMwZYUMyLYMzBr3Q6mk5vGT38tQs
WoAv7WxgeE4r4O1eae8+iv1w6bFx/8xiP/w2s8zOyob98JTtMe1taQ08p467
Z3NaC1fyfDO+I62DW7Vbv6A3rYcfX28bPpg2wHXtcuLG0UbLcvvF6TNpU4rl
frrGDxbRkrMYj7pcKwyjpfBknzkVImgZPLiZfYNYWg5fOaTvpKOFs5b7fQIG
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
h/pE0ia4eK5f4GpaUhvvP/tr/nZaCl9IS9qSTMvgdcMGHz1Jy2FFys/Mq7QA
lzuxJ/8+rYD3TvOxNtJKuMuTX40+i/3wGVNy9z9iP9zy/LARVUPYD6/qaj3L
gdbCTyYeX9eM1sG1PCYc6kTrYbeHtW/0oQ2wb+3rbxS00bK81hF/A2kT3HN/
y7rTaYkdxnvml50W0lL4+R+NIoaWwauOek7bSsth2X+/V+6jBTip7dGk47QC
rvk99NJlWglPmN7oxT1aBe+Oe/ojh1bD11Qa209iP2z47e3yS+yHr7paD6gc
yn54p/Olifa0Hh57ZcFSZ9oAW9VyTehAG+E10pIzAm2Cf+uPPvKhJXWwvpxU
prG0FF7RqV31qbQMTvz5ufl8Wg5rp6b1XUkL8FKNKmgLrYD7hnRYmEQr4fxP
JXFHaRU83fnMsUu0Gn5UfdHdLFoD19svfHxBa+HepgoVP4r9sFdhRuNSsR9u
u3Vjz4qT2A9/LR41yo42whutnOY40SbYVv9RI6cl9mYhrN2JFHdaCh/0XXxr
EC2DL8m834+m5fDRPXaSyTQ2HmHJY2O9CFoBN08/4rqcVsKHBy8cuolWwZU2
eYcl0mrYPcZhdRqtgX3l+fsv0Fq466ozVzJoHWzWxLzKpvXwpgFjfuWJ/XD5
k23tf4j99pbzNUkH68nsh6fsfDTYlpb8h/1N3YOTZbQUbum1eLkLLYNvNvVP
7EHL4Z4nW10YQAvw8u9W2SNpBZyUm10SQivhjauOSefQKnj4i9Vtomk1/OnV
xP4baA08dJMQvJvWwmtL66mP0Dp4m01p/DlaD89+/Oj0bdoAywYfe/iUNsI7
52i+fBD74XyfsGolYr8D1le2T/NyU9gPf6rdrq+UlsF7y2oGNaTlcKudXxe0
oQV4YcHDuG60Ao7PO3WsP62EV8TtuDucVjlYvq9Z/DGYVsNXKgZXnEVr4Jq3
vJ2W0lq4RTe5+3paB1cL+G90Aq2Hz8jL5hymDbDLybwN6bQRnv7RcOQmbYLn
GM7efkxL6uL8IXTfh3diP/wiVWP1TeyHuyYvaiCZyn44QDHZzYYW4P6Hhg+r
Tyvg0hMeM1vRSniGquParrQKPvDS6WA/Wm2x2fa6P62Bp94s/2Y8rYVNnt//
qGgd3H1OnsMSWm+Z/7DnndbSBrhObpYinjbCyc2vTDtImyzLV/f0qtO0xNEs
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
+knshx0Dhzz9JfbD5/Lt/lWqzn64ed0XTerTJlhZesi7OS25ZxamhqlmdKSl
cPfk7hv70DL48RbrUwpaDns2zXkwjhbgJWN3m2fRCnixx4wGy2il5f33unhE
0ir4YXWbydtoNdzpx/218bQGDog6mHia1sIDb883XKZ1sCTVq/QurYdXDqlX
/wVtgG9EF/b4KPbD99Xp43+K/fBhR81/tjXYn2sW+kyYdLguLYX3jeh2uxkt
gzNKqn9uT8vhpJ4FtTxoAR7bPr3zUFoBZ+fG+AfSStiq8aywmbQK/mnvtX8J
rYbPXGx4PYLWwB1rmAu30Fo4pMr9agdpHTz/9Il2p2g93Kniej89bYBTbaYv
uUMbYfNJ793PaBP829b5cpHYf98sXKxSoaBM7Ifdz+XbVpSyHw6tc62NHS2H
lzrEK5rSAtwpa838drQCPt5y+nZ3Wgm/bj8ofTCtgnPftTUG0Gp4Zf86FWbQ
GrhwhLnFYloLV6/2cuAaWgd/UmUEx9J6eI06MWY/bYAf94hN1dFGuGD/8qcX
aRN8LGXyvyxa8gDzg/lDmz6lpbDyRbd+hWI/PKS02cwfYj/8LUW6ybom++Fh
Tf+cqk0r4Mk9ix42ppWwW7m8n21pFXxi7vWGvWk1/HpDSp9BtAbO8ouf4k9r
4Rm3tqybRuvg9PdrkhbSevjK6cX3VtMGeGmrmd8300b43aBxDvtoE2zt6Nv7
BC15iN+PWO8JF2gp7Heux5rbtAxeG9Xu6GNaDs+ydbnzTuyHy7VrVPJN7If7
WterW6EW++HO4TW616JV8GOd7TgZrYZbrrVa5UZr4FZV/sT3pLXwg25lt3xo
HSyvU/ppNK2Hu8SZak6lDXDR7U+dFtBG2Cfhw5j/aBM8sn1RaDQteYT5y9TC
fXtp6SPL/S0KM47TMnhJbmHheVoOt63yoVomLcCbij+2y6MV8PbQz35vxX7Y
J61kSanYDx/Y8323VW32w4fkvy5Lac0jy/1SJG8b0lpYO8qmsiutg7d9rOrW
g9bDHV3r+A6gDfBie6eFo2gjrDzZLG4ybYKLS10vzqMleWZB9qbL65W0FP4e
1sdGQ8tgVcbgVntoObwxdcyQRFqAh/pNCTlHK+BTe+ZtvUkr4bSYlece0ip4
XEfNizdiP3xIvdfqq9hvWf7iE83L1WE/XN9J71OD1sEeM3PmNKD1cOUp+Ztb
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
L5YZO8XSJnigf/cxx2nJKMxXO29deZGWwr8vfzudQsvgt5+9Mp/Qctgu+bBZ
Di3ASYKZk0nsh0+FjPX7K/bD5d2uLq6xkv1wXEKjo41oNRyfMd/QmtbAlnte
lrrSWviadY/mHrQOTmsV6z2c1sOd8ssjx9MGuMBv3P6ZtBGuGnLz7mLaBM9q
7li4jpYEYLyxem3j3bQUHrK1oP8xWgZf9xwxI5GWw8sOX9lxmxbg3ccdkjNo
BWw5cm2+kVbC904W2haI/XB2/Gj3P2I/7DksZXL1VeyHK2udNQ1pLSzdsftS
K1oHz3Kt+r4LrYcdloTX6E8b4JYz3nbxpY3wgqo+45S0CbbzvLJmBi0JLBNs
5G3PLqKlsH/yrtdraRmcX1bNfBcthx9kLehwlBbgP5O/jrxAK+CFu8Yuu0Ur
Ya+Ix/GPaRUcXNz/6VtaDd9zuPTnm9gPL/rVvlW52F+xvfBDCqvV7IfvbG+4
oAGth8dM0BxypA2we6bFw860EQ75b+mvvrQJzr5c0mwYLRmN+Wjr8IHjaCkc
1+tr+HRaBheXT96zkJbDmyfkpETTAjw7fGzBDloB72nzukEcrYSto0f1PU+r
4Fua56E3aTWcLIzYZqA1sPmup9ezaS2s2eWX91Xsh8f2fVb7t9gPz9rq71Zt
Dfvhe+szJ9anjfDkDqM3tqRNsMe87IsutGQMjs+04Hd9aCn8sMonKwUtgyM9
wzqPpeWwslNhUBgtwOtS5q1eQCvgUokkYQ2thI9+WP1qO62CY1TSKkdoNXzr
8K7252gNLF/WfGQyrYWzzU+r02kdfL9T9/g3tB4uskh58kXsh8esHPanVOyH
K53IdrSMZj+cOy9MUY+WBOF4F5TNb0FL4fHWaw91omVwyZOGDwVaDj/sG/9r
CC3ArwPcZEG0AnZs+HBgKK2ET6jHzZ5Pq+AQTeGe1bQaVnqturON1sCbjzUy
HaK18G/dmYZnaR28d7xHPz2th+defh32iDbAa66Eb8+ijXDGRCt9vtgPKxIP
fi4R+8difqxzs7VYy37457BnPevSMrjOnpmTm9NyOHSjlaYjLcC/Wsdd6k0r
4Iuhfd/70Eo43v9tjTG0Cn78eZHrNFoNt2/ZWDmP1sCXLS9Hr6K18PyYgHMx
tK7i+e+WZh2k9fCGw7urJtAG+F3rnvIbtBGeMiI74CFtgpu0XRb1mpaMw/lx
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
hWZzyPa4wPqA90evIjuw77/Xm7aTXbjpoJ/XD5J9cOoFyf+eI/vhXP9mK3iH
LIzH6/my3PK51w+XfV7D+OL1w+XWt9oadwv1w1OT9bklkhW4QMZxcbKTVTj4
8sLCRcga3Kzg9lYVyTr8oMjJ8fXIBrz7zv3trcgmfKvglztdyRZcO3eK+IPJ
Nhz3VN5i48kOnDhFtbYm2YXb/2o3aSXZB/83N9TeRvbDUe68+wfIwgSMRyPt
hOfIIjy7+uXit8kS3Hzo2/bPvH64Y9NkUz97/XDk9YJ74mylfrjF7/qPUpE1
uMLl3kmykXW4e+2wUoXJBnyv686QCmQTnl/42vS6ZAtesPRrxD9kG76/M2NU
F7IDd+tTJfkgsguXcTuXHUf2wfXvT+s0m+yH14TZYSvIwkS83724vW8rWYSz
vfwbvZ8swdXM/KnOkmV4/eOmFW6RFbjBrZFdn3r9cKnBG8xPXj/87/6rB4Vt
1A+fXf/7eUqyAQ8uXzAoK9mEQwa3qlyIbMHT/pnUozzZhr883jOvDtmBl4vR
R1qSXXjiy6DXnck+eHP3GukGkv0TA/M/DlYMsjApRtnRbkPvWWQRnuneWbic
LMEb3iY7voUswz93Vn23j6zAszINznCGrMLtCm+ucZOswZ2fPeoX7fXDG2ul
W/rR64dzNmp46q/XD9/7OcGfYjv1w+eaHsqchWzDnxp/rV2Q7MAtPhcdWI7s
wu+q9FxRm+yDjxRfd7YF2Q+fufD4cyeyMBnjqRRZsg8gi/Dor63rjyVLcMFJ
C4eEkWU4+aEb1jKyAudamubiZrIK69mbf99L1uCPDeblPE3W4Q3ZbzS6QTZg
c2m64U/IJrz9UKt1fq8f/jlp6ZU/Xn/g8X17GJN8B/XDxVPmzJuZ7MLBl7o1
LUD2wXLJbaPKkv3wcOXTxlpkYQoe35dy15uTRXipavzpSJbgQc3PFtDJMjz6
t9hyDFmB9zRua8wkq3CmOuu2LiVr8I7n729tIuvwgCIV4u4lG3DHzJOLnCKb
8Bj7WuvrZAs+8zb7xCiyDVd2++784PXDj9seuvfb64e3zUyWMPlO6ofXdW1X
PBPZH9jes63t85OFqTFKmhS/p5Qhi/CM+4331CRLcKGmqx81I8vwl75fknQk
K/CL4nVL9yercJwVy7XRZA2uufPjjBlkHd7Ro87eJWQDrnJuxZONZBP+6n5J
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
z+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8yB8WKsfmaX2WG2mS1mk9lg1pk1
ZpVZYZaZJWaRWWAOHC/E6md2mR1mm9liNpkNZp1ZY1aZFWaZWWIWmQXmwPFi
rH5ml9lhtpktZpPZYNaZNWaVWWGWmSVmkVlgDnxeEKuf2WV2mG1mi9lkNph1
Zo1ZZVaYZWaJWWQWmAOfF8XqZ3aZHWab2WI2mQ1mnVljVpkVZplZYhaZBebA
54Wx+pldZofZZraYTWaDWWfWmFVmhVlmlphFZoE58HlxrH5ml9lhtpktZpPZ
YNaZNWaVWWGWmSVmkVlgDnxfEKuf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQW
mAPfF8XqZ3aZHWab2WI2mQ1mnVljVpkVZplZYhaZBebA94Wx+pldZofZZraY
TWaDWWfWmFVmhVlmlphFZoE58H1xrH5ml9lhtpktZpPZYNaZNWaVWWGWmSVm
kVlgDpwvEKuf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmAPni8TqZ3aZHWab
2WI2mQ1mnVljVpkVZplZYhaZBebA+UKx+pldZofZZraYTWaDWWfWmFVmhVlm
lphFZoE5cL5YrH5ml9lhtpktZpPZYNaZNWaVWWGWmSVmkVlgDpwvGKuf2WV2
mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmAPni8bqZ3aZHWab2WI2mQ1mnVljVpkV
ZplZYhaZBebA+cKx+pldZofZZraYTWaDWWfWmFVmhVlmlphFZoE5cL54rH5m
l9lhtpktZpPZYNaZNWaVWWGWmSVmkVlgDlwvEKuf2WV2mG1mi9lkNph1Zo1Z
ZVaYZWaJWWQWmAPXi8TqZ3aZHWab2WI2mQ1mnVljVpkVZplZYhaZBebA9UKx
+pldZofZZraYTWaDWWfWmFVmhVlmlphFZoE5cL1YrH5ml9lhtpktZpPZYNaZ
NWaVWWGWmSVmkVlgDlwvGKuf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmAPX
i8bqZ3aZHWab2WI2mQ1mnVljVpkVZplZYhaZBebA9cKx+pldZofZZraYTWaD
WWfWmFVmhVlmlphFZoE5cL14rH5ml9lhtpktZpPZYNaZNWaVWWGWmSVmkVlg
DswXEKuf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmAPzRcTqZ3aZHWab2WI2
mQ1mnVljVpkVZplZYhaZBebAfCGx+pldZofZZraYTWaDWWfWmFVmhVlmlphF
ZoE5MF9MrH5ml9lhtpktZpPZYNaZNWaVWWGWmSVmkVlgDswXFKuf2WV2mG1m
i9lkNph1Zo1ZZVaYZWaJWWQWmAPzRcXqZ3aZHWab2WI2mQ1mnVljVpkVZplZ
YhaZBebAfGGx+pldZofZZraYTWaDWWfWmFVmhVlmlphFZoE5MF9crH5ml9lh
tpktZpPZYNaZNWaVWWGWmSVmkVlgDswXGKuf2WV2mG1mi9lkNph1Zo1ZZVaY
ZWaJWWQWmAPzRcbqZ3aZHWab2WI2mQ1mnVljVpkVZplZYhaZBebAfKGx+pld
ZofZZraYTWaDWWfWmFVmhVlmlphFZoE5MF9srH5ml9lhtpktZpPZYNaZNWaV
WWGWmSVmkVlgDswXHKuf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmAPzRcfq
Z3aZHWab2WI2mQ1mnVljVpkVZplZYhaZBebAfOGx+pldZofZZraYTWaDWWfW
mFVmhVlmlphFZoE5MF98rH5ml9lhtpktZpPZYNaZNWaVWWGWmSVmkVlgDqwX
EKuf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmAPrRcTqZ3aZHWab2WI2mQ1m
nVljVpkVZplZYhaZBebAeiGx+pldZofZZraYTWaDWWfWmFVmhVlmlphFZoE5
sF5MrH5ml9lhtpktZpPZYNaZNWaVWWGWmSVmkVlgDqwXFKuf2WV2mG1mi9lk
Nph1Zo1ZZVaYZWaJWWQWmAPrRcXqZ3aZHWab2WI2mQ1mnVljVpkVZplZYhaZ
BebAemGx+pldZofZZraYTWaDWWfWmFVmhVlmlphFZoE5sF5crH5ml9lhtpkt
ZpPZYNaZNWaVWWGWmSVmkVlgDqwXGKuf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJ
WWQWmAPrRcbqZ3aZHWab2WI2mQ1mnVljVpkVZplZYhaZBebAeqGx+pldZofZ
ZraYTWaDWWfWmFVmhVlmlphFZoE5sF5srH5ml9lhtpktZpPZYNaZNWaVWWGW
mSVmkVlgDqwXHKuf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmAPrRcfqZ3aZ
HWab2WI2mQ1mnVljVpkVZplZYhaZBebAeuGx+pldZofZZraYTWaDWWfWmFVm
hVlmlphFZoE5sF58rH5ml9lhtpktZpPZYNaZNWaVWWGWmSVmkVlg9i9l/cwu
s8NsM1vMJrPBrDNrzCqzwiwzS8wis8DsX8L6mV1mh9lmtphNZoNZZ9aYVWaF
WWaWmEVmgdm/mPUzu8wOs81sMZvMBrPOrDGrzAqzzCwxi8wCs38R62d2mR1m
m9liNpkNZp1ZY1aZFWaZWWIWmQVm/0LWz+wyO8w2s8VsMhvMOrPGrDIrzDKz
xCwyC8z+Bayf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmP3zWT+zy+ww28wW
s8lsMOvMGrPKrDDLzBKzyCww++exfmaX2WG2mS1mk9lg1pk1ZpVZYZaZJWaR
WWD2z2X9zC6zw2wzW8wms8GsM2vMKrPCLDNLzCKzwOyfw/qZXWaH2Wa2mE1m
g1ln1phVZoVZZpaYRWaB2W+yfmaX2WG2mS1mk9lg1pk1ZpVZYZaZJWaRWWD2
z2b9zC6zw2wzW8wms8GsM2vMKrPCLDNLzCKzwOyfxfqZXWaH2Wa2mE1mg1ln
1phVZoVZZpaYRWaB2R/G+pldZofZZraYTWaDWWfWmFVmhVlmlphFZoHZP5P1
M7vMDrPNbDGbzAazzqwxq8wKs8wsMYvMArN/ButndpkdZpvZYjaZDWadWWNW
mRVmmVliFpkFZv901s/sMjvMNrPFbDIbzDqzxqwyK8wys8QsMgvM/mmsn9ll
dphtZovZZDaYdWaNWWVWmGVmiVlkFpj9U1k/s8vsMNvMFrPJbDDrzBqzyqww
y8wSs8gsMPunsH5ml9lhtpktZpPZYNaZNWaVWWGWmSVmkVlg9k9m/cwus8Ns
M1vMJrPBrDNrzCqzwiwzS8wis8Dsn8T6mV1mh9lmtphNZoNZZ9aYVWaFWWaW
mEVmgdk/kfUzu8wOs81sMZvMBrPOrDGrzAqzzCwxi8wCs38C62d2mR1mm9li
NpkNZp1ZY1aZFWaZWWIWmQVm/3jWz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwy
C8z+cayf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmP0G62d2mR1mm9liNpkN
Zp1ZY1aZFWaZWWIWmQVm/1jWz+wyO8w2s8VsMhvMOrPGrDIrzDKzxCwyC8z+
Mayf2WV2mG1mi9lkNph1Zo1ZZVaYZWaJWWQWmP2jWT+zy+ww28wWs8lsMOvM
GrPKrDDLzBKzyCww+0exfmaX2WG2mS1mk9lg1pk1ZpVZYZaZJWaRWWD2j2T9
zC6zw2wzW8wms8GsM2vMKrPCLDNLzCKzwOwfwfqZXWaH2Wa2mE1mg1ln1phV
ZoVZZpaYRWaB2T+c9TO7zA6zzWwxm8wGs86sMavMCrPMLDGLzP/H9VwFAAAD
iACdbqab4XRNt9s5eTjTzXQz3QwnTk7c6TPdTDfTzXR39/Sd/vY+3+cL+P0Q
/vjigzdeeOKBO2644oIzTjjigN8P5o8vPnjjhSceuOOGKy4444QjDvj9IP74
4oM3XnjigTtuuOKCM0444oDfD+SPLz5444UnHrjjhisuOOOEIw74/QD++OKD
N1544oE7brjigjNOOOKA3/fnjy8+eOOFJx6444YrLjjjhCMO+H0//vjigzde
eOKBO2644oIzTjjigN/35Y8vPnjjhSceuOOGKy4444QjDvh1/vjigzdeeOKB
O2644oIzTjjigN/34Y8vPnjjhSceuOOGKy4444QjDvh9b/744oM3XnjigTtu
uOKCM0444oDf9+KPLz5444UnHrjjhisuOOOEIw74fU/++OKDN1544oE7brji
gjNOOOKA3/fgjy8+eOOFJx6444YrLjjjhCMO+H13/vjigzdeeOKBO2644oIz
TjjigN93448vPnjjhSceuOOGKy4444QjDvh9V/744oM3XnjigTtuuOKCM044
4oDfd+GPLz5444UnHrjjhisuOOOEIw74fWf++OKDN1544oE7brjigjNOOOKA
33fijy8+eOOFJx6444YrLjjjhCMO+H1H/vjigzdeeOKBO2644oIzTjjigN93
4I8vPnjjhSceuOOGKy4444QjDvh9e/744oM3XnjigTtuuOKCM0444oDft+OP
Lz5444UnHrjjhisuOOOEIw74Nf744oM3XnjigTtuuOKCM0444oDft+WPLz54
44UnHrjjhisuOOOEIw74fRv++OKDN1544oE7brjigjNOOOKA37fmjy8+eOOF
Jx6444YrLjjjhCMO+H0r/vjigzdeeOKBO2644oIzTjjigN+35I8vPnjjhSce
uOOGKy4444QjDvh9C/744oM3XnjigTtuuOKCM0444oDfN+ePLz5444UnHrjj
hisuOOOEIw74fTP++OKDN1544oE7brjigjNOOOKA3zfljy8+eOOFJx6444Yr
LjjjhCMO+H0T/vjigzdeeOKBO2644oIzTjjigN835o8vPnjjhSceuOOGKy44
44QjDvh9I/744oM3XnjigTtuuOKCM0444oDfN+SPLz5444UnHrjjhisuOOOE
Iw74fQP++OKDN1544oE7brjigjNOOOKA39fnjy8+eOOFJx6444YrLjjjhCMO
+FX++OKDN1544oE7brjigjNOOOKA39fjjy8+eOOFJx6444YrLjjjhCMO+H0o
f3zxwRsvPPHAHTdcccEZJxxxwO/r8scXH7zxwhMP3HHDFRecccIRB/y+Dn98
8cEbLzzxwB03XHHBGSccccDva/PHFx+88cITD9xxwxUXnHHCEQf8PoQ/vvjg
jReeeOCOG6644IwTjjjg97X444sP3njhiQfuuOGKC8444YgDfl+TP7744I0X
nnjgjhuuuOCME4444Pc1+OOLD9544YkH7rjhigvOOOGIA35fnT+++OCNF554
4I4brrjgjBOOOOD31fjjiw/eeOGJB+644YoLzjjhiAN+X5U/vvjgjReeeOCO
G6644IwTjjjg98H88cUHb7zwxAN33HDFBWeccMQBv6/CH1988MYLTzxwxw1X
XHDGCUcc8Psg/vjigzdeeOKBO2644oIzTjjigF/hjy8+eOOFJx6444YrLjjj
hCMO+H0gf3zxwRsvPPHAHTdcccEZJxxxwO8r88cXH7zxwhMP3HHDFRecccIR
B/y+En988cEbLzzxwB03XHHBGSccccDvK/LHFx+88cITD9xxwxUXnHHCEQf8
vgJ/fPHBGy888cAdN1xxwRknHHHA78vzxxcfvPHCEw/cccMVF5xxwhEH/L4c
f3zxwRsvPPHAHTdcccEZJxxxwO/L8scXH7zxwhMP3HHDFRecccIRB/y+DH98
8cEbLzzxwB03XHHBGSccccDvS/PHFx+88cITD9xxwxUXnHHCEQf8vhR/fPHB
Gy888cAdN1xxwRknHHHA70vyxxcfvPHCEw/cccMVF5xxwhEH/L4Ef3zxwRsv
PPHAHTdcccEZJxxxwO+L88cXH7zxwhMP3HHDFRecccIRB/y+GH988cEbLzzx
wB03XHHBGSccccAv88cXH7zxwhMP3HHDFRecccIRB/y+KH988cEbLzzxwB03
XHHBGSccccDvi/DHFx+88cITD9xxwxUXnHHCEQf8vjB/fPHBGy888cAdN1xx
wRknHHHA7wvxxxcfvPHCEw/cccMVF5xxwhEH/L4gf3zxwRsvPPHAHTdcccEZ
JxxxwO8L8McXH7zxwhMP3HHDFRecccIRB/w+P3988cEbLzzxwB03XHHBGScc
ccDv8/HHFx+88cITD9xxwxUXnHHCEQf8Pi9/fPHBGy888cAdN1xxwRknHHHA
7/PwxxcfvPHCEw/cccMVF5xxwhEH/D43f3zxwRsvPPHAHTdcccEZJxxxwO8D
+OOLD9544YkH7rjhigvOOOGIA36fiz+++OCNF5544I4brrjgjBOOOOD3Ofnj
iw/eeOGJB+644YoLzjjhiAN+n4M/vvjgjReeeOCOG6644IwTjjjgl/jjiw/e
eOGJB+644YoLzjjhiAN+n50/vvjgjReeeOCOG6644IwTjjjg99n444sP3njh
iQfuuOGKC8444YgDfp+VP7744I0XnnjgjhuuuOCME4444PdZ+OOLD9544YkH
7rjhigvOOOGIA36fmT+++OCNF5544I4brrjgjBOOOOD3mfjjiw/eeOGJB+64
4YoLzjjhiAN+n5E/vvjgjReeeOCOG6644IwTjjjg9xn444sP3njhiQfuuOGK
C8444YgDfp+eP7744I0XnnjgjhuuuOCME4444Pfp+OOLD9544YkH7rjhigvO
OOGIA36flj+++OCNF5544I4brrjgjBOOOOD3afjjiw/eeOGJB+644YoLzjjh
iAN+n5o/vvjgjReeeOCOG6644IwTjjjg96n444sP3njhiQfuuOGKC8444YgD
fp+SP7744I0XnnjgjhuuuOCME4444Bf544sP3njhiQfuuOGKC8444YgDfp+C
P7744I0XnnjgjhuuuOCME4444PfJ+eOLD9544YkH7rjhigvOOOGIA36fjD++
+OCNF5544I4brrjgjBOOOOD3Sfnjiw/eeOGJB+644YoLzjjhiAN+n4Q/vvjg
jReeeOCOG6644IwTjjjg94n544sP3njhiQfuuOGKC8444YgDfp+IP7744I0X
nnjgjhuuuOCME4444PcJ+eOLD9544YkH7rjhigvOOOGIA36fgD+++OCNF554
4I4brrjgjBOOOOD38fnjiw/eeOGJB+644YoLzjjhiAN+H48/vvjgjReeeOCO
G6644IwTjjjg93H544sP3njhiQfuuOGKC8444YgDfh+HP7744I0Xnnjgjhuu
uOCME4444Pex+eOLD9544YkH7rjhigvOOOGIA34fiz+++OCNF5544I4brrjg
jBOOOOAX+OOLD9544YkH7rjhigvOOOGIA37/92P+/z+++OCNF5544I4brrjg
jBOOOOD3f/jjiw/eeOGJB+644YoLzjjhiAN+/5s/vvjgjReeeOCOG6644IwT
jjjg97/444sP3njhiQfuuOGKC8444YgDfv+TP7744I0XnnjgjhuuuOCME444
4Pc/+OOLD9544YkH7rjhigvOOOGIA34fwx9ffPDGC088cMcNV1xwxglHHPD7
aP744oM3XnjigTtuuOKCM0444oDff+ePLz5444UnHrjjhisuOOOEIw74/Tf+
+OKDN1544oE7brjigjNOOOKA33/ljy8+eOOFJx6444YrLjjjhCMO+P0X/vji
gzdeeOKBO2644oIzTjjigN9/5o8vPnjjhSceuOOGKy4444QjDvj9J/744oM3
XnjigTtuuOKCM0444oDff+SPLz5444UnHrjjhisuOOOEIw74Pf744oM3Xnji
gTtuuOKCM0444oDff+CPLz5444UnHrjjhisuOOOEIw74/Xv++OKDN1544oE7
brjigjNOOOKA37/jjy8+eOOFJx6444YrLjjjhCMO+P1b/vjigzdeeOKBO264
4oIzTjjigN+/4Y8vPnjjhSceuOOGKy4444QjDvj9a/744oM3XnjigTtuuOKC
M0444oDfv+KPLz5444UnHrjjhisuOOOEIw74/Uv++OKDN1544oE7brjigjNO
OOKA37/gjy8+eOOFJx6444YrLjjjhCMO+P1z/vjigzdeeOKBO2644oIzTjji
gN8/448vPnjjhSceuOOGKy4444QjDvj9U/744oM3XnjigTtuuOKCM0444oDf
P+GPLz5444UnHrjjhisuOOOEIw74/WP++OKDN1544oE7brjigjNOOOKA3z/i
jy8+eOOFJx6444YrLjjjhCMO+P1D/vjigzdeeOKBO2644oIzTjjigN8/4I8v
PnjjhSceuOOGKy4444QjDvj9ff744oM3XnjigTtuuOKCM0444oDf3+OPLz54
44UnHrjjhisuOOOEIw74/V3++OKDN1544oE7brjigjNOOOKA39/hjy8+eOOF
Jx6444YrLjjjhCMO+P1t/vjigzdeeOKBO2644oIzTjjigN/f4o8vPnjjhSce
uOOGKy4444QjDvj9Tf744oM3XnjigTtuuOKCM0444oDf3+CPLz5444UnHrjj
hisuOOOEIw74/XX++OKDN1544oE7brjigjNOOOKA31/jjy8+eOOFJx6444Yr
LjjjhCMO+P1V/vjigzdeeOKBO2644oIzTjjigN9f4Y8vPnjjhSceuOOGKy44
44QjDvj9Zf744oM3XnjigTtuuOKCM0444oDfX+KPLz5444UnHrjjhisuOOOE
Iw74Xf744oM3XnjigTtuuOKCM0444oDfX+SPLz5444UnHrjjhisuOOOEIw74
/QX++OKDN1544oE7brjigjNOOOKA35/njy8+eOOFJx6444YrLjjjhCMO+P05
/vjigzdeeOKBO2644oIzTjjigN+f5Y8vPnjjhSceuOOGKy4444QjDvj9Gf74
4oM3XnjigTtuuOKCM0444oDfn+aPLz5444UnHrjjhisuOOOEIw74/Sn++OKD
N1544oE7brjigjNOOOKA35/kjy8+eOOFJx6444YrLjjjhCMO+P0J/vjigzde
eOKBO2644oIzTjjigN8f548vPnjjhSceuOOGKy4444QjDvj9Mf744oM3Xnji
gTtuuOKCM0444oDfH+WPLz5444UnHrjjhisuOOOEIw74/RH++OKDN1544oE7
brjigjNOOOKA3x/mjy8+eOOFJx6444YrLjjjhCMO+B3++OKDN1544oE7brji
gjNOOOKA3x/ijy8+eOOFJx6444YrLjjjhCMO+P1B/vjigzdeeOKBO2644oIz
TjjigN8f4I8vPnjjhSceuOOGKy4444QjDvj9fv744oM3XnjigTtuuOKCM044
4oDf7+OPLz5444UnHrjjhisuOOOEIw74/V7++OKDN1544oE7brjigjNOOOKA
3+/hjy8+eOOFJx6444YrLjjjhCMO+P1u/vjigzdeeOKBO2644oIzTjjigN/v
4o8vPnjjhSceuOOGKy4444QjDvj9Tv744oM3XnjigTtuuOKCM0444oDf7+CP
Lz5444UnHrjjhisuOOOEIw74/Xb++OKDN1544oE7brjigjNOOOKA32/jjy8+
eOOFJx6444YrLjjjhCMO+P1W/vjigzdeeOKBO2644oIzTjjigN9v4Y8vPnjj
hSceuOOGKy4444QjDvht/vjigzdeeOKBO2644oIzTjjigN9v5o8vPnjjhSce
uOOGKy4444QjDvj9Jv744oM3XnjigTtuuOKCM0444oDfb+SPLz5444UnHrjj
hisuOOOEIw74/Qb++OKDN1544oE7brjigjNOOOKA36/njy8+eOOFJx6444Yr
LjjjhCMO+P06/vjigzdeeOKBO2644oIzTjjigN+v5Y8vPnjjhSceuOOGKy44
44QjDvj9Gv744oM3XnjigTtuuOKCM0444oDfr+aPLz5444UnHrjjhisuOOOE
Iw74/Sr++OKDN1544oE7brjigjNOOOKA36/kjy8+eOOFJx6444YrLjjjhCMO
+P0K/vjigzdeeOKBO2644oIzTjjigN8v548vPnjjhSceuOOGKy4444QjDvj9
Mv744oM3XnjigTtuuOKCM0444oDfL+WPLz5444UnHrjjhisuOOOEIw74Lf74
4oM3XnjigTtuuOKCM0444oDfL+GPLz5444UnHrjjhisuOOOEIw74fRR/fPHB
Gy888cAdN1xxwRknHHHA7xfzxxcfvPHCEw/cccMVF5xxwhEH/H4Rf3zxwRsv
PPHAHTdcccEZJxxxwO8X8scXH7zxwhMP3HHDFRecccIRB/x+AX988cEbLzzx
wB03XHHBGSccccDv5/PHFx+88cITD9xxwxUXnHHCEQf8fh5/fPHBGy888cAd
N1xxwRknHHHA7+fyxxcfvPHCEw/cccMVF5xxwhEH/D6SP7744I0Xnnjgjhuu
uOCME4444PcR/PHFB2+88MQDd9xwxQVnnHDEAb+fwx9ffPDGC088cMcNV1xw
xglHHPD72fzxxQdvvPDEA3fccMUFZ5xwxAG/n8UfX3zwxgtPPHDHDVdccMYJ
Rxzw+5n88cUHb7zwxAN33HDFBWeccMQBv8kfX3zwxgtPPHDHDVdccMYJRxzw
+xn88cUHb7zwxAN33HDFBWeccMQBv5/OH1988MYLTzxwxw1XXHDGCUcc8Ptp
/PHFB2+88MQDd9xwxQVnnHDEAb+fyh9ffPDGC088cMcNV1xwxglHHPD7Kfzx
xQdvvPDEA3fccMUFZ5xwxAG/n8wfX3zwxgtPPHDHDVdccMYJRxzw+3D++OKD
N1544oE7brjigjNOOOKA30/ijy8+eOOFJx6444YrLjjjhCMO+P1E/vjigzde
eOKBO2644oIzTjjigN9P4I8vPnjjhSceuOOGKy4444QjDvj9eP744oM3Xnji
gTtuuOKCM0444oDfh/HHFx+88cITD9xxwxUXnHHCEQf8fhx/fPHBGy888cAd
N1xxwRknHHHA78fyxxcfvPHCEw/cccMVF5xxwhEH/H4Mf3zxwRsvPPHAHTdc
ccEZJxxxwG/wxxcfvPHCEw/cccMVF5xxwhEH/H40f3zxwRsvPPHAHTdcccEZ
JxxxwO9H8ccXH7zxwhMP3HHDFRecccIRB/x+JH988cEbLzzxwB03XHHBGScc
ccDvR/DHFx+88cITD9xxwxUXnHHCEQf8fjh/fPHBGy888cAdN1xxwRknHHHA
74fxxxcfvPHCEw/cccMVF5xxwhEH/H4of3zxwRsvPPHAHTdcccEZJxxxwO+H
8McXH7zxwhMP3HHDFRecccIRB/x+MH988cEbLzzxwB03XHHBGSccccDvB/HH
Fx+88cITD9xxwxUXnHHCEQf8fiB/fPHBGy888cAdN1xxwRknHHHA7wfwxxcf
vPHCEw/cccMVF5xxwhEH/L4/f3zxwRsvPPHAHTdcccEZJxxxwO/78ccXH7zx
whMP3HHDFRecccIRB/y+L3988cEbLzzxwB03XHHBGSccccCv88cXH7zxwhMP
3HHDFRecccIRB/y+D3988cEbLzzxwB03XHHBGSccccDve/PHFx+88cITD9xx
wxUXnHHCEQf8vhd/fPHBGy888cAdN1xxwRknHHHA73vyxxcfvPHCEw/cccMV
F5xxwhEH/L4Hf3zxwRsvPPHAHTdcccEZJxxxwO+788cXH7zxwhMP3HHDFRec
ccIRB/y+G3988cEbLzzxwB03XHHBGSccccDvu/LHFx+88cITD9xxwxUXnHHC
EQf8vgt/fPHBGy888cAdN1xxwRknHHHA7zvzxxcfvPHCEw/cccMVF5xxwhEH
/L4Tf3zxwRsvPPHAHTdcccEZJxxxwO878scXH7zxwhMP3HHDFRecccIRB/y+
A3988cEbLzzxwB03XHHBGSccccDv2/PHFx+88cITD9xxwxUXnHHCEQf8vh1/
fPHBGy888cAdN1xxwRknHHHAr/HHFx+88cITD9xxwxUXnHHCEQf8vi1/fPHB
Gy888cAdN1xxwRknHHHA79vwxxcfvPHCEw/cccMVF5xxwhEH/L41f3zxwRsv
PPHAHTdcccEZJxxxwO9b8ccXH7zxwhMP3HHDFRecccIRB/y+JX988cEbLzzx
wB03XHHBGSccccDvW/DHFx+88cITD9xxwxUXnHHCEQf8vjl/fPHBGy888cAd
N1xxwRknHHHA75vxxxcfvPHCEw/cccMVF5xxwhEH/L4pf3zxwRsvPPHAHTdc
ccEZJxxxwO+b8McXH7zxwhMP3HHDFRecccIRB/y+MX988cEbLzzxwB03XHHB
GSccccDvG/HHFx+88cITD9xxwxUXnHHCEQf8viF/fPHBGy888cAdN1xxwRkn
HHHA7xvwxxcfvPHCEw/cccMVF5xxwhEH/L4+f3zxwRsvPPHAHTdcccEZJxxx
wK/yxxcfvPHCEw/cccMVF5xxwhEH/L4ef3zxwRsvPPHAHTdcccEZJxxxwO9D
+eOLD9544YkH7rjhigvOOOGIA35flz+++OCNF5544I4brrjgjBOOOOD3dfjj
iw/eeOGJB+644YoLzjjhiAN+X5s/vvjgjReeeOCOG6644IwTjjjg9yH88cUH
b7zwxAN33HDFBWeccMQBv6/FH1988MYLTzxwxw1XXHDGCUcc8Pua/PHFB2+8
8MQDd9xwxQVnnHDEAb+vwR9ffPDGC088cMcNV1xwxglHHPD76vzxxQdvvPDE
A3fccMUFZ5xwxAG/r8YfX3zwxgtPPHDHDVdccMYJRxzw+6r88cUHb7zwxAN3
3HDFBWeccMQBvw/mjy8+eOOFJx6444YrLjjjhCMO+H0V/vjigzdeeOKBO264
4oIzTjjigN8H8ccXH7zxwhMP3HHDFRecccIRB/wKf3zxwRsvPPHAHTdcccEZ
JxxxwO8D+eOLD9544YkH7rjhigvOOOGIA35fmT+++OCNF5544I4brrjgjBOO
OOD3lfjjiw/eeOGJB+644YoLzjjhiAN+X5E/vvjgjReeeOCOG6644IwTjjjg
9xX444sP3njhiQfuuOGKC8444YgDfl+eP7744I0XnnjgjhuuuOCME4444Pfl
+OOLD9544YkH7rjhigvOOOGIA35flj+++OCNF5544I4brrjgjBOOOOD3Zfjj
iw/eeOGJB+644YoLzjjhiAN+X5o/vvjgjReeeOCOG6644IwTjjjg96X444sP
3njhiQfuuOGKC8444YgDfl+SP7744I0XnnjgjhuuuOCME4444Pcl+OOLD954
4YkH7rjhigvOOOGIA35fnD+++OCNF5544I4brrjgjBOOOOD3xfjjiw/eeOGJ
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
wRsvPPHAHTdcccEZJxxxwO+38scXH7zxwhMP3HHDFRecccIRB/x+C3988cEb
LzzxwB03XHHBGSccccBv88cXH7zxwhMP3HHDFRecccIRB/x+M3988cEbLzzx
wB03XHHBGSccccDvN/HHFx+88cITD9xxwxUXnHHCEQf8fiN/fPHBGy888cAd
N1xxwRknHHHA7zfwxxcfvPHCEw/cccMVF5xxwhEH/H49f3zxwRsvPPHAHTdc
ccEZJxxxwO/X8ccXH7zxwhMP3HHDFRecccIRB/x+LX988cEbLzzxwB03XHHB
GSccccDv1/DHFx+88cITD9xxwxUXnHHCEQf8fjV/fPHBGy888cAdN1xxwRkn
HHHA71fxxxcfvPHCEw/cccMVF5xxwhEH/H4lf3zxwRsvPPHAHTdcccEZJxxx
wO9X8McXH7zxwhMP3HHDFRecccIRB/x+OX988cEbLzzxwB03XHHBGSccccDv
l/HHFx+88cITD9xxwxUXnHHCEQf8fil/fPHBGy888cAdN1xxwRknHHHAb/HH
Fx+88cITD9xxwxUXnHHCEQf8fgl/fPHBGy888cAdN1xxwRknHHHA76P444sP
3njhiQfuuOGKC8444YgDfr+YP7744I0XnnjgjhuuuOCME4444PeL+OOLD954
4YkH7rjhigvOOOGIA36/kD+++OCNF5544I4brrjgjBOOOOD3C/jjiw/eeOGJ
B+644YoLzjjhiAN+P58/vvjgjReeeOCOG6644IwTjjjg9/P444sP3njhiQfu
uOGKC8444YgDfj+XP7744I0XnnjgjhuuuOCME4444PeR/PHFB2+88MQDd9xw
xQVnnHDEAb+P4I8vPnjjhSceuOOGKy4444QjDvj9HP744oM3XnjigTtuuOKC
M0444oDfz+aPLz5444UnHrjjhisuOOOEIw74/Sz++OKDN1544oE7brjigjNO
OOKA38/kjy8+eOOFJx6444YrLjjjhCMO+E3++OKDN1544oE7brjigjNOOOKA
38/gjy8+eOOFJx6444YrLjjjhCMO+P10/vjigzdeeOKBO2644oIzTjjigN9P
448vPnjjhSceuOOGKy4444QjDvj9VP744oM3XnjigTtuuOKCM0444oDfT+GP
Lz5444UnHrjjhisuOOOEIw74/WT++OKDN1544oE7brjigjNOOOKA34fzxxcf
vPHCEw/cccMVF5xxwhEH/H4Sf3zxwRsvPPHAHTdcccEZJxxxwO8n8scXH7zx
whMP3HHDFRecccIRB/x+An988cEbLzzxwB03XHHBGSccccDvx/PHFx+88cIT
D9xxwxUXnHHCEQf8Pow/vvjgjReeeOCOG6644IwTjjjg9+P444sP3njhiQfu
uOGKC8444YgDfj+WP7744I0XnnjgjhuuuOCME4444Pdj+OOLD9544YkH7rjh
igvOOOGIA36DP7744I0XnnjgjhuuuOCME4444Pej+eOLD9544YkH7rjhigvO
OOGIA34/ij+++OCNF5544I4brrjgjBOOOOD3I/njiw/eeOGJB+644YoLzjjh
iAN+P4I/vvjgjReeeOCOG6644IwTjjjg98P544sP3njhiQfuuOGKC8444YgD
fj+MP7744I0XnnjgjhuuuOCME4444PdD+eOLD9544YkH7rjhigvOOP2/ruec
CAwQAAAYEpCABCQgAQnMfenfEQlIQAISkIAUJHTtZcwYHHHA7y9/fPHBGy88
8cAdN1xxwRknHHHA7w9/fPHBGy888cAdN1xxwRknHHHA7zd/fPHBGy888cAd
N1xxwRknHHHA7xd/fPHBGy888cAdN1xxwRknHHHA7yd/fPHBGy888cAdN1xx
wRknHHHA7wd/fPHBGy888cAdN1xxwRknHHHA7zt/fPHBGy888cAdN1xxwRkn
HHHA7xt/fPHBGy888cAdN1xxwRknHHHAr/PHFx+88cITD9xxwxUXnHHCEQf8
vvLHFx+88cITD9xxwxUXnHHCEQf8vvDHFx+88cITD9xxwxUXnHHCEQf8PvPH
Fx+88cITD9xxwxUXnHHCEQf8PvHHFx+88cITD9xxwxUXnHHCEQf8PvLHFx+8
8cITD9xxwxUXnHHCEQf8PvDHFx+88cITD9xxwxUXnHHCEYf//A+u98ON
       "],
       VertexColors->None]}, 
     {RGBColor[1, 0, 0], PointSize[0.002777777777777778], AbsoluteThickness[
      1.6], Opacity[0.2]}}}, {
    {RGBColor[0, 0, 1], PointSize[0.002777777777777778], AbsoluteThickness[
     1.6], LineBox[CompressedData["
1:eJw01nHYDnn80PuRJElGkiS5JUmSkSRJRpIkGUmSZCRJkpEkSW5JkrSjbZMk
I0mSjLRJcozjOI6zx3E7kiS5JWmT3JukbdP26zyvr+tyPdfrP+95vp/Px7jf
s/W3bugfRVG/n/g7bGIU/aTInz/wX9P/9ePzP50+73/9jHnQ4z63eCwnPJ1T
XsoZr+ecN3HBW7jN27nkXVzxPq75CDd8kjt8lrt8iXt8naPNfb7PMT8I/fw6
9PN3oZ8H/zP9PIJznsEFz+Y2z+WSl3PFm7jmfdzwF9zhU9zl09zjsxz9wT5f
4JgvcouvcMLXOOXHoZ9fhn5+E/p5yBP9PIZLns0Vz+OaF3HDy7nDK7jLa7nH
Wzja4v1xzF9wi89xwnc45buc8UPO+RUX/G3o5/ehnz+Ffv4c+nngP9fPI7jD
Y7nLi7jHqzn6Q31ewzFv5Bbv4IT3ccoHOOPjnPMpLvgGt/kel/yaK37DNX8K
/Tz0qX4ex10ezz2ewtHWPi/hmNdwizdwwps45c2c8QXO+RoXfJPbfJtLfsUV
v+GaP3DDA/6Ffh7OXR7FPR7DUeG9cMyTuMXzOOEVnPIqzngz57yXC97PbT7B
JZ/kiq9wzV9zw69CP78O/fxd6OdPoX9bn38I/dzvmX4exAmP4pTHccbTOOfF
XPB6bvMmLvkwV3yEaz7KDZ/lDl/iLt/gHt/n6A/3+RHH/Cz084vQz9+Hfu7/
L/XzSM55DBc8nts8kUueyhXP4pqXcMMrucPrucvbuMc7ONru+3HMN7jFdzjh
B5zyk9DP/Z7r5+Fc8Bxu83wueRVXvJprXscNb+QO7+Qu7+UeH+Doj7h3HPNp
bvF5TvgKp/w1Z3wn9PPd0M/9/pV+7s8lD+GKR3PNU7jhudzh1dzlTdzjXRzt
6PNBjvlLbvFJTvgMp3yWM77KOd/igu+Hfn4U+vlp6OcXoZ/fhX7+HPp5wAv9
PIh7PIKjP2rfc8yzucWLOeElnPIGzngT57yVC97Jbd7DJV/gii9zzTe44Wfc
4eehn8d39fNkjnba1xzzUm7xKk54J6d8mDM+yjmf4IJPc5svcskPueJHXPNr
brj/S/08nLs8mXs8k6M/Zr9yzCu4xTs44b2c8kHO+CjnfJwLPs9tfsAlv+SK
X3PNn7jhz6GfB/9r/TyCezyGo13uN8c8nVs8ixNewCkv4YyXcc6ruOD13Oat
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
b3D0yP0K/fw49PPL0M/vQz9/DP08bJp+nswFz+Q2z+aSF3HFK7jmjdzwFu7w
Hu7yUe7xOY7+qfnlmG9xi+9wwk845bec8fvQz4N+uX4ewm0ewSWP5Yqnc82z
uOFF3OGl3OXV3OMtHD323jjmw9zi85zwBU75AWf8mHN+Gvr5Rejn/tP18wiu
eCTXvJgbXsMdXstd3sA93sHRPzN/HPMX3OIvOeGznPJNzvg55/yGC+73K/Tz
QC55OFc8hmuewA3P4Q7P4y6v4B6v5uhJn3dyzHu5xYc54ROc8jnO+DznfI0L
vhn6+XXo51Ez9PNErnkRN7yMO7yGu7yee7yRo3/u3nPMR7jFxznhM5zyec74
Fuf8ggt+yW0e+Sv182iueAzXPI4bHs8dnspdnss9XsDRU/PEMS/hFi/nhDdx
yps5452c824u+CC3+VDo54uhny+Hfr4R+vlh6Of3oZ+Hz9TPYzn6F+aJY57G
LZ7PCS/klDdzxts456+44GPc5pNc8nmu+ArX/Igbfsodfs5d/hT6eeCv0v/M
e+OYx3GLZ3LCcznl+ZzxSs55Bxe8m9u8l0s+whVf4Jpvc8MPuMOPuMtPucdv
Qv+/7PO70M+fQz+PmKWfJ3LKKznjTZzzZi54J7f5EJd8gSu+wjXf4IbvcIcf
cpffcI8/cvS8zz9yzIN/tX4ewglP45Rnc8bzOOdVXPBqbvNaLnkDV7yHaz7M
Dd/iDn/DXb7PPX7B0b/q81uOecJs/TyZE57GKS/ljFdyzuu54O3c5h1c8kGu
+DjXfJ4bvswdfsxdfso9fsHRC/eIY34d+vlT6OdBv0Y/D+OMx3DOM7jgWdzm
hVzyMq54Jde8gxs+xR2+wF2+yD2+yVHX/HDMD7jFzznhV6Gfvw39/D7088A5
+nkIt3kklzyVK57BNS/nhldzhzdzl7dxj/dw9NL+5Zj3c4tPcMJnOOVznPEl
zvlW6OcnoZ9/CP089Nfq5xFc81hueCJ3eBp3eRb3eA5H/9r94piXcYtXc8Lr
OeUtnPFBzvlLLvgst/kGl3w39PP90M8vQz+/Dv38JvTzp9DPg+fqf+X7cszj
uMUTOeFJnPICzngZ57yWC17Pbd7JJe/mio9wzae54bPc4Qvc5dvc4yeh/9/0
+UPo5x9CPw9M9fMYTnkyZzyTc17CBa/lNq/jkrdxxXu55gPc8Bnu8DXu8i3u
8V2OXvf5I8f8iVvcf55+HsQpD+GMh3POo7ngadzm+VzyLq54H9d8khu+xx1+
yl3+wL3Q8+v0/1v7hmOexS2eywmv4ZS/4IyPc87nuOCL3ObLXPI1rvgJ1/yS
G/6WO/wjd3nAfP08jKM33jPHPJZbPIcT3sApb+eM93LO+7ngo9zmK1zyfa74
Cdf8iht+zR1+z10e+uv18ziO/p39xjFP5xbP5IQXc8pLOeMVnPNqLngjt3kL
l3yEKz7GNZ/nhq9yh29wl2+Hfn4R+r/1/UI/91+gn0dywuM45bmc8TzOeRUX
vIbbvJZL3swVb+Oad3DDu7nDh7jLX3KPT3D0770/jvlG6OdnoZ9fhX7+NvTz
wN+gn4dwwWO5zZO55Nlc8UKueRU3vJo7vIG7vIV7fIijt/YXx3ySW3yOE77O
KX/DGT8P/fwi9PMPoZ8/h37ut1A/D+Gah3LDo7nDY7nLs7jHizj6D+aVY97O
LT7LCV/glC9zxrc55wdc8GNu8xsu+W3o50+hnwf9Rv08hTs8j7u8jHu8iqN3
5olj3sMt3s8JH+SUT3PG1zjne1zwA27zMy75FVf8kWv+MfTzmEX6eSx3eRr3
eCFH/9H8cMwbuMW7OOE9nPIBzvg053yNC77JbX7EJT/hil9wza+54c+hnwf9
Jv08gXs8kaP39g/HPIVbPJMTnsUpL+CM13HO67ngjdzm3VzyQa74Ktd8lxt+
wB1+G/r5Q+jnEYv197wfjnkct3g6J7yMU17OGa/inLdywUe4zce55Itc8VWu
+SY3/JA7/I673O836+exHH3X5/Ec8wRu8VROeAanPIczXsQ5L+GCD3CbD3HJ
R7ni01zzU274OXf4LXf5U+jnEUv0/yfvm2Oewy2ezwkv4JRXcsbrOOctXPB2
bvNeLvkoV3yMaz7PDV/gDt/gLt/jHj8N/R/63P+36OfB3OKJnPAUTnkuZ7yW
c17PBW/gNn/BJZ/gii9wzVe44Wvc4efc5Y/c4x85+s99HrJUPw/jFg/nhGdw
yks547Wc8zoueDO3eTuXvJMr/oprPsMNX+IOX+EuP+QeD8z0f+zzaI55Mrd4
Gic8nVOewxkv4JyXcsFruM3rueS9XPE+rvkAN3yYO/wld/ky9/jr0P9f7NfQ
z3dDPz8K/fwm9PO70M8fQj8PXaafx3GbJ3HJs7jieVzzQm54DXd4K3d5B/d4
N0ef+ryfYz7ILT7CCX/BKZ/gjC9zztdCP98M/Xwv9POD0M+vQj9/CP38Y+jn
gb9VP0/gHk/j6L96vxzzfG7xQk54Cae8ijPewjkf5oKPcpsfcsmPuOKnXPN7
bvgTd7jfcv08nHs8gqPvfQ+OeSm3eDUnvIVTPsYZn+Kcr3LBd7nN97jkx1zx
M675JTf8PXd49G/TzzO4x7M4+m99ns0xr+IWr+WEN3HKOznjQ5zzl1zwCW7z
WS75Dlf8Ddf8gBt+yB1+Evr5ZejnD6H/B/MT+nnwCv08khMewylP4Iznc86L
uOAl3ObVXPJmrngL13yMGz7PHb7JXb7FPX7E0X/v83OO+dvQz+9DP38O/dz/
t+vnEZzzaC54LLd5HJc8hyuezzWv5IbXcYc3cZe3co93cPS5zyc55svc4q85
4fuc8uPQzy9CP78L/fwh9POAlfp5NFc8nmtezw3v4Q7v4y4f4R5/ydH/6PNX
HPMpbvFpTvgyp3yDM77HOb/igt9zmwf8Dv08hCseyTWP4oYncYcnc5fncY+X
c/Sj+eKYj3KLz3DC5znlh5zxW875Oy544Cr9PI5LnsgVT+aa53LD87nDS7nL
a7jH6/gnLkdfP8e8g1t8lBM+xSmf5Ywvcc5XueDroZ9vhX5+Gvr5Wejn16Gf
34V+/hT6edjv1M8TOerX56kc83Ru8UJOeBmnvJkz3s057+OCj3Cbv+KST3HF
N7jmb7jhB9zhN9zlb0M/vw/9P6nPk1br55nc4jmc8BJOeQVnvJpzXssFb+A2
b+SSt3HFe7jmp9zwC+5wv9+ln4dyj0dx1F8vxzyLWzyfE17AKS/jjFdwzqu5
4HXc5vVc8i6ueB/XfJAbPsIdPhb6+Xzo569D/0/2vkI/3w79fD/087PQz29D
Pw9ao59HcMHjuM3jueRJXPFirnkDN7yJO7ybu3yce6GXowF9vskxP+QWP+GE
n3HKHzjjIb9bP4/hgsdzm6dxyeu44p1c81fc8Bnu8DXu8gvu8XuOfkqf+6/V
z0O4xaM54Ymc8jrOeAfnvJcLPsVtPs8lX+CKb3HNd7nhe9zhZ9zld9zjTxwN
7PP3oZ9H5vp5PCc8lVOewRnP45wXc8HLuc1rueStXPE2rnkHN3yQO3yau3yW
e3yPo5/qXnDM70I/D1innwdzyrM543mc83wueAW3eRWXvJYr3sI1b+eG93OH
D3GXb3KP73A0yHvimF9zi9+Hfv4Y+nni79HPUzjnOVzwMm7zai55PVd8gGs+
wg0f5Q6f5y5/zT2+ytFPs+855nvc4kec8GNO+UXo59ehn9+Efv4+9PPo9fp5
Ilc8i2tewA0v4Q6v5C5v4h5v5miw+eKYd3OL93DChzjlLznjs5zzZS74Brf5
Tujnb0I/Pwj9/DD085Dfq5+HcZeHc49HcvTT+7yIY17KLV7HCW/hlA9wxoc4
5y+44K+4zae55HNc8UWu+Qo3fDf088PQz69CP38X+oe4B6Gf+2/Qz0M44RGc
8mjOeALnPJkLnsNtXsQlr+SKj3PNF7jh+9zhp9zlF9zjlxz9DN+DYx7z+/Tz
JE54Cqc8nTOezTkv4IJXcpvXcsmbueKtXPMObngPd3gfd3k/9/gsR0N9T475
Zujn26GfX4Z+fh/6ecBG/TyPC17IbV7BJe/iig9zzRe54Uvc4Svc5a+5x/c5
iu13jvk1t/g9J/yRUx74+/XzUM55OBc8jts8kUuewhXP55oXc8MrucPrucsb
ucfbORrmfnLMZ7jFVznhB5zys9DPn0I/fx/6uf8m/TyMSx7BFY/mmsdww1O5
w3O5ywu5x6s4+pl93sAx7+YW7+OE93PKxznjK5zzVS74Xujnb0I/Pw79/EPo
52F/QD+P5w5P5i7P4B7P5Gi4+88xb+cW7+KE93DKeznjA5zzSS74Grf5Fpf8
kSv+gWv+HPp55mb9vIm7vIN7vI+jn9XngxzzSW7xWU74Oqf8gDN+xjm/4YLf
cZu/55J/5Ir7/0H9PIgbHskdHsNdnsI9nsfRCPuEY17OLV7FCW/ilLdyxts4
5/1c8Ffc5uNc8gWu+Gro55uhnx+Hfn4W+nnIFv08jKOf7ftxzGO4xRM44amc
8kzOeCnnvJkL3sZt3sMl7+WKT3LNZ7jhc9zh89zlK6Gfr4X+kd5z6Oe7oZ9f
hX5+H/r5U+jnz6Gf+/0h/Tya2zyZS57DFa/nmndxw7u5w19yl49xjy9z9HP6
/DXHfINb/IATfsopv+aM33DOn0I/D96qn4dxySO44ulc81xueCF3eDF3eSX3
eA1Ho3w/jvk0t/gOJ3yPU/6GM37AOT/ngj+Gfv4x9PPAQj8P45qHc8PjucOT
uMsLucdrOfq59hPHfIhbfIkTvsIpX+OMH3LOT7jgV9zmt1zy+9DPP4R+HrJN
P4/gDo/iLk/kHk/maLT7wDHP5RYv44S3csr7OOMDnPNZLvg8t/k2l3yfK37E
Nb8M/fw59POPoZ/7/2H9PICjn2cfccxTucXzOOEFnPIqzngz57yDC97HbT7I
JR/iir/gms9yw+e4w1e4y9+Efn4Y+seYx9DP34d+/jH08/Dt+nkOZ7yEc17O
Be/iNu/nkk9zxWe45nPc8Hnu8EXu8h3u8V2Ofr7vwzE/5Ba/4oS/C/38KfTz
D6Gf+/8R/TyK2zyWS57MFc/hmhdxw4u5w8u4y1u5x0c4GtvnoxzzBW7xPU74
Eaf8gjN+xzkP2qGfh3Kbx3DJ47ni6VzzQm54MXd4CXd5Gfd4FUct94Bj3sQt
3sEJ7+GU93PGJzjns6Gfb4R+fhD6+Vno55ehn9+Efu73R/XzcO7yWO7xDI7G
9Xkpx7yKW7yaE17LKX/BGR/lnE9zwee5zRe55Etc8S2u+Qk3/D7088fQz/13
6ufhHP0C88gxj+MWL+KEF3PKWzjjfZzzYS74Erf5Opf8kiv+nmv+zA33/2P6
eRB3eTT3eAxH4/s8iWOezi2ewQkv55TXc8abOeetXPA2bvNOLvkQV3yEa77A
DV8O/Xwl9PO70M/fh/5f2OcBu/TzYG7xME54Aqc8iTOewzkv54JXc5u/4JKP
csXnuOaL3PAl7vDX3OVr3OPrHE0wT6GfX4R+fhv6+YfQz2P/uH6exjnP5ILX
cZvXc8lbueLtXPMObngvd/ggd/kI9/gkR7+oz6c45uvc4nuc8CNO+WXo59eh
nz+Ffh6wWz8P5pKHcsXjuOaJ3PB07vAM7vJs7vECjia6pxzzYm7xck54D6e8
nzM+yDkf54IvhH6+Hfr5XujnJ6GfX4Z+HvUn9PMY7vJ47vEEjn6x98kxz+cW
L+eEN3LKmznjLZzzXi74PLf5Opd8iyu+wzV/ww3fD/38bejnt6Gf++/RP6nP
Aznm4dziEZzwWE55HGe8lHNexgVv4Tbv45KPccUnueYz3PBl7vB17vIN7vGH
0P9L3IPQz59DPw/+k/p5NKc8jjOewTnP4oIXcpuXccnLueK1XPMmbvgQd/ga
d/kB9/g5R5P7/Ipj/sAt7rdXP4/ilMdyxvM556Vc8Apu81oueQNXvIVr3skN
H+IOH+Mun+Aen+Tol7qXHPNNbvHd0M9vQz9/DP38KfRz/7Z+HsJtHsslz+GK
l3LNy7jh1dzhTdzlLdzjwxxNMU8c81lu8dec8A1O+RZnfI9zfh36+W3o5x9D
P/ffp5+Hcs0jueEp3OGp3OVZ3OOdHP0y+4dj/oJb/BUnfIJTPscZX+Sc73DB
j7nNz7jkV6Gf34d+/hD6efCf0s/DuMtjuMeTOZpqX3HMi7jF2zjhvZzyMc74
JOd8hgs+z23+mku+yxW/4pqH7tfPo7nDM7nLc7nHyzhKzA/HvJFbfIATPsop
f8kZH+Oc73HB97nND7jkN1zxW675U+jnz6Gfp/5p/TyLe7yQo2l9XsIxL+MW
r+SEV3HK+zjjg5zzCS74FLf5Dpf8hCt+wzX/yA0PPqCfh3CXR3GPx3D0y+1f
jnkGt3gmJzyHU17FGa/mnDdwwfu5zQe45MNc8SWu+Qo3/HXo50ehn78L/fwx
9E+3b/+Mfh7ELR7CCY/mlGdyxms4501c8HZu8z4u+ThXfJVrvs8NP+AOP+Uu
P+Mef+LoV/T5+9DPn0M/Dzuon0dwyiM547mc8wIueBm3+Qsu+TRXfIFrvsgN
X+YO3+Qu3+Mev+JoRp/7/Vn9PIBbPIQTHskpT+KMp3LOK7jg1dzmdVzyNq54
O9e8nxs+wR0+yV0+wz2+xNGvtH9CP78I/fxd6OePoZ8/hX7+IfTz8EP6eT63
eSWXvI4r3sU17+OGD3OHj3CXT3GPz3I00/7gmG9zi+9zwo845dec8SfOeeif
08/juc0LuOSFXPFirnkZN7yWO7yVu7yNe7yHo1/lXnHMt7nF9zjhl5zygMP6
eSDnPIYLnsBtnsYlz+CKZ3PN87jhRdzh7dzlA9zjLziaZV445kvc4iuc8HVO
+XXo529DP78N/Tzwz+vnsVzyOK54Mtc8lxtewB1exl1eyT3ewtGv9n045mPc
4vOc8FVO+TpnfItzfswFDz6in4dyyaO54ilc8zxueDl3eA13+SD3+BBHs+0L
jvkEt/g0J3yBU77MGV/lnK9xwXdCP38T+vld6OcBf0E/D+eGx3KHJ3GXZ3KP
l3D0a/q8k2M+xC0+zAl/xSkf44xvcs73ueAn3OanXPJzrrjfF/q5Pzc8iDs8
hLs8jXs8h6M55oljXsAtXsEJb+KU93HGRzjno1zwcW7zKS75Llf8MvTz69DP
34V+7l/q59Hc43Ec/do+T+SYZ3CLl3PCaznl3ZzxPs75Ky74BLf5Ipd8hSu+
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
LLf5Apf8dejnB6GfH4V+fhz6+UXo5zehnwdc1r++zyM45tHc4vGc8BROeSpn
PJ1zXsAFL+E2b+CSt3LFO7nmg9zwIe7wV9zls9zjG6H/9/b5dujnJ6Gfn4d+
fhX6+V3o57F/Xz9P5oKncZuXc8kbuOJtXPMubvgwd/gL7vIZ7vFFjjb0+RLH
fI1b/A0n/JBTfsQZPwn9/EPo5/5X9PNoLnkcVzyTa57PDS/lDq/gLq/nHm/k
6PeZZ455L7f4KCd8nFM+yxmf55wvc8FXQz/fCv18N/Tz49DPz0I/D/4H+nkM
d3kW93gBRxvdF455Cbd4PSe8mVPeyhlv45x3csFfcpsvcsn3uOJvuOaH3PDz
0M/vQz9/CP084Gv9v7/PAznmkdzi8ZzwIk55M2e8l3M+xAUf5TaP+If6eRRX
PJFrnsYNb+UOb+cu7+AeH+FoU5+Pccy3ucX3OOGXnPJbzvgd5/w9F9z/qn4e
wSVP54qXc81ruOEN3OFN3OWt3OODHP0B94JjPs0tvsYJf8MpP+aMn3HO33LB
34d+/jH08/B/pJ+ncs2zueEl3OHl3OW13OONHG32Hjnma9zi+5zwQ075CWf8
gnP+lgt+y23uf00/D+SKx3LNc7nhRdzhldzl1dzj9Rz9Qd+DY97BLd7HCR/g
lI9wxhc458tc8FVu873Qz09DPz8L/fwi9PPr0M8fQj9/Dv087B/r32Lfccyj
ucXjOOFJnPJ0zngW57yYC17Gbd7AJe/mig9yzUe44S+4wye4yxe4xxdD/x/y
/UM/vwz9PPy6fp7KKc/kjNdxzlu44F3c5j1c8iGu+Cuu+Rg3fJ07fJO7/JB7
/IijreaXY37KLX4e+vl16Of3oZ8/hn4e9E/08zhu80QueTJXvJRrXsENr+YO
b+Iub+Ee7+Oo8L445qPc4kuc8H1O+TVn/IFz/j7086wb+nkBl7yYK17CNW/i
hndyh/dxl7/gHp/jaFufr3DM33CLH3DCDznll5zxR875f9JUx/E3/GFDp0eS
JBlJkmQkSZKRJEmOJElyJOmXZCRJkuPxeCTJkSRJRpIkGUmy1jrWWmvtLyNJ
khxJkmQkSZKRJEl2X/u9Pn9e/533nPv+3L3+rn7uy20ewDkP4oLHcYdnc8nr
uMs7uOLdXPM+jn7CfnHMJznhs5zyXW7wQ27yM86493X9PIzbPJJznsAFz+QO
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
j3Gbz3LOl7jgG9zhx1zyJ+7yV66473v93I+js+aHYx7PCU/glJdwg5dyk7dx
xvu4xYe4zRc454tc8A3u8G0u+R53+TlX/Db0c/9a///S46Ec83BOeCKnPJkb
vJibvJwz3sAtPsBtPsQ5n+OC73KHH3DJj7jLT7ni11zzx9B/zryEfu71QT/3
4ZRHc4OncpMXcMabuMVbuc07OOfdXPAB7vAZLvk6d/keV/yQa37C0f9qfzjm
r6Gfe/1n/TyVGzybmzyfM17CLV7KbV7FOe/ggo9zh89xyRe5yze54vtc8weO
zvt/P+rnoZzwCE55FDd4NDd5Mmc8hVs8k9s8l3NexQVv5A5v45J3cZePcsUn
uOY7HP1v9in089PQzy9CP78O/fwm9PP70M+fQj/3+S/6uS/nPIgLHs0dHs8l
T+Iu7+WKj3PNpzi60OPzHPMlTvgqp3yNG3yLm/yGM37LLf4c+rnXJ/08igse
zx2exiXP4C4v4oqXcc2rOOr0eA3HvJkT3sYpH+EGn+MmX+OMb3OL33GbP4Z+
/hL6ech/1c+zuORF3OXlXPE6rkMPRxe9rxzzIU74KKd8jBt8mpt8kTO+yi2+
zm2+yTn3/ayfx3CHp3LJs7nLC7jiH7jm1Rz97+4Tx7yVE97OKe/iBh/mJl/m
jO9xi59xm99yzr3+m37uzR0eySVP4i7P5IrncM3LOLpkXjjmNZzwWk55Nzf4
BDf5LGd8jlt8m9t8j3N+Hvr5Vejnfl/08yDu8iiueCLXPIej/8O95pgXc8JL
OeXl3OAV3OTtnPFebvFhbvNRzvkYF/yAO/wo9PPT0M8vQz+/Cf38JfRf7vH3
0M+9/rt+7s8pD+UGj+Amj+OMZ3OL13GbN3LOO7jgXdzhw1zyGe7yA674Cdf8
jKP/0/fhmPt+1c8jOeUx3ODx3OQJnPEMbvFMbvNsznk+F7yUO7yJS97BXd7N
Fe/hmvdzdKXHxznm06Gfr4R+fhT6+W3o54+hnz+Hfu7zP/Rzf855BBc8lzs8
n0texF1eyxVv55r3c/R/uXcc8yVO+Cqn/CM3+A43+QVn/IVbPOybfh7POU/n
ghdyhxdzyeu5yxu54q1c82GOrvb4CMd8mRO+zinf4AY/4ya/5Yzfc4s/hH7+
Gvq59//UzwO4w8O45LHc5alc8UyueQ5H/3eP53HM8znhhZzyem7wbm7yHs74
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
oZ97/WL93J8zHsotHsZtnsg5L+CCl3GH13HJu7jLu7niA1zzEY6e2zeO+RQn
fJ5TvsoNvhv6+W3o52+hn3uN1M/DOeexXPAE7vAkLnkqd3kaV7yBa97MUdXj
gxzzEU74OKd8ght8k5t8mzN+yC3+EPp5RKKfJ3PBU7jD07nkjdzlo1zxaa75
HEcvvA8c8yNO+AWn/Job/IWb/JUz7jtKPw/gNg/lnMdwwQu4w4u55PXc5e1c
8T6u+QBH/8b/zzEf54QvcMr3uMEPuMmPOeMnoZ/fhH7+HPq51y/Rz725w4O5
5FHc5fFc8SSueRpHL73XHPNCTngZp7ySG7yBm7yZM97NLd7Hbd7POR8N/Xw8
9PO10M8/hn5+GPr5aejn56H/35rn0M8fQz9/C/08bbR+nstNns8ZL+YWL+U2
b+CcN3PB27nDR7nkM9zlc1zxea75Ikev7D/HfJUTvskpPwr9/Cz084vQzx9D
P38P/dznl+rnvlzwaO7wJC75B+7yMq54Jde8i6N/1+O9HPNhTvgCp/yMGzxw
jH4ewhkP4xaP5TZP4pwnc8HzuMOLuORV3OW1XPF6rnkTR6/tJ8e8hxPezykf
5AafCP18OvTzudDPN0I/3wn9/DT084vQz29DP38J/dz7l+nnEVzzFI7+vXvK
Mc/hhFdwyqu4wWu5yRs542Pc4tPc5iuc800u+BZ3+AGX/Ji7/DL08/vQz99D
/xv3d6x+HskJj+eUp3CD53KT53HGC7jFK7nNWznnvVzwPu7wAS75Enf5Llf8
hGt+z9F/6PHX0M+9f7l+nsopz+AGz+MmL+OMN3CLN3Gbt3LOe7jgQ9zhU1zy
Oe7yTa74Ptf8lqO3PX7HMfcZp58HcspDuMHDucmjOePp3OI53Oa5nPNSLngt
d3gDl7yTu7yLKz7MNV/k6D/6XhzzrdDPd0I/vwj9/D708/fQzwN+hX4ewW0e
yTnP4IJXc4fXc8kbucubuOKtXPM+jt7ZJ475GCd8mVO+zQ2+x01+zhl/Df38
LfRz3/H6eRgXPIk7PJNLXsJdXs4Vr+Ka13D0n3wPjvkoJ3yKUz7LDX7LTX7H
GX/jFvf/lfp5Muc8nQueyR1ewCUv4i7v5IoPcc2HOXrf45Mc8zlO+BanfIcb
/Iib3GeCfu7LLR7GbR7JOY/ngidyh+dyyfO4yyu44tVc8xqOaveGYz7ICR/h
lM9wg69ykx+Gfn4Z+vlt6OdPoZ+/hX7u96v08xAueTh3eSRXPIZrnsDRB/vF
MS/ihJdwyuu5wTu5yfs44yPc4pvc5oec8zsu+HPo5++hn/tM1M/9uOLRXPNY
jv5zj2dxzHM44fmc8iJu8HJu8lrOeBu3eBe3+STnfJ4LvsQdvsol/xj6+Xro
55uhn8en+j/6/znm6ZzwQk55MTf4B27ySs54E7d4O7f5AOd8mAs+zh2+wCXf
5i6/4oo/cc2fQ/9/sW+hnwdP0s9jOOV53OCl3OQdnPF+bvFRbvMpzvksF3yH
O3yfSx7+q/XzOK54Mte8gKNP/k+OeTknvI5T3sgN3sxN3sMZH+UWH+M2n+Sc
T3PB57nDF7nkm6Gf74Z+fhb6+UXo/6/mI/Rz38n6eRCnPJobPJ2bPJczXsYt
3sJt3so57+CCj3OHT3LJZ7nLl7ji21zzM44+u08c89vQz+9DP38O/dzr1+jn
wZzxEG7xVG7zDM55Phe8iju8lktez13eyRWf4Jovc/Tf7BfH/IoT/sApf+QG
95uinwdxxsO5xSO4zVM455lc8Bzu8FIueTl3eQVXvIVr3svRF/vGMZ/hhC9x
yje5wXdDPz8N/fwp9HPfX6ufR3LOY7jgcdzhBVzyQu7ySq54C9e8j6P/bp84
5jOc8HlO+S43+Ak3+RVn/JVb3Huqfu7LOQ/hgkdxhydzyVO5yzO54nlc8xKO
vnp/OObdnPAeTvkQN/goN/kcZ3yZW3wv9PPD0M/vQj/3+3X6eSCXPJy7PIIr
Hsc1T+Tof/ieHPMPnPBqTnkdN3gDN3kzZ7yXW7yf23yacz7DBV8K/Xw99POt
0M8PQj8/C/38JfR/6/H30M/9p+nn8ZzyFG7wVG7yLM54Lrd4Mbf5B855Cxe8
lTu8i0s+yF0+xRVf4Jovc/Q/e3yDY74b+vlB6Oc3oZ/fhn5+H/q536/XzwO5
zcM454Vc8BLu8BoueSd3eQ9XfJxrPsXR9x5f5JivcMKPOOWn3OAv3OTe0/Xz
EG7xKG7zRM55Chc8nTu8iEteyl1ezRVv4Zq38f93AP5/n+CYT3LCP3LKt7jB
d7jJd0M/3w/9/Cj088vQz+9CP/f/Dfp5AJc8jLs8kisezTWP4ahXj6dwzEs4
4ZWc8kZu8Clu8hvO+BO3eMgM/Tycc57ABU/lDs/gkudwN/xerng917yZo5/W
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
qp8Hc80jOPp1vhfHPJETnsQpT+EGz+YmL+CMj3GLj3Obz3DOd7ngl9zhV1xy
7/X6eQhXPJJrnszRNPvDMa/khLdxyju4wTu5yac44/vc4ofc5tec8zsuuPcf
08/9ueQh3OWhXPFkrnkmR7++x4s45qWc8AZOeRs3eBc3+ShnfJJbfJrbfIZz
vsMFvwz9/Cb087vQz99DP4/ZoJ8ncTS9x7M45rmc8AJOeRk3eAs3eTtnvI9b
fJLbfI1zvsUFP+AOP+SSX3KX33PFn0M/92vp/w32g2MexQlP4JQnc4NncJMX
csaLuMUbuM0nOOezXPA57vBlLvk2d/keV/yIa34a+me4T6Gf34Z+/hj6+Vvo
56Eb9fNwzngat3gmt3kW57yYC17LHd7OJe/hLh/mik9wzWc4+o3uO8d8iRO+
winf5QY/Df38LvRz/5/Qz2O4zVM457lc8Dzu8A9c8jLu8lau+ADXfJyjmT2+
zjHf4oTvcsqvuMEfuMnfOOPem/TzAG7zMM55Khc8kzs8j0texl1eyxVv5pp3
cNTo8UGO+Qon/JxTfs0N/shNHv6T+nkCt3g6t3kR57yUC17FHd7CJW/nLu/k
ivdyzYc5muU+c8wPOOFnnHKfzfp5ADd5KGc8nVs8j9u8hnM+wAUf5g5f4pIv
czf8fq7C7+ea33D0m7x3HPMnTvgrpzzwp/TzKG7yNM54Drd4Prd5Iee8hAte
zh3ewSXv5C4f5IqPcs1nOZrt/nLMjzjhp5zyi9DP70I/fwz9PHmLfp7CbZ7D
OS/mgpdyh9dxyZu5yzu54r1c836OfrP7wDFf5ITvc8pPucEvuclvOOP3oZ/7
/nH9PJpzHscFj+cOT+SSZ3CXZ3HFc7nmBRzNMW8c83ZOeC+nfIYbfIGbfI8z
fsgtfhL6+XPo52+hnwdu1c+DueQh3OVhXPFYrnkSR7/F9+OYl3DCSznlZdzg
tdzknZzxEW7xcW7zCc75NBd8MfTzk9DPb0M/fwj9/D30c+8/oX9uj/tzzAM5
4Qmc8nRu8Exu8hzOeC63eBG3eRXnvIEL3sId3sYlb+cu7+KK93PNJ0L/b+3x
+dDPl0I/Xwn9/Cz08/vQz3236edJ3OLZ3OaFnPNiLngJd3gll7yOu7ydK97N
Ne/jaJ77yjHf4IRfcsrfuMF9/6R+7scZD+EWD+c2j+ScZ3PBC7nDS7nkDdzl
bVzxEa75Ike/rceXOeY7nPATTvkpN/hD6Oeh2/XzKG7xBG7zYs55ORe8gTu8
mUvez10+yhUf45pPcjS/x7c45nec8EdOuf+f0s+DuMlTOeMZ3OJZ3OYlnPMP
XPBq7vA6Lnk9d3krV7yPaz7M0W83HxzzcU74Kqd8LfTz9dDPt0I/vwr9/DX0
c68d+nkwFzyEOzyJS57BXZ7PFS/jmldxtKDHazjmtZzwBk55Kzf4Bjf5Jmf8
lFv8nNv8IvTz69DPX0I/927r537c5UFc8QiueSxHv8M+cswLOOHlnPIebvAh
bvIlzvgKt/gqt/ku53yfC37EHX4Z+vl96OfBO/XzSK55IkcLzRPHPIMTXsAp
r+YGb+Qmb+GMd3CLL3Gbr3HOD7jgh9zh51zye+7y19DP30I/9/rT+pvuF8c8
gBMezylP4AZP5iav5Iw3cYu3cZv3c84XueDL3OGbXPI97vITrvgd1/w59C/y
fUI/fw/93GeXfu7PDR7HTZ7MGU/nFi/gNi/lnNdxwdu5w6e55Kvc5ftc8WOu
+TVHv7PHnzjmr5xwrz+jn/twg0dwk6dyxjO4xcu4zZs4561c8C7u8D4u+TB3
+RhXfJZrvsDRYveLY77NCT8I/fwh9POn0M/fQj/33q2fB3Kbp3HOc7jgedzh
5VzySu7yeq54M9d8kKPf1eOjHPMJTvgUp3yTG3yPm/ycM/4S+rn/n9XPwznn
sVzwTO7wci55C3d5G1e8l2s+xNES88Mxn+GEz3PKV7jBt7jJ9znjZ9zij6Gf
v4R+/hr6ue8e/TyISx7PXZ7LFS/jmldw9Lu9NxzzJk54B6e8ixt8kJt8jDM+
zi0+yW0+xTnf4oLvhX5+Fvr5ZejnN6GfP4V+Hv7n9C91zzjmqZzwHE55KTd4
FTd5PWe8gVu8g9t8iHM+xwVf4A7f5pIfcpdfcMVvueYPof/3eJ/26udxnPB0
TnkxN3gVN3k1Z7yWW3yA23yUcz7HBV/nDj/ikl9zlz9xxd+55sF/Xv8PPR7K
MQ/jhMdwylO4wbO4yYs54xXc4i3c5r2c8wEu+AJ3+CqXfIO7fJsrvsc1Pwj9
v9f3Cv38OfRz3336eRQ3eBI3eRpnPJNbvIzbvJJz3soF7+MOH+KSj3OXz3LF
57jmixwt6/EdjvkhJ/wo9POT0M+fQz9/C/3c/y/o5wnc5mmc83wueCl3eDmX
vJq7vI0r3s417+Lo9/V4D8d8gBO+yClf5wbf4SY/44xfhH7+GPr5a+jn76Gf
++zXz/255BHc5XFc8USueQZHy3s8m2NewAmv4JTXc4O3cJO3csa7uMUHuc0X
OOdrXPDD0M+fQj9/Df3c7y/q5yFc8zCOfr995pjHcsLjOeXJ3OB53ORFnPES
bvEabvNazvkgF3yEO3yCSz7LXT4X+vlK6OcfQ/8K72Po5xehn1+Ffv4Q+vlL
6OdvoZ+/h34ecUA/j+WcJ3LBc7jDi7nktdzlzVzxXq75AEeZ+8sxn+aEz3DK
l7jBj7jJjznjF9zi96GfP4Z+7p/r5wHc4XFc8iTu8hSueDrXvIyjld5Pjnkj
J7ybUz7CDT7FTb7MGT/jFn/gNn/lnMcc1M+TucMzueTZ3OV5XPEarnktR3+g
xxs45t2c8EFO+RA3+Ag3+TRnfIFbfJPb/IRz/hz6ud9f0s8DueQR3OVxXPEE
rnkiR6vcX455Oie8mVPewg3ez00+zBmf5Bbf5Dbf4pyfcsEvQz9/Cv3c65B+
Hs8Vz+Ca53L0B80Hx7yRE97HKR/gBl/iJl/ljG9wix9wm99yzh+44DF/WT/P
5JJnc5dXcsWbueZtHK02zxzzUU74FKd8gRt8kZt8jTN+xS1+x23+wjl/44L7
HdbPQ7nkKdzlmVzxIq55HUd/yP/NMR/mhM9zyhe5wbe4yY8446fc4pfc5tec
c9+/op+HcYfHcckTuctTuOIFXPMSjtZ43zjmy5zwDU651xH93I+bPJIznsAt
ns1tXsQ5L+WCN3CHd3DJh7jLx7ni01zzWY7+cI/PccyXOeEXnPLr0M/9/6p+
HsoZj+UWT+E2z+Sc53DBK7jDa7nkPdzlw1zxUa5DL0drzTfH/CMn/IBTfsoN
/hj6+Wvo50FH9fNobvN4znkSFzyPO7yYSz7AXT7IFZ/hmq9x9Ed6fI9jfswJ
P+eUX3KDe/01/TycM57BLZ7HbV7OOa/igtdwh7dxyfu4y0e44qNc83GO1pkH
jvkOJ/yFU/7GDR5yTD+P5ozHcYuncJvncs7zueDl3OEVXPI67vIGrngz17yd
oz/a410c8x5OeC+nfJIbfD7088XQz3dCP98P/fwi9PPr0M9fQz/3+ev6uS93
eRBXPJhrHsnReveAY17NCa/jlPdygw9zkz9wxr2O6+cB3OZhnPNILngsd3gS
lzyTu7yGK97JNe/j6I/ZD475LCd8mVO+wg2+wU1+zhl/DP38PfRzv7+hn0dz
wRO4w1O45Fnc5RVc8SqueS1HG+wDx3yIEz7GKZ/hBj/gJr/kjN9wi99xmz+F
fv4S+nnQCf08hkuezl2exxUv45pXctQy3xzzbk74FKd8mxv8nJv8ijPuVejn
3tzmvpzzGC54And4Kpc8k7u8hCteyjUv52ij78Exr+GEN3HKW7nBu7nJhzjj
o6GfL4Z+vhL6+U7o5+ehn9+Ffv4Y+vlz6OdvoZ8HntT/E+aLYx7OCU/mlOdw
g+dyk3/gjFdzizdwm7dzzie44DPc4Ytc8n3u8jOu+CXX/D30b3If/qZ+HsoJ
j+OUx3ODJ3GTF3LGa7jFG7nNBznnY1zwKe7weS75Enf5Llf8nmv+ytFP2r9T
+rkfJzyMUx7LDZ7JTZ7NGc/nFi/kNi/nnNdzwZu5w9u45N3c5T1c8Smu+QJH
m81T6OcroZ+fhH5+Ffr5S+jn76Gfe/8t/dyf2zyIcx7OBU/jDk/nkjdyl7dx
xSe4Dn0c/ZT94ZgfcMKPOOWv3OBBp/XzVM54Frd4Lrd5Hue8mAtewh3exCVv
5y5f54pvcM23ONri/nLMff+2fh7MKY/kBk/gJi/kjFdyizdxmzdzzlu54J3c
4dNc8m3u8h2u+D7X/JqjP25+OeaBZ/TzEE55BDd4Mjd5Fmc8l1s8n9v8A+e8
kws+zB0+yiUf4y6f44qvc80vONrqe3DM70M/fwz9/D30c5+/8//WVMexO+Rx
YsdHREQ2YkRERMSIiIhszGYjIiI7shGRjexsRDYiYkRENiIe2YioqlFV51R3
VFVVdZ+tqv7OOY9zzjnnPM4555wzzjnnnDOqqrpVo6qqKttLf6/vn6//nvf3
mc/no58ncsEzucOzuORFXPFS7vJK7vE67vN6rnkjN7yNW97L0d+zHznmW5zw
Y075GWf8IvTzu9DPwwf080gueSpXPIO7vIB7vJz7vIpr3sINb+WWD3O01X7k
mI9xwgOc8hnO+BznfIULfhj6+Vno5zehn0f9mn4exz2ezH3+nGuexQ3P4Za/
4OjvD3oNx7yOE97NKf/AGZ/knC9wwZe5w9e45Bdc8S+hn4ed1M/Duc/jueZJ
3PB0bnkuR9sGPY9j/pITXswpL+OMl3POm7ngPdzhAS75NFf8iLv8NPTzs9DP
b0M/fwj9PPTX9fNIjv6B741jXsAJf8MpL+WMN3DO33PB+7jDV7nkW1zxPe7y
Y+7xc+7z6FP6eTI3PI1bnsvRdvPAMS/ghBdzyt9yxss453Vc8Fbu8GEu+RRX
fIa7fIF7fIf7/CL089vQz8N/Qz+P5qgc9BiOeRInPJ1TnskZf805L+GCl3OH
13DJm7niLdzlndzjXdzng1zzCW74XOjn66F/x6Dvhn5+Gvr5Vejn16GfJ5zW
z1O54Bnc4Tlc8lKueBV3eS33eDf3+SjXfJwbPsktX+ToH7pXHPNdTvhnTvkl
Z/wx9POwnn6ewB2exiUv5oqXcZe/4x5v4z7v4ZoPcsM/css/cbTT98IxX+KE
73DK9znj55zzy9DPQ87o5ylc8gyueBZ3eS73eCH3+WuueSU3vIZbXs/RPzJv
HPMPnPAxTnmAMz7FOZ/lgi+Hfr4V+vlu6OcXoZ/fhn6e/Jv6eQbXvJQb/pZb
Xs/RrkHv5Zj3c8KHOeXjnPF5zvkiF3yJO3ydS37JFY84q59Hc4/HcZ8ncM3T
uOFZ3PISjv6x+80xb+SEN3PK+zjjA5zzQS74J+7wGS75Gld8O/TzvdDPk35L
Py/impdww6u45TUc7bZfOeZtnPAuTvkoZ3yBc77IBd/iDj/lkt9xxUPO6efh
3OMR3OdPuebZ3PACbvlrjn7FvHDMqznhTZzyDs54N+d8lAs+yR2+xSU/44pf
h34e8dv6eSL3+XOueS43/BW3vIyjPb53jnkbJ7yDU97JGf/AOR/hgi9zh+9x
yQ+54ifc5Tehn4ef18/juObx3PBsbnkxR7/qe+CYl3DCyzjl7ZzxLs55Lxd8
hDs8wCWf4orPcpevcI9vhn6+H/r5Qejnx6Gfn4X+vYP+OfTzkN/RzyM45TGc
8VjOeRIXPI07PINLnsMVf81d/oZ7vJz7vIJrXssNr+eWt3D0Twa9lWM+EPr5
UOjni6Gfr4R+fhj6+Vno5zehn9+Ffv7kgn4eyz2eyX3+imv+lhteyS2v4Wjf
oPdwzPs44R845eOc8SnO+SYX/JQ7/JJLHv+7+nkid3kq9/gz7vNcrnkhN7yY
W17K0T/1PhzzKk54Hae8mTPexjkf5IIPcYcHuORboZ/fhX7+EPp57EX9/BnX
/AU3vJZbXs/RD/Y7x7yLE97NKV/ijK9yzve44Ifc4cdc8nOu+DV3edTv6edx
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
uOL33OVJD/XzVO7zDK55OTe8lltex9FvuYcc8xZOeDunvJMzPsg5/8QFD3CH
T3HJl7nia9zlu6Gfn4Z+fhb6+VXo5yF/o5+Hc3Ru0CM55lGc8Kec8jzOeBHn
vJwLXssd/o5L3soVb+cuH+AeH+Y+H+eaz3HDj0M/Pwn9vz3o56GfX4Z+HvFI
P0/gjOdyzvO54IXc4ZVc8mqueAN3eRv3+AD3+QjXfJwbPsstX+Do/KAvccx3
OOFHoZ+fhH5+Gvr5VejnkX+rnydxyVO44unc5c+4x/O4z8u45u+54c3c8jaO
fsc+55iPccIXOOVbnPEjzvk1Fzz8sX4ewSWP5IrHcJcncI8XcJ9XcM07uOFd
3PJ+ji64XxzzACd8mlM+zxlf5ZyfccEvQz+/Cf38LvTz0EY/j+MeT+Q+T+aa
F3DD33DLyzj6XfPHMW/ghDdxyls54z2c8z4u+Afu8Aku+QxXfCP0873Qzw9D
Pz8K/fwi9PP70M9Tnui/OOiZHPMsTngpp7ycM17FOe/igo9wh49xySe44tPc
5bvc40fc5xdc8wdu+CO3POY/6v+9QY/lmCdxwlM55c8446845+Vc8Hfc4U1c
8g6ueDd3+QD3eID7fJJrPsMNP+GWX4f+S+Yv9POwp/p5FKc8kTOexTl/wQUv
5A4v4ZKXccVruMvfcY+3cp+3cc07uOGT3PIpjn7ffueYb4Z+fhL6+Xno51eh
n9+Hfv4l9PPI/6Sfp3LFs7jLs7nHX3Kfl3DN67jhjdzyZo4um1eO+QgnfIJT
HuCMz3LON7ngB9zhx6GfX4R+HvpMPw/nHk/iPk/mmj/jhudxy19w1LfvOeZN
nPAWTnkHZ3yUcz7HBV/iDl/nkh9wxY9DPz8P/fwy9PPr0M/vQz8P/c/6eRhH
V8w3xzyBE57CKc/kjOdzzku44BXc4TVc8jqueCN3eRv3eDf3eR/XfJgbPhn6
+Wbo/4NBPw39/DL08yfP9fNozng85zyfC/6SO7yUS17DFa/nLm/nHu/kPu/n
mg9xwye45QGOrppfjvkcJ3wt9POt0M/3Qz8/Cv38c+jnV6GfR/wX/TyKuzyW
e7yc+7yCa17LDe/mlvdy9Ifej2M+zAmf45TPc8a3OOePXPCwF/p5FJc8miue
zF1ewT1ezX3exDVv5oa3css/cnRt0Mc55vOc8AVO+RJnfI1zvs0FPw39/Cb0
8y+hn0f+V/08g3s8k/s8j2teyA0v45aXc/RHg17FMa/lhNdzyjs54z2c8yEu
+BR3+CyXfJMrfhr6+UPo5yE/6+eRXPMobngstzyeo+v2Pcf8OSc8m1Nezhlv
4Jy/54K3cIcPcMlnuOLb3OW73OPHoZ9/Dv089r/p52nc8lyO/ti+5pgXc8Ir
OeV1nPE2znkHF7yTO3yGS77KFT/lLr/kHr/lPn/gmoe91M8TueWFHN1wrznm
pZzwck55LWe8kXPezAVv4Q5v45IHuOJT3OVb3OOh/10/j+CaR3HDY7jlaRz9
yaA/5Zhnc8JfcsqLOOOvOefVXPBa7vAmLnkHV7yXu7yfe3w09POx0M/HQz9f
Df18K/TfNG+hn5+Efn4Z+vlN6OdPXunnsVzwBO7wdC55Fle8kLu8mHu8gfu8
h2vexw2f4JZPcfSn7hnHfIMTvs0pP+SMP4R+HtLq59Hc4XFc8gyueCZ3eR73
eDH3eQ3XvIUb3sMt7+folnvFMR/hhI9yyqc444uc883Qzw9CP38M/Tz8tX4e
xV2exj3+jPs8h2v+hhv+jltez9GfuVcc8yZOeB+nvJ8zPsQ5H+WCj3OHT3LJ
t0M/3w39/CD087PQz7+Efh76P/TzKG55HEe33QeO+VNOeC6n/AVnvJBzXsIF
r+QOn+SSL3PFd7jLr7jH77nPI9/o5zHc8FRueRZHtX3OMW/mhPdzymc54+uc
800u+AF3+DGX/JYrHvI/9fMI7vEE7vMkrnkyNzyDW/6cozv6OeZVnPAGTnkT
Z7ydc97BBR/gDh/jkk9yxedCP18M/Xw99PO90M8PQj8/DP38OvT/uXsW+vlj
6Oehb/XzKM54NOc8nQueyR3+nEteyBWv5C6v4R5v5D7v5Jp3c8OHueWTHN0d
9AWO+SonfCP084vQz0P+l34ezgVP5A5P4ZJncsWzucvzuMeLuc/LueZV3PB2
bnkPR38x6L0c835O+CCn/BNnPBD6+Vzo52uhn2+Ffr4b+vl+6Ofx7/TzZO7z
NK55Hje8iFteztE988gxn+aEr3DKtzjju5zzPS74GXf4OZf8miv+hbs87H/r
51Hc54lc80xueC63vISjvxz0Mo55Dyd8gFP+kTM+zjmf54JvcoefcMlvueJP
3uvn0dzjqdznr7nmddzwZm7D7+HovnvLMd/lhF9wyq8443ec80cueOj/0c8j
ueSpXPGn3OV53OMV3OetXPNubvgAt3yMo78yrxzzRU74Cqd8jzN+wDk/5oJf
hn5+E/r5l9DPYz/o5+nc40+5z/O55gXc8EJu+Sv+ux/+/72YY17NCa/jlDdw
xjs45xNc8Bnu8FUu+T5X/DD085PQzx9CPw/7v/r5E254Erc8g6O/dm845q85
4SWc8lLOeD3n/D0XvIU7vJ9LPscVX+AuX+Ee3+c+vwj9/Cr08+vQz8M/6n/o
vvyd/x9fn4Kv
      "]], {}, {}}, 
    {GrayLevel[0], PointSize[0.002777777777777778], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1: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
9rMsrZNPq+ALXolNi8R+OHvkQJfPYj8cWa2syz+xH36/SNvP5i774YoJwxSN
aD18Y9av8a1pA+xRdtC/M22ElW6+C/rTJridU9WIkbQkuFw4dPPs2im0FL7b
KjBhHi2D93VtkrSMlsOO/+4cjaEFeHBI9NlttAJucqBzVjKthLfFlBhSaRV8
qVnS4wxaDa9XjX1zl9bAlkE1y57RWrhpq+x/H8R++M3GCOvfYj/sk9KlXrV7
7IdnrPziWJ82wrKaR11b0CY4YmhAt460JATzX4/mnn1oKdzmpdFLQcvgxcKu
iZNoOTxDMWHmbFqAf9RutGgprYDbbXioXk0r4Srnt69LoFVw5K7xW/fRaniH
e5N9KbQGHhv57Lie1sKnIpPO3aZ18IlOM7If03p4mLZN7juxH1518dPTcrEf
nhKX+q5yLvvhgvph32rTkqXlwgefvhbNaCm8q791jfa0DP74LrdBL1oOP+iX
6DSMFuDJI/3bj6cVcGRdt54zaSXsseHPwCW0Ck5Iv+6zglbDq3YkKDfRGrhW
+2mz99BauFOoW/BxWgd/Camw/AKthz1d7sbm0Aa4ffyeHQ9oI3zqRFDya7Ef
vh3V7+RXsT+0XAi3qnepYh774cw+727Y0jJ4V/uL9x1oOWyTv/GFCy3AtVwC
PnanFfDBrh4/B9FKOO9n7cpjaRW8SVViO4NWw0XbM5sspDXw1ZDE1lG0Fu5m
s8RdQ+vgXqO8eu+i9XC+l/OwI7QB/mVh5ZtOG+ETAcXTrtEm+FvUZdV9WhKG
44fX7rBisR9um79s9RexH25sM3GzJJ/98LYfPbQ1aAHet73Jkca0Au5m+pvW
hlbCE38aM7rQKtj6bMYdT1oN93NOfuRDa+CqPjGv/WgtPFquKlXROtjl8qh/
4bQe1lTuYb2eNsAhkmb1dtBG+P2xas0O0ib4pW2paxotWYbXc+vH3bJoKTzn
a5ZnLi2D/yzSeT8X+2HbwzsmfRL74cObV836I/bD190WLra+z37z9lZMiWpA
q+D4dSM2tKTVsDDQY7s7rYHnnXHZ35fWwrInTVK8aB3sc7rGxcm0Hq7aT3Jj
Dm0wb2/ll/xQ2gh/D3v5fA1tgtu1evBhCy0JLxder7r14z9aCtvvvFLpFC2D
86edsb1Cy+GqL441MdACfMFuf+untAL++CPRvUTsh3dsTuj9U+yHs4pih1kV
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
YkA8rYf7+MtHzqYNcFSZNDGdNsK9gz6nradN8O3I25t20RJ/zB92Rw4fpaWw
4+ysKxdoGVycmWy8Q8vhEUNHfnsp9sMZN31qfBb74aSvHZtJ0tgPNz5v7VyH
VsGTvMt9GtNqeFbC66FtaQ3sMfj6pB60Fj767MgCb1oHv2mYvS6Q1sMXKi3Z
N4I2wEPXJ55X0UZ466uoR8m0Cc5+GGBKoyX9Mb/N6l15LS2FD9zq0HAHLYMv
3G7sdISWw4vn1epzjhZgi9d/QgtpBez45X3cc7Ef/rf32ZyPYj88r9GtzHKx
Hz7e9VxuzSXsh7V/8wrsaC3sPGX33da0Dp68LvtdV1oPj5y4WtKHNsCSb0ut
B9FG2Kf1/LZK2gS7V0vuPZ6WDMD8kjklMImWwm3vThidSsvg5mdGJ6+m5fDZ
YVErttICbLkjcvtBWgFXzo44cZpWwpt9Q28ZaBVcujGo6Cmthh9tHvynVOyH
40MH1f0t9sMHjgW0qr6U/XDWlQBXW1oPt1o8SOFAG+DwssHRXWgj3MUmePp/
tAne/zw0fSAtGVgm3IkYsnkoLYXXpyiPjqVlcPUh0den0XLY7sWYlwtoAb5i
M/HnSloB2/+aWnszrYQbpM1qvp9WwfuvLuiup9Xw++Ma/+u0Br4cljX8Ma2F
vbdunlIi9sMjN+1d/FPsh5v1O66tks5+eEbOhUP1aSM8Zefty81pEyxVvngm
pyUKHP+s6WsvWgo3uveven9aBi9ZbdksgpbDa6vJnEfTAuzVupPvVFoBL/7q
MWwerYTjVEHxK2gVXJwVu3ATrYYrTE5av5fWwPt/a/afoLVweaetF67QOvi5
Tf7jB7QeHrbz1qcisR+OLy2u8l3sh2VPKjSupGE/HJXUsFM9WhJgfn9VF28Z
LYX3n+8f0ZGWwccnxqrcaDkcdmXuPD9agNMKN2aF0go4MDV/bwytNB/v44Oz
k2kVnF3x54M5tBpudd7mo4bWwO7du1XaSGvhouBgu920Dm7hMLXjcVoPf960
2vMSbYAHXTsWeo82wh7bnsS9Fvvh004V5n4R+wfhehDjsLrCMvbDCf5+uy1p
GbzFOOF0E1oOR7VYda8dLcD76p8odaEVcNrBVxV8aCX81aK2bTCtgt/969o+
ilbD43ZF/jeJ1sAzKqcGq2ktbF3n0NiltA52PWdUr6P1cGnb2qt20ga4de+e
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
o6a0iW5HC3DN55HbetAKeJLZnTMDaSW8Lq/141G0Co7vFVUeRKvhcePuNZ5N
a+CfLVy6RtPaiv2tWTYygdbB23Y+m72F1sN7J3Rfd4A2wOpr63UnaCPs8Kjk
5mXaBCcnDv54l5a44Pj7vtvihdgPF1cyb/tF7IdPZQUOlPiwH/a31E+uQwvw
jUYtYpvRCrha7uKdbWklXMvm2flutAp+2Eww9qfVcNil7X//ozXwnYbmNhNp
LfxHGuw2i9bBn45eGxNF6+H9/1wWrKENcLvS9UkptBGes7Yscx9tgmPvB9w5
RkvaY72Xm/v5Ei2Ff453kRbQMnjs1iSXIrEfjln+z9sk9sMzm0yd/lfsh5v/
dyeu1n/sh9d19djblFbB13L25bam1XDuT6uXXWgNvOReTOV+tBauPN5k60Pr
4P6r/YVAWg8PCrrhH0ob4Dove0ZG0kZ4fZ30lFW0CX5otDm5iZbIy4Vn4xIK
99BSeHdUpR9ZtAxu4z3H6iIth0POv+50mxbgmc/GjTDSCthlt0FVIvbDB6z6
J/wW++EXzqfTa45kP/ywpGNeY1oDx4/e/86B1sJ/ptnVcKV1sKNDiqMnrYct
VjboP5w2wAeT4oMCaCNc1bvGkhm0CW66f+n2cFrSAfMfnUQfR0vhmcrIpxtp
GZx+vPz3LloO7zqxwDqTFmCfiT+6X6AV8MmseaMNtBIu1H2f95RWwQf/m7/h
g9gPd93+82i52A/PT1p0u/oo9sMhnf+YGtI6uFG4uq49ra/Yfpq5SyfaAK80
i/PuTRvh4Z51pg+jTfD1dolx42lJR6z3zjbdO52WwoVl23MX0jJ4+pM2L5fT
cjhj6pHKSbQA79rqZpdGK2CviEvCEVoJbzdTBOhpFby3w6PIm7Qa9q8RnPqY
1sCX4r6efCf2ww+PqB/8FPvh1KV1flb1ZT9c519qQyvaALvYtXNtSRvh8o+n
fDrQJnj2BO+wXrSkE+bjUU80Q2gpPL1faMY4Wga/PVrp5lRaDlteT/wwnxbg
lytbWyyjFXDQ19NtEmklvNp8xMAdtAr2P/t6so5Ww4WyxbFnaQ38x8kqLY/W
wlefHbzwkNbBHj37PX8j9sNjej/9913sh20+zW9eZTT74eX9LN3r0yY4uW/6
OFta0rlcGPZh4KL2tBQ+0PNlsjstgw+6xhzzouXwiPst7o2hBTjV9mxpMK2A
VzcYX38erYRtdL87LKVVsE9pqmIdrYadnruHamkNvHveszWHaC2ckxl98DSt
g6NTWl2/RuvhZ22vvC2kDRWeEFL9tdgPqz3rOX4T+2F9Xna/ymPY71ouaP/6
BdWjpXDzB5WXtKBlcE+/A9udaTn8c7mP3o0W4BF+v58OohXwoAe7/vjSSvjp
32HNJtMqWHqjvMccWg0/8dw9JobWwP0njligobWwl9O/pK20Dn6fcjDrIK2H
HbLGFpykDXD5vBpfr9BGeNrz4/Xu0yY4rHSK/KXY36VcsNI1GfZV7IeHNbg+
o9JY9sO2tpGr69JyeOW99gdsaAFe3bn4qhOtgO3dNr7pTivhke+8qg2kVbB1
n0oOo2g1PK/Psb5BtAYOfj9jYhithT/2tI9R0zq4Wtcn2nhaD2c92HAulTbA
P1sNe7qfNsL5jWv8OU6b4G5ZOdaXaUnXcpzCi3vcpaWw/nWPMcViP2yM/DH/
s9gPrz2dmfRP7Ifv7AzLqj2O/fDuTh0KrGklXD3E9KUNrYJ/e+vqdaPVcOQ9
lbw/rYHjq3cc9h+thV2Kv86YQOtgv8nZq1W0Hm64buGBxbQBVk52v7aaNsKu
xZXebqZN8Mbql6vtoyXdMB+6t9rhGC2F/3n79LtEy2DzkKZBd2g5vKFTUcxz
WoB1O/dv/yT2w/+dnq3/I/bDMZHuzyz82A+7va72twmthiPKbjdrTWvgfplb
3brQWjip0fSxfWkdHNqy28IRtB423K+SrKQN8LHOBdkzaSNs32Pn3QjaBDd+
E1a6kpZ0x/zIw7P+JloKa9wbdNxDy2Crly8VWbQctnE9HppDC/A+51Xxt2gF
fOKmf/ozWgl7N+6U91HshwNrVn//S+yHf6U9qVFzPPsrnu/N0daNaS2su7Ny
gAOtg28GT5jcmdbDIWk9YvvQBnhVXP00BW2E2zT6eMGfNsEDhlx+HkJLeuD+
5bRDEk5LYcnRyBZxtAxOKRrjsZGWw5knu4zfRQvwYLcGEUdpBTw+6Mvm87QS
LnG9dSKfVsFlGbrCJ7QaXnJb8+O92A8v2zKrYbnYD1ep5+Na3Z/9FeNzdv2v
Ia2H53xuNLsVbYAn+P9a25E2wtdnP9MJtAk+2OFi/lBa4ob9J+8r8aOl8P3d
CbWn0zLY1n9eu4W0HC4+M95rOS3AzXL7TdtAK+Dr81zidtJK+HN+o72HaRW8
+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
w/HFyZ+Rp+H/AYlCq1I=
      "]], {}, {}}, 
    {RGBColor[1, 0, 0], PointSize[0.002777777777777778], AbsoluteThickness[
     1.6], LineBox[CompressedData["
1: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
Ky3Tu/ontj2tgv9LcDzTh1bD8zp1NwylNXB62OiPfrQWLpuxwHoarYNb2+1s
uIDWw+4zz3VbRRtgrwUvfbbSRrhf57IZ+2gT7LzfabWOlphKhZJrA+Iv0VI4
Zfv085m0DB5Zf9Pj57QcLvA5+yVf7IcDe76q8lPsh+8+ruBcwYP9cCMnF9fa
tAr2k40a3ZhWw0sN6tB2tAZe2+Hout60FlYPeHJwMK2Dx1cvd2UMrYdlK1xe
BNEG+M4xv+/zaCM8Liqq5graBD+wT225mZZ8LRXajczrr6WlcIjHfxOSaRm8
9aPHggu0HN7TZ+HmO7QArxtwNOkZrYDHl+XcyBX7Yem0Wm9KxH744Cr33+UG
sh9uOGJRnVq0Bp7/OKVdI1oL6yrleraldfCdwvoBPWk9fG2571JP2gDvvb1u
xyjaCI++ev3EFNr01XJ/XFnmHFryDfujzO55y2kpfO7FXCsNLYM/7tbV20PL
YXPNos5JtAC/79RKcY5WwEeqTZ12i1bCQ7ceXPGEVsEZdz/seS/2w07nm6Z9
E/th3zGBDyWe7IcnHk4ssqF13yx/b1pQqQGth6392zi1pg1w7LWQXt1pI1zl
5cmRHrQJVhwoVY2gJcWlwkyZ69rJtBSeOHTFgdm0DG7dJuPyMloOZ1ywfb6e
FmChbGxJLK2Ao4sTbI7QSvjQzqIWqbQK3vW1a/8btNoyv98R4x/RGth85m7Y
W7EfnuJcb7NJ7IcT+k9N+if2w8ftztyoPoj98Kbt1m8caSPcP3P47xa0Cb5+
IqFOV1pSUirYDy5p505L4a7b3AcNp2Vw803bAybScjjX9ePSEFqA5+zpvTOc
VsBZKZtOrqWV8PfQ3KydtAouyOuZn0ir4cM2m8udoTVwl7z8+tdoLbxxttD1
Aa2Djx/bMcxI60ss5ytfp38W++FRPQev+iP2w0/XHdBWHcx+2EkjOe9AS77j
+Oc+7nEzWgrXTEr90omWwSev1anan5bDDTfOcR5GC7BXtQeu/rQC9ujefsxM
WglXqLtpzmJaBUcd+bo+ilbD94t8Dm2nNbDx7an0A7QW1kX9l3OS1sED3i76
eYXWw9pPr2oZaAN8/lD/Nq9oI7zT/vCAT2I/3L1LzYm/xP4f+L5Umr+48hD2
w5eic7bZ0zJ432V3nTMthwccTL7TgRbgw64OHwRaAWeuiSjzopXwsRVFdcfT
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
5ndH+oXTJrh4vs+EtbSkNj5/7tfCnbQUvpiSsC2RlsEbRgw9fpqWw4qkn5lX
aQEud2pf/n1aAe+f4WVtpJVwlye/Gn0W++FUU2LPP2I/3PLCiFFVA9kPr+lm
PceB1sJPppzc0IzWwbXcJh/pROvh7g9r3+hHG2Dv2tffKGijZXmtw/5OoE1w
74Mt686kJXYY75lfdlpMS+HnfzSKKFoGrznuPmM7LYdl//1efYAW4IS2xxNO
0gq45vegy1doJTx5ZqMX92gVvDfm6Y8cWg1fU2lsP4n9sOG3p8svsR++2tV6
UOUg9sO7nS9Psaf18Lj0RcudaQNsVatrXAfaCK+TlqQKtAn+rT/+yIuW1MH6
clKZxtFSeFWndtWn0zI4/ufn5gtpOaydntJ/NS3AyzUq/220Au4f2GFxAq2E
8z+VxBynVfBM59QTl2k1/Kj6krtZtAaud1D4+ILWwn1NFSp+FPthj8KMxqVi
P9x2++beFaeyH/5aPGaMHW2EN1s5zXOiTbCt/qNGTkvszUJIu1NJrrQUPuy9
9NYQWgZflnm+H0vL4eP77CTBNDYeYdljY70wWgE3TzvWdSWthI8OXTx8C62C
K23xDImn1bBrlMPaFFoDe8vzD16ktXC3NanpGbQONmuiXmXTenjLIL9feWI/
XP50W/sfYr+95XxN0sE6mP3wtN2PhtrSkv+wv6l7OFhGS+GWHktXutAy+GZT
3/hetBzufbrVxUG0AK/8bpU9mlbACbnZJYG0Et685oR0Hq2CR75Y2yaSVsOf
Xk0ZuInWwMO3CAF7aS28vrSe+hitg3fYlMaep/Xw3MePzt6mDbBs6ImHT2kj
vHue5ssHsR/O9wqpViL2O2B9ZXs1LzeN/fCn2u36S2kZvL+spn9DWg632v11
URtagBcXPIzpQSvg2LwzJwbSSnhVzK67I2mVg+X3mqUfA2g1nF4xoOIcWgPX
vOXptJzWwi16yF030jq42vj/xsbRejhVXjbvKG2AXU7nbUqjjfDMj4ZjN2kT
PM9w7vZjWlIX5w9BBz68E/vhF8kaq29iP9wtcUkDyXT2w+MVwd1taAEeeGTk
iPq0Ai495Ta7Fa2EZ6k6ru9Gq+BDL50OD6DVFpttr/vSGnj6zfJvJtFa2OT+
/Y+K1sE95+U5LKP1lvmPeN5pPW2A6+RmKWJpI5zYPH3GYdpkWb66Z9ecpSWO
ZqHKxaT912kp/FKaoH9Iy+CQOrtevhH74fQ7m0q/iP3wI3m03T+xH97vESmv
PoP9cIea4UMcaRW8dHXY1Ba0Gl6tC13RhdbAQ6Nnad1oLXzfbvoFH1oH11RM
faak9XDVXoEls2gDrH8WIA2njXC7ZgFt1tImeKxzwMCdtKQetseHAQGJtBR+
2SFQfZqWwR36T919lZbDgvX01Pu0AFecP+vRa1oBr9wRaioS++Hz08Oq/xH7
4cQvS1pUncl+eJBzpJsDrYHjq0Qrm9FaOGXvpiWdaB0cmrtzRz9aD+fn7Dul
oA1w7VVJhgm0ES5+debTDNoEr8i/UnkxLamP8+N9Wc5RtBS+XOO5sJ2WwUEt
88YdoOXwle8lC07SApwZWn7bFVoBr9baHr9HK+FvS52ycmgVbGPTsaBQ7Ief
DnWr8EvshxWuIxtXnsV+OOz11N72tA4e0n7JGGdaD9/tqJnXgTbAf3P3bxJo
I/xs0LljXrQJVvobbo+jJQ0wvnTO+zCNlsKhu/5ZLaRlDSzjBfuGq2k53G5H
ux7baAGuLvMcmUAr4C2jJ4cep5Xw1b5LN1ymVXDsi51Hsmg17NjszI0XtAbu
3/jh2wKxH7bNMv37KfbDq1vWrFcxhP3w/i4uXe1oAzylZOhwJ9oIZ02aFSKn
TXD28o1rXWlJQ7MQPex44hBaCr+6//DqWFoGPyv38/VUWg7Pfe/4Zz4twCfm
93FYSSvgLWkBnbbQSrjOsWhFPK2Cuw87PiOFVsNlB56tuUhr4ClHJQcyaC08
fWLLK9m0Dq51yycnT+yHR7xeYv4u9lumn5hYx1rFfvhco4ftbWkT/Hxg2VAZ
LWmE8zWnNtNcaCn8NWnMql60DM7PW71vEC2HFz08c2k0LcCHQ3KfB9IKeM4F
+59zaSX8LM2jdiStgp8ELWy3iVbDs24cHbyX1sDxj18FHaO18IxttivO0zrY
UMFDe5vWN7Jc71xy4SltgJWlx599EPvhtYvyS4rFfnjosUa1ys1mv8wsHNCM
aiulpfAWZ41nQ1oG2wffntKGlsPyCeUjetAC/LK8656BtAJuOHbhuZG0Ev6m
PP0kgFbBfg7fvoXSaniUul3N5bQGfr9jZuuNtBYuPynJI47WwadeFE4+Suvh
nxXaqNNoA3zbOGP3TdoIt56RnPqYNsGNDpkevRP7G2M8v7Xj169iP3y8fVgN
SSj7YcWy8y1taDkcHi4ZUJ8W4O5tBkxqRStg9dp1S7vRStg39uGuAbQKPu1X
76wvrYb3ZU5+OInWwA6fk76oaC1cX/+j2jJaBx/q17fFeloP6+etc4ulDfDE
Mc+Uh2kjHF3kHH6WNsG9O4TuvE5LnLB/ba4//ZCWwt2zbB68EfvhiCYTPn8R
++HhrZKr/hP74aNv/jWrPof98BpPRX9HWgl/nLjPvwWtgh+0+r64C62GXfcP
3OFGa2CXu7tP+dBaOOHQV4OS1sGxHT2KZtF62D4krko4bYBr+5U0XUsb4c0/
B/fbSZssdts/IZGWNMH+qd/fRadpKfyfaeT2q7QMjvU6fvI+LYfjxlc3vKYF
WNZg6qcisd/i9dcq/xH74b3HGjetOpf98O6ly/o60Gq4ruTV+Ga0Brbt0HtR
J1oLr7KLi+lH6+CwxL8nFLQefv9xwr0JtAHOeqUvnEEb4faRTSovpk1wzWer
nKNoibNZCM75KGynpXD3Ld7jD9AyeKX51MKTtBweKK0Xc4UWLK8/XX7iHq2A
u3kX3M2hlXBA2LDCQrHf2XL97VylX2I/3Ci7iXPleeyHU2w3CPa0Fj7xp3Sc
M61ztpzvBizsQOvh+m8N2wTaAC/L6X3CizbCI6OO3h1Hm+D4D3ULp9GSpjj/
+7am0kJaCm9MKW2ympbB8gbBwjZaDrv3fD4ugRbg21WGLDxOK+DLay5tu0wr
4aap7U9k0Sr4z/YDd1/QarhvC8fCArEf/jF1Y6VSsR+uO7aCc8X57IeP/l4s
2NF6+MjQ4nFOtAG2V0xfKKeNsKnc+22utAnuHDj+xBBa0sws5C18encsLYWt
XX0Kp9IyeP2JrEphtBxe9tTTeSUtwDlJN4QttAJO6OA2Pp5Wwg+npi9MoVXw
TO++MRdpNTwrV38ig9bAz9r2vZdNa+HEpumFeWI/bMzqX/mH2A8vbXbD2TqM
/XBkO8++trQR/pyfOV5Gm+BLPsMWudCS5jg+zXgS04uWwmu7jjs5iJbBUSfe
3htNy+GCnOBPgbQAp6R9rTyPVsCP3Rc1jaSV8ISI8v020armluut6yfspdXw
luoOi4/RGrjv2ITt52kt7DW63anbtA4+X/GC4SmttyzfFM+iD2I/fHru0yol
Yj8sdApsVm4B++GW+7/3k9KSFmZBdW2lf0NaCttts1/ShpbB9vaHdvSg5fAc
jx6nB9IC3LZl1v2RtALuf175OYBWwqf+llSdQ6vgZaao5stpNbx/SyO3jbQG
bpp3WhlHa+G/H4eEH6V1cLu973em0Xr4XPnwMzdpA7zbwf7hY9oIP8lJ+fJO
7IenDh9U/ZvY39IseC/80EKykP3wBu/l7ja0DG7ypMGk+rQcrl7j/NJWtAAP
Lhkd241WwK/X/jw7gFbCNx7GPPKlVbBVZpevk2g1rJn7tMZsWgPPzlrQahmt
hfc/cfRYT+vgVpqLk2NpPVzul1J9mDZYXrerEHeWNsL7Xh1Ou06b4BljvJ88
pCWtcD644vu3N2I/XOi/u6ZJ7If3FfZv80/sb2X5PeHTwOqL2A+ba2+b4kgr
4Fida0QLWgmv/pu/pwutgq/+2nLejVbDAw/1eeZDa2DHip9KlLQW7ma3s1YI
rYO1Dwa4hNN6eHjf74PW0gZYodwftJM2wjHtfFck0ia4aYp1/Gla0tos/Ht1
+uJVWgo3uBz0/D4tg1d6O/58Tcvhzpqs2p/Ffrj18uXyP2I/HOTUZWjVxeyH
P84pDHagVfCJefGrmtFqWN98dEInWgPXiq6p70dr4UO7b75U0Do4wl9tnkDr
4b0PutvPpA2w5Edxh8W0Ed53O9k7ijbBa4ZOm7GdlrQxC8nLm0UdoKWwfeC7
AydpGXz5lzb9Ci2HE/v4v75HC7ChU8M/ObQC7vo8x+GT2A+/aren8y+xH77e
2d+n8hL2w/mFshB7WgMP9Hm31pnWwnlTDx7qQOvg9HbTrgu0Hn5+0OWtF22A
294t/jeONsIXDqTVm06b4FVt1d0W0pK2GB9P8RixmpbCt4fWDN1Gy2Ah9+mG
BFoOf3OJP3qcFuCc5tNvXaYVcJmh84csWgmPaWVV7iWtggs7ZjX8KPbDp4p2
9iwV++GTo4JGVwxnP1wwu/M8O1oHj+hlvdmJ1sPfzzxMltMG+M6bhAxX2gg/
vjA3fwhtgmsPHFDBj5a44Psf6eAUTEvhliGFrmG0DC6retlvJS2Hq4zasmAL
LcD9h0/dFk8r4JSy3idSaCU8dJzdvYu0Cq4XXFiYQavhus2uVn5Oa1ws9xfF
Ns0X++F9urn9foj9cNulXv7WS9kP5/1uscSWNsCZLa13ymgj/LaS8bQLbYKb
xFx40IuWtMP+99HOL4NoKdzqalj1MbQM/jJxZMsgWg6/1nUeMI8W4N8pdSZH
0gq4r/+PZZtoJZxy6enuvbQKHng3Le0YrYarbNj95DytgUv+Liu+TWvhCg0D
pM9oHdzn88C2uWI/rJ3lMqhE7Idb7LULKreM/fCTZb8jpbQJPix9p21IS+RY
v8MyLrahpXB6v1PPe9Ay2Pp93M+BtBye3nmN3ShagL93mdN+Cq2AE/IneM2h
lfCcQYOnL6dVcOC4bms20mp4ccNmB+JoDXxCY5d+lNbCVU6Wf51G62D1yuLf
N2k9XLfye4cntAG+3+Nx5/diP3yowU2fb2I/HKdLC5Go2d8e5/vFSetsaCn8
Lld7uD4tgztGb7vRipbD2pzod91oAW75Ri3xoBXw3a1hDUbQSnhj6awek2kV
PKN60KjZtBoOMPjPXUZr4PluYzatp7Vw/NThybG0Ds7v5ZVxmNbDblc888/S
BvjCd/cKN2gjPPh5P6dHtAn+Nkvo81bs74D+k67jTGI/vPpQ74X/xH44dGjv
mOrL2Q/P3df7pCMtwGsTXQ0taAWcNk4o6kIr4V9X+lV1p1Ww91P35sNpNZy6
29NtIq2BO9t6TQyhtfD1rsOXhtM6eGqNMbFraT1cf4t/6k7aAL+5Ffg4kTZa
lid51rfTtAmOdwureY2WdDQLO6LVbR7QUjheHe1ppGVwWrNtgZ/Ffvj1Em3k
H7Efrh2ZpK0awX54ZPe0iw60Ek7ce+N5M1oFVzzz6GcnWg3PXvLOrj+tgfO+
fWs/jNbC0+uW9/andbD5S+0ZM2k9vHV+06jFtAHueqzrwSjaCH/YMujqdtoE
x7WaYDxASzrh/GR26N+TtBRuMXW1Yzotg//YxHU10PJO/78fwfcVLcBnZ9yZ
/Unsh+ObvN3wS+yHNdG/jlaOZD+8Kr72bXtaDUdMbZvrTGvgFa89ynektXBU
xcmyvrQO3pKztLc3rYf3BcSOHU8b4JOxqWHTaSN8K+LJ1oW0CTbW/X58NS3p
jO1TaXdvGy2F7Ud3+pRAy+COZb5VTtByeNjI+c30tACHjN/R/y6tgDfYnVe+
pJVw0uJX4R/FfvjO5nKxpWI//GFM89SKK9gPS+4PeWxHa2GH0tBvTrQObntv
Z832tB4WRl5p04c2wF7rCzyH0kZ47FzbID/aBE+s1mtFMC3pYhYm+wTGh9FS
WOm56dJKWgaPMl14sYWWw54eBaXxtAB38rK319EK2L6CW8dLtBIunh6qyKRV
8M2I+JnPaTW82fN+dL7YD4/UWx36IfbD0rwO161Xsh++cjHgrS2th4PctpfJ
aANcbvGd+u1oI7xl4r/uvWkTXLe0w6jBtKQrXnedOncMLYWtOu/ZFETL4Ikv
HiXPo+Xw6fbVMyNpAf7d1a1gE62AO35eUlFLK+HxvmeaJNMqeME0k3CBVsMR
8tYT7tAaeOnBwMXPaC0cnLlvR67YD7vte326ROyHa7Zo8LDcKvbDN8b7maS0
EZ7Zf1eNRrQJlmRnt2pLS7qZheUNHQf2pKXwl9p+UzxpGeyZtjtiFC2HN9q8
3juFFmB9baeLc2gF/PLWlOfLaSX8ru2RnxtpFfy43xe7PbQaTq7UuUMSrYFD
lyz2Pkdr4Ubx6TNu0Tr41Lyq0U9oPSz/5ZP4XuyHt7rsvvZN7Idf2+a+kaxm
PyxNlJfZ0JLuOH4XLq7fgJbCzV7f7N6alsFVIu1Gdafl8IMnE+d60AK85HnK
phG0Aq6+4V/yZFoJq78OzZxNq+Cn1nsKltFqWHrrc8UNtAZu3VNw3k1r4RYT
Nvc9QuvgSu0/TEil9fCNk92W3KANcGDuup2PaCP84dabM2/FftjNr+sjk9jf
wyxExq3/+k/sh/dufG9TYw374dj2vdrUo+Xw3Mitni1pAW69siiwK62AL3Xx
WOFOK2GXHfHxw2kVvPDwn0sTaTW8b9rolyG0Bk54ccocTmvh5X9q/beO1vWw
XJ8I6bSL1sMZQ+8OO0Qb4C5L24acoY3wognr112jTXDM56LDD2hJT5z/uXjf
NNJSeGTD4+8/i/3wr4u1y/0V++G5NcIaVYtiP3y9+otedWkF/Ol8n7HNaSWc
53ggrDOtgtNaVtvWn1bD4/NnnxhGa+CnI7Pv+dNauOm8vkUzaR3s3v9I1SW0
Hu5xpXaLaNoAl30Od99BG+HtmfmTDtIm2Gqsr/oULellFnpu18el01LYfUXb
8wZaBjduHPvsFS2Hs2ZW+fFJ7Ic9pi2o/Vvshzfa58urRLMfPhQ62us/WgWv
X3p7elNaDffr0TOqI62Brxw4drAvrYVrXpFd86Z1cIt1W9+Mp/VwjUpVyqbT
Bvhy+6X1F9FGuEf1ku5raBOsjpk2KoaW9MbyGt7M3U9L4eBzYzafoGVwDd8H
KXpaDi+IG5x1lxbgYzHXP76kFfChPkLlQrEfnrHjfFOz2A//0HbtX2kt++GB
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
nE4b4XLfqp1ZSJvgbX9m5kbQEiPO9yczf8fSUrh2TdfG+2kZ/N1xg7eOlsP9
7n+efokWYJsOfhsyaQXs7pl86imthDPM9o/fi/3w3XFhv76L/bAwK6+RtSP7
YSeXfn1q01o4aEPStMa0zrJ9Wrv1bWk97DYu7GRP2gCfSS94OIA2wgeeDP45
mjbBv7alNpxGS15jvly+qdcCWgrn198wdRUtg+c+M0dvouXw9H5TdFpagG8q
cx4k0Qo4upmnOY1WwmdjTzS4Q6tgn6SGvZ/Qarj7vA1T3on9cFzB37XfxH7Y
z0p1orwT++F5Ga9zatJ62NxzeFkj2gDnjb3p5EYbYdcW3T170Cb46a4Tk31p
SR7OxxebrR1FS+GAtTuSptAyuI1VzZx5tBwe57zmx0pagE1f/znG0Ao4b9Yi
YS+thDvEfpl0nFbB+RODoy7QarjkVcHx27QGnlAx8P5jWgu3fPr8e4HYDw8d
NdqxVOyHH6545GHVgP1wyojhk6S0ES59dH9NQ9oER1v5HW9DS/Jx/niSnd2N
lsJZY/y+96Nl8MKoHIeRtBxeHOTvMZkW4IdvH0+cSyvg6Lpj1qyglfC2Ly8T
N9Iq+O/Cidm7aTWclvD+2zFaA99fPdvhPK2Fe9X41usWrYMlXssmPqL1cP0m
Fda8EfvhqMR1iSViPzwwzy5b0pD98KRre79VpyVvMB8f0sqhAS2FN0cm92pN
y+CEGZ4Tu9JyuJY5K7IvLcBZ7cYk+tMK+Fm9QsNEWgl3P7Lw2xxaBX/It3FQ
02r4U8aWXhtoDSyMazFxF62F3+xIjTxK6+Dc/3wTU2k97Gj/wnCDNsDHR6q+
PaCN8PreFRzyxX44LXdbry9if4FZ6OrgNvGf2A9bVbweWa0R+2HHvQGJjrQc
Ds/7YmhJC7BbdtS3zrQCbhXcxMGHVhZYvn9+oddwWgWX2+c/MYhWwy97mCJV
tAa2XhWdGE5r4fkLWmSvo3WW9dW5/m0HrYfl4wIdEmgDvHTov14ptBGu/mX3
xHTaBL/v3nNNDi15i/lDuxeJr2kpPCcnLPuz2A83kjX6/kfsh+3srzhUlbEf
HnxhoocDrYAzK1Wc5EIr4Zjyx9Z0olXw9iNDjveh1XB+WWm2H62B55bu+K6k
tbD3Tk/HEFr31nL//PceYbT+reX5nJpJ0bQB9o3tGrWdNr61PN8y7/hh2gR7
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
U1Vz2zO0AnZs7O2hp5Ww9bN9YQ9oFbza9du2HFoNa71crxWI/fBoiw15JWI/
nDD9VQ0LP/bDu+Z26lqP1sP2ndRjW9IGePjGrOWdaSNce0frhL60CZ41dP5D
L1rSpkyYdvR+yVhaCv85ZSebTsvgduPnuc+j5XBh8oOZq2gBHn6l9bZYWgG7
T1t89QCthJ9ef/JeR6sqtn+9U43rtBq+Mm2N031aA9tcfev/ktbCfy+6Lv8k
9sPLlDuPFYv98A7dfwZzf/bDgxK8S+rQRni1l66FHW2Cx+2q6S6nJW3LhNua
GTP70FI4XX5/qyctg/0WdLzqT8vhhTM2vg+mBbiLlan6XFoBL1J4O62klfAo
4bx/DK2C9c8bLt9Pq+GrTRcfO01r4MHV3hqu0lp4yj73kgxaB9d+fbLFC1oP
e96u654v9sP1xy6a+Uvsh8O2v99aZSz7K/ZnsddVG1rSDv01LryX0VL4jptt
DUdaBvu2Xe/kSsth1bli/6G0ANcvmLjcj1bAg+4Yjk2llXAl7z4PI2kVPGTF
iZIoWg03VjaRbaE18Jy8te5aWgv71f098xStg299Cdl2hdbDV2a+unqXNsAu
u4bnZdNGuF9Yao2PYj98/2u3rv+J/e0xP6mXMLZyAPvhxR+bR9WmZfDeoNiE
FrQcdlttldWRFuBZo5aVutAK2O5+iWwIrYTHfFN5jKFVcO2Ln8Km0Gp4eMeJ
2yNoTcXyoa+uLae18EibMR80tA5uHPXIeh+thyfsGd7tJG2AO0y4F3CZNsJz
HwxecYc2wQPz0o8/oyUOZYLm8KBHeWI/HFDrVtlPsR8+ZjfIrlIg++GI17cG
S2nBoeLfvz1mNacV8JpRd3d0oJXwg5pe+l60Co6ZZfjoQavhJ4t9ao2mNRXL
nZ47T6a18P0t48bNpnVwVNz7lctoPZzkFXJyE22AJx378XgPbYTXn1pQfpw2
wZ0CK7e6REs6lAlDz68fepuWwm+S6s9+Ssvg7xP273ov9sPzkjqk/hD7K3wu
+ZNkHPsr1h/rVrsWrazY3omsHs1oFex+RKl0oNVwq6GFq3vSmort7Vhy2p3W
wv021Xw2itbBasd9fyfSerjrfLl9OG2AA0NTvdS0ES6zHBW5kTbB1Yfn795N
SzqWCZv6LLqZQEvhVc+kX5JpGWxqFF8nnZbD98x7uzyhBbhxXFbQO7EffvF8
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
2A8vKmxwXPKM/bDP7yW5tWgdLEvPqWJH6+HHDj1d29IGy/pt9kzsThthSd6/
zQNoExzYcVLGKFqSjtdzuxvFk2gpXN/QtsECWgZ7NtjiqablsH/l7ws20QLs
FzNeG0sr4N4Pr947SivhqsnOv87QKji9+7bWN2g1PHLK31GPaI1lf7pMX10o
9sMuJ7J0pWI/vOxO7xf/xH748KYj1Ws9Zz+c9t2mexPaCB+vvHpqG9oEh6Wb
tnajJefNQt/6AZf601I4r/79Eh9aBvtn9G4yiZbD6dVODJpPC/CfX/ZBK2gF
3DRaczCSVsItsspn7aZVcNXURf+O0Gr4bt93zmdoDTxv3nj/67QWNnlkhT+k
dfBw/YCUl7Qe3lyQ8dIk9sOJh12k/8R++JBNYu+aL9gPL2/dYlZjWpKB8XFB
7E4nWgpf7lv/eldaBrf30HzxpOXwohKrpj60AO/qs3boRFoBb3MpH6KilfBc
Q+iRUFoFO1j/fryRVsNHfy6tuJvWwLXCf3Q8Qmthr3NBAWm0DlZu/b7xGq2H
h1kvOZdNG+C6XX8WFdBGWFdumY1J7IebLfjj/lfsv2AWZq1Tq2rksx/e6FFx
byNaBq88tO5Oa1oOe52o+bMLLcDvx2519KQV8H8nG/qMpJVw/GHtygm0Cr40
oPXJebQa1m3UPVtOa+CFQd2tNtJauErVK11jaB08u4/3lMO0Hj7Y6GlUKm2A
T8RO0l+ljfC6q58+ZtEmuHNUSOMCWnLRLJysZDXok9gP/7TfufiP2A/XfeF4
sLqR/fBv99TMhrQAp3r3/9eKVsA9/z527kIr4c0+0/09aBWsU5jDR9BqeN/n
jSlKWgP795AVzqW18MtWydLltA52TR/YZwOth33Kns/aRRvgvtkLdyXQRrjM
1+pGCm2CF6yKK7tCS/R4P4/o3iyLlsL3b2YOM9Iy+MirmctLxH546KGKx36L
/Zb1a+57alXAfvhTox6VG9JK+MO9R51b0SpY57hggiuthru3rL25H62BN9xK
PD+c1sL763oVB9A6veX+ZcW2c2k9LNsV4RlCG+Dwh04L19NG+HTKbe1O2mTZ
Xq/Z9w/Rkkv4/c2o9TuZlsK3e55yukLL4IrJPr6ZtBz+l/kjLJ8W4Ixte05/
FPvh3v/cjb/Efji01ruaVi/ZD6uvbO7ZgFbD7vZdZzjSGviaff52F1oLV7kW
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
/7NP3AHaBFfzqWA4RUvyzMIv/9N/L8L/A9KAGto=
      "]], {}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{100000, 1.2956395822652285`*^6},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "MessagesHead" -> DiscretePlot, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05]},
  PlotRange->{{100000, 110000}, {1.2956395822652285`*^6, 1.441049*^6}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6626643913340826`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"b", "=", "500000000"}], ";", 
  RowBox[{"PrimeEstimateTest", "=", 
   RowBox[{"IntegerPart", "[", 
    RowBox[{"b", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Log", "[", "b", "]"}], "+", 
       RowBox[{"Log", "[", 
        RowBox[{"Log", "[", "b", "]"}], "]"}], "-", "1", "+", 
       FractionBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Log", "[", 
           RowBox[{"Log", "[", "b", "]"}], "]"}], "-", "2"}], ")"}], 
        RowBox[{"Log", "[", "b", "]"}]], "-", 
       FractionBox[
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"Log", "[", 
             RowBox[{"Log", "[", "b", "]"}], "]"}], ")"}], "2"], "-", 
          RowBox[{"6", 
           RowBox[{"Log", "[", 
            RowBox[{"Log", "[", "b", "]"}], "]"}]}], "+", "11"}], ")"}], 
        RowBox[{"2", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"Log", "[", "b", "]"}], ")"}], "2"]}]]}], ")"}]}], "]"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.662560320148142*^9, 3.6625603453065815`*^9}, {
  3.662560377712435*^9, 3.6625603800005655`*^9}, {3.662560483167466*^9, 
  3.6625604889187956`*^9}, {3.6625611996274457`*^9, 3.6625612002014785`*^9}, {
  3.662561376145542*^9, 3.662561381520849*^9}, {3.6625614212411213`*^9, 
  3.662561447728636*^9}, {3.662561694022723*^9, 3.662561739526326*^9}, {
  3.6625618061271353`*^9, 3.6625618135895624`*^9}, {3.6625631000059385`*^9, 
  3.662563100860987*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"NEstimateTest", "=", 
  RowBox[{"PrimePi", "[", "PrimeEstimateTest", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"RelativeError", "=", 
  RowBox[{"N", "[", 
   FractionBox[
    RowBox[{"NEstimateTest", "-", "b"}], "b"], "]"}]}]}], "Input",
 CellChangeTimes->{{3.6625619026046534`*^9, 3.662561956932761*^9}, {
  3.662561988988594*^9, 3.662561991212722*^9}}],

Cell[BoxData["500002357"], "Output",
 CellChangeTimes->{
  3.6625612384606667`*^9, {3.6625614137646933`*^9, 3.6625614532219505`*^9}, {
   3.662561702167189*^9, 3.6625617334509783`*^9}, 3.662561781363719*^9, 
   3.6625618831575413`*^9, {3.662561943384986*^9, 3.6625619579328184`*^9}, 
   3.662561991691749*^9, {3.662563104558199*^9, 3.66256311839399*^9}, 
   3.662579971930931*^9, 3.6625805755944586`*^9, 3.6625818091590147`*^9, 
   3.662581906529584*^9, 3.6625819994588995`*^9, 3.6625826330951414`*^9, 
   3.662582795739444*^9, 3.6625828474133997`*^9, 3.6625831937092066`*^9}],

Cell[BoxData["4.714`*^-6"], "Output",
 CellChangeTimes->{
  3.6625612384606667`*^9, {3.6625614137646933`*^9, 3.6625614532219505`*^9}, {
   3.662561702167189*^9, 3.6625617334509783`*^9}, 3.662561781363719*^9, 
   3.6625618831575413`*^9, {3.662561943384986*^9, 3.6625619579328184`*^9}, 
   3.662561991691749*^9, {3.662563104558199*^9, 3.66256311839399*^9}, 
   3.662579971930931*^9, 3.6625805755944586`*^9, 3.6625818091590147`*^9, 
   3.662581906529584*^9, 3.6625819994588995`*^9, 3.6625826330951414`*^9, 
   3.662582795739444*^9, 3.6625828474133997`*^9, 3.6625831937112064`*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "This", " ", "tells", " ", "us", " ", "that", " ", "the", " ", 
   "approximating", " ", "function", " ", "here", " ", "gives", " ", "a", " ",
    "value", " ", "too", " ", "high", " ", "for", " ", 
   RowBox[{
    SubscriptBox["P", "b"], ".", " ", "Therefore"}], " ", "we", " ", "must", 
   " ", "attempt", " ", "to", " ", "lower", " ", "the", " ", "output", " ", 
   "in", " ", "a", " ", "recursive", " ", "way", " ", "until", " ", "the", 
   " ", "fucntion", " ", "settles"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.662582515375408*^9, 3.6625826158161526`*^9}}],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.662582316762048*^9, 3.662582391051297*^9}, {
   3.662582458403149*^9, 3.6625824745140705`*^9}, {3.662582541122881*^9, 
   3.6625825437210293`*^9}, 3.6625830207663145`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"NewNEstimate", "=", 
   RowBox[{"b", "-", 
    RowBox[{"(", 
     RowBox[{"NEstimateTest", "-", "b"}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.662580472320552*^9, 3.6625805008151817`*^9}, {
   3.662581753446828*^9, 3.6625818016225834`*^9}, 3.6625824485055833`*^9, {
   3.6626428582434607`*^9, 3.6626428701711426`*^9}}],

Cell[BoxData["809997542911"], "Output",
 CellChangeTimes->{
  3.6625805783606167`*^9, {3.6625817299534845`*^9, 3.6625818740477257`*^9}, 
   3.6625819078556595`*^9, 3.662582003393124*^9, 3.6625826350772543`*^9, {
   3.6625827865059156`*^9, 3.662582797154525*^9}, {3.662582844964259*^9, 
   3.6625828490254917`*^9}, 3.662583195234294*^9, 3.662642837269261*^9, 
   3.662642871395213*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NEstimateTest", "=", 
  RowBox[{"EstimateChecker", "[", "NewNEstimate", "]"}]}]], "Input",
 CellChangeTimes->{{3.6625800348265285`*^9, 3.6625800570988026`*^9}, 
   3.662580139649524*^9, {3.662580170073264*^9, 3.662580182921999*^9}, {
   3.662580236467062*^9, 3.6625802376891317`*^9}, {3.662580440695743*^9, 
   3.6625804653041506`*^9}, {3.6625805872911277`*^9, 
   3.6625805924184213`*^9}, {3.6625817076402082`*^9, 3.662581715471656*^9}, {
   3.6625824353488307`*^9, 3.6625824525298133`*^9}}],

Cell[BoxData["810000000000"], "Output",
 CellChangeTimes->{
  3.6625802001389837`*^9, 3.662580238172159*^9, 3.662580605459167*^9, {
   3.6625817330846634`*^9, 3.662581815427373*^9}, {3.6625818533725433`*^9, 
   3.662581871650589*^9}, 3.662581910074787*^9, 3.662582005033218*^9, 
   3.6625824535578723`*^9, 3.6625824839186087`*^9, 3.6625826388544703`*^9, 
   3.662582798802619*^9, 3.6625828509005985`*^9, {3.6625829707244525`*^9, 
   3.662582997868005*^9}, {3.662583207185977*^9, 3.6625832716886663`*^9}, 
   3.66264286610291*^9, 3.6626428970736814`*^9, 3.6626429303275833`*^9, {
   3.6626429720989723`*^9, 3.662643065468313*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NewNEstimate", "=", 
  RowBox[{"NewNEstimate", "+", 
   FractionBox[
    RowBox[{"(", 
     RowBox[{"b", "-", "NEstimateTest"}], ")"}], "2"]}]}]], "Input",
 CellChangeTimes->{{3.6625827715850625`*^9, 3.6625828869666615`*^9}, {
  3.662582962446979*^9, 3.662582963550042*^9}, {3.6625831866788044`*^9, 
  3.6625831877728667`*^9}}],

Cell[BoxData["809997543548"], "Output",
 CellChangeTimes->{{3.6625827749712563`*^9, 3.6625828041559253`*^9}, {
   3.662582852530692*^9, 3.662582887586697*^9}, {3.662582973594617*^9, 
   3.6625829995931034`*^9}, {3.6625832121692624`*^9, 3.662583273185752*^9}, {
   3.662642877101539*^9, 3.662642901888957*^9}, 3.662642933973792*^9, {
   3.6626429753161564`*^9, 3.662643064247243*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1619994471673", "/", "2."}]], "Input",
 CellChangeTimes->{{3.662642944219378*^9, 3.662642944722407*^9}}],

Cell[BoxData["8.099972358365`*^11"], "Output",
 CellChangeTimes->{3.6626429453784447`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPart", "[", 
  FractionBox["999995391", "2"], "]"}]], "Input",
 CellChangeTimes->{{3.6625833323211346`*^9, 3.6625833363813667`*^9}, {
  3.6625833785477786`*^9, 3.662583379074809*^9}, {3.66258341756301*^9, 
  3.662583421443232*^9}}],

Cell[BoxData["499997695"], "Output",
 CellChangeTimes->{3.662583337151411*^9, 3.6625833821519847`*^9, 
  3.6625834218882575`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"IntegerPart", "[", 
   RowBox[{"NEstimateTest", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Log", "[", "NEstimateTest", "]"}], "+", 
      RowBox[{"Log", "[", 
       RowBox[{"Log", "[", "NEstimateTest", "]"}], "]"}], "-", "1", "+", 
      FractionBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Log", "[", 
          RowBox[{"Log", "[", "NEstimateTest", "]"}], "]"}], "-", "2"}], 
        ")"}], 
       RowBox[{"Log", "[", "NEstimateTest", "]"}]], "-", 
      FractionBox[
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"Log", "[", 
            RowBox[{"Log", "[", "NEstimateTest", "]"}], "]"}], ")"}], "2"], 
         "-", 
         RowBox[{"6", 
          RowBox[{"Log", "[", 
           RowBox[{"Log", "[", "NEstimateTest", "]"}], "]"}]}], "+", "11"}], 
        ")"}], 
       RowBox[{"2", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"Log", "[", "NEstimateTest", "]"}], ")"}], "2"]}]]}], 
     ")"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6625816158149557`*^9, 3.66258162410443*^9}, {
   3.6625819539182944`*^9, 3.6625819662459993`*^9}, 3.66258357141181*^9}],

Cell[BoxData["500002310"], "Output",
 CellChangeTimes->{3.6625819675230722`*^9}]
}, Closed]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"b", "=", "810000000000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PrimeApprox", "[", "x_", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{"IntegerPart", "[", 
     RowBox[{"x", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Log", "[", "x", "]"}], "+", 
        RowBox[{"Log", "[", 
         RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "1", "+", 
        FractionBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Log", "[", 
            RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "2"}], ")"}], 
         RowBox[{"Log", "[", "x", "]"}]], "-", 
        FractionBox[
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"Log", "[", 
              RowBox[{"Log", "[", "x", "]"}], "]"}], ")"}], "2"], "-", 
           RowBox[{"6", 
            RowBox[{"Log", "[", 
             RowBox[{"Log", "[", "x", "]"}], "]"}]}], "+", "11"}], ")"}], 
         RowBox[{"2", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"Log", "[", "x", "]"}], ")"}], "2"]}]]}], ")"}]}], "]"}], 
    "\[IndentingNewLine]", ")"}]}], ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.6626410297169905`*^9, 3.6626410385154066`*^9}, 
   3.662649094658163*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"NEstimateTest", "=", 
   RowBox[{"EstimateChecker", "[", "b", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NewNEstimate", "=", 
    RowBox[{"b", "-", 
     RowBox[{"(", 
      RowBox[{"NEstimateTest", "-", "b"}], ")"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PrimeEstimate", "=", 
   RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{"NEstimateTest", "\[NotEqual]", "b"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Abs", "[", 
          FractionBox[
           RowBox[{"NEstimateTest", "-", "b"}], "b"], "]"}], ">", 
         SuperscriptBox["10", 
          RowBox[{"-", "9"}]]}], "||", 
        RowBox[{
         RowBox[{"Abs", "[", 
          RowBox[{"NEstimateTest", "-", "b"}], "]"}], ">", "10"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NewNEstimate", "=", 
         RowBox[{"NewNEstimate", "-", 
          RowBox[{"(", 
           RowBox[{"NEstimateTest", "-", "b"}], ")"}]}]}], ";"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NewNEstimate", "=", 
         RowBox[{"NewNEstimate", "-", 
          FractionBox[
           RowBox[{"(", 
            RowBox[{"NEstimateTest", "-", "b"}], ")"}], "10"]}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"PrimeEstimate", "=", 
      RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"NEstimateTest", "=", 
      RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], 
  ";"}], "\[IndentingNewLine]", "PrimeEstimate"}], "Input",
 CellChangeTimes->{{3.6625806704618845`*^9, 3.662580693854223*^9}, {
   3.6625807606860456`*^9, 3.6625808041095295`*^9}, {3.6625813847547398`*^9, 
   3.662581430802374*^9}, {3.662581533169229*^9, 3.662581553137371*^9}, 
   3.662581657834359*^9, {3.6625838127066107`*^9, 3.6625838355459175`*^9}, {
   3.6625839606950755`*^9, 3.662584025040756*^9}, {3.6625841007760878`*^9, 
   3.662584130693799*^9}, {3.6625841943984423`*^9, 3.662584269436734*^9}, {
   3.6625843057498116`*^9, 3.6625843843643084`*^9}, {3.662584443229675*^9, 
   3.6625844496040397`*^9}, {3.6625844932855377`*^9, 
   3.6625845001629314`*^9}, {3.6625846140354443`*^9, 3.6625846750669355`*^9}, 
   3.66258494055412*^9, {3.662584987352797*^9, 3.6625850405678406`*^9}, 
   3.6626410700430613`*^9, 3.66264190118672*^9, {3.662642651495635*^9, 
   3.662642686061612*^9}, {3.6626430891796694`*^9, 3.6626430896266947`*^9}, {
   3.6626431198024206`*^9, 3.662643168666216*^9}, {3.6626432170019803`*^9, 
   3.662643217385002*^9}, {3.6626467983298206`*^9, 3.662646847329623*^9}, {
   3.6626469155525255`*^9, 3.6626470027585135`*^9}}],

Cell[BoxData["24120113126984"], "Output",
 CellChangeTimes->{{3.6625849971513577`*^9, 3.6625850119062014`*^9}, 
   3.6625852233392944`*^9, 3.662641861640458*^9, 3.6626420644850597`*^9, 
   3.6626426818483715`*^9, 3.662642823480472*^9, {3.662643147900028*^9, 
   3.6626431515832386`*^9}, 3.662643214124816*^9, 3.6626436177289004`*^9, 
   3.6626468524069138`*^9, {3.6626469690505853`*^9, 3.6626469763700037`*^9}, 
   3.66264700864485*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrimePi", "[", "11037271757", "]"}]], "Input",
 CellChangeTimes->{{3.66258456727477*^9, 3.662584574075159*^9}}],

Cell[BoxData["500000000"], "Output",
 CellChangeTimes->{3.6625845744841824`*^9}]
}, Closed]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PrimeApprox", "[", "x_", "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"IntegerPart", "[", 
      RowBox[{"x", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Log", "[", "x", "]"}], "+", 
         RowBox[{"Log", "[", 
          RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "1", "+", 
         FractionBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "2"}], ")"}], 
          RowBox[{"Log", "[", "x", "]"}]], "-", 
         FractionBox[
          RowBox[{"(", 
           RowBox[{
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"Log", "[", 
               RowBox[{"Log", "[", "x", "]"}], "]"}], ")"}], "2"], "-", 
            RowBox[{"6", 
             RowBox[{"Log", "[", 
              RowBox[{"Log", "[", "x", "]"}], "]"}]}], "+", "11"}], ")"}], 
          RowBox[{"2", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"Log", "[", "x", "]"}], ")"}], "2"]}]]}], ")"}]}], "]"}],
      "\[IndentingNewLine]", ")"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NewPrime", "[", "n_", "]"}], ":=", 
   RowBox[{"(", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Thought", " ", 
       RowBox[{"process", ":", " ", 
        RowBox[{"We", " ", "need", " ", "to", " ", "estimate", " ", 
         SubscriptBox["P", "n"], " ", "using", " ", "an", " ", 
         "approximation"}]}]}], ",", " ", 
      RowBox[{"call", " ", "it", " ", 
       SubscriptBox[
        OverscriptBox["P", "~"], "n"]}], ",", " ", 
      RowBox[{
       RowBox[{"calculate", " ", 
        RowBox[{"PrimePi", "[", 
         SubscriptBox[
          OverscriptBox["P", "~"], "n"], "]"}], " ", "and", " ", "calculate", 
        " ", "how", " ", "much", " ", "our", " ", "estimate", " ", "of", " ", 
        "n", " ", "is", " ", "off", " ", 
        RowBox[{"by", ".", " ", "We"}], " ", "need", " ", "to", " ", "then", 
        " ", "calculate", " ", "an", " ", "adjusted", " ", "estimate", " ", 
        "for", " ", 
        RowBox[{
         SubscriptBox["P", "n"], ".", " ", "The"}], " ", "direction", " ", 
        "in", " ", "which", " ", "NEstimate", " ", "is", " ", "off", " ", 
        "will", " ", "tell", " ", "us", " ", "whether", " ", "to", " ", 
        "increase", " ", "or", " ", "decrease", " ", "the", " ", "n", " ", 
        "used", " ", "in", " ", "the", " ", "prime", " ", 
        RowBox[{"estimator", ".", " ", "We"}], " ", "iterate", " ", "this", 
        " ", "process", " ", "until", " ", "NEstimate"}], "=", 
       RowBox[{
        RowBox[{"n", ".", " ", "Then"}], " ", "we", " ", "scan", " ", "the", 
        " ", "odd", " ", "numbers", " ", "down", " ", "from", " ", "the", " ",
         "prime", " ", "estimate", " ", "corresponding", " ", "to", " ", 
        "the", " ", "correct", " ", "n", " ", "value", " ", "until", " ", 
        "PrimePi", " ", 
        RowBox[{"changes", ".", " ", "The"}], " ", "number", " ", "before", 
        " ", "which", " ", "it", " ", "changes", " ", "is", " ", "our", " ", 
        RowBox[{"prime", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "Use", " ", "a", " ", "reasonably", " ", "precise", " ", "estimate", " ",
       "for", " ", 
      SubscriptBox["P", "n"]}], "*)"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PrimeEstimate", "=", 
      RowBox[{"PrimeApprox", "[", "n", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"NEstimateTest", "=", 
      RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], ";", 
     RowBox[{"NewNEstimate", "=", 
      RowBox[{"n", "-", 
       RowBox[{"(", 
        RowBox[{"NEstimateTest", "-", "n"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"CycleOffset", "=", "True"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NoCycleDetected", "=", "True"}], ";", "\[IndentingNewLine]", 
     RowBox[{"NEstimateTestArray", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"NEstimateTest", "\[NotEqual]", "n"}], "&&", 
        "NoCycleDetected"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Abs", "[", 
             FractionBox[
              RowBox[{"NEstimateTest", "-", "n"}], "n"], "]"}], ">", 
            SuperscriptBox["10", 
             RowBox[{"-", "12"}]]}], "||", 
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{"NEstimateTest", "-", "n"}], "]"}], ">", "5"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"NewNEstimate", "=", 
            RowBox[{"NewNEstimate", "-", 
             RowBox[{"(", 
              RowBox[{"NEstimateTest", "-", "n"}], ")"}]}]}], ";"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"NewNEstimate", "=", 
            RowBox[{"NewNEstimate", "-", 
             FractionBox[
              RowBox[{"(", 
               RowBox[{"NEstimateTest", "-", "n"}], ")"}], "10"]}]}], ";"}]}],
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"PrimeEstimate", "=", 
         RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"NEstimateTest", "=", 
         RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"NEstimateTestArray", ",", "NEstimateTest"}], "]"}], "&&", 
           RowBox[{"NEstimateTest", ">", "n"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"NoCycleDetected", "=", "False"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"NEstimateTestArray", "=", 
         RowBox[{"Prepend", "[", 
          RowBox[{"NEstimateTestArray", ",", "NEstimateTest"}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"EvenQ", "[", "PrimeEstimate", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"PrimeEstimate", "=", 
         RowBox[{"PrimeEstimate", "-", "1"}]}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"PrimePi", "[", 
         RowBox[{"PrimeEstimate", "-", "2"}], "]"}], "\[GreaterEqual]", "n"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"PrimeEstimate", "=", 
         RowBox[{"PrimeEstimate", "-", "2"}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "PrimeEstimate"}], "\[IndentingNewLine]", ")"}]}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.6625197777680416`*^9, 3.6625198054916277`*^9}, {
   3.662520126160969*^9, 3.662520146882154*^9}, {3.6625211432911453`*^9, 
   3.6625211457222843`*^9}, {3.662521214395212*^9, 3.6625212464980483`*^9}, {
   3.662521727223544*^9, 3.662521738222173*^9}, {3.6625217995346804`*^9, 
   3.662521809102227*^9}, {3.6625218486134872`*^9, 3.6625219415088005`*^9}, {
   3.6625219748287067`*^9, 3.6625219759247694`*^9}, {3.6625602933066072`*^9, 
   3.6625603037722054`*^9}, {3.662560372106114*^9, 3.662560393169319*^9}, {
   3.6625608200527353`*^9, 3.6625608375257344`*^9}, {3.6625612873384624`*^9, 
   3.66256135512834*^9}, {3.6625614876649203`*^9, 3.6625615032478113`*^9}, {
   3.6625615393448763`*^9, 3.6625615764639997`*^9}, {3.6625616154572296`*^9, 
   3.662561684015151*^9}, {3.662562018229267*^9, 3.66256202422861*^9}, {
   3.662562062827818*^9, 3.6625620896433516`*^9}, {3.662562333307288*^9, 
   3.6625623382175694`*^9}, {3.66256266377719*^9, 3.6625626804481435`*^9}, {
   3.6625633178353977`*^9, 3.662563492330378*^9}, {3.662563542994276*^9, 
   3.662563736816362*^9}, {3.662563816088896*^9, 3.662563844959547*^9}, {
   3.662563875128273*^9, 3.6625638801915627`*^9}, {3.662563924264083*^9, 
   3.66256393085546*^9}, {3.6625639618802347`*^9, 3.6625639726978536`*^9}, {
   3.6625830271276784`*^9, 3.6625831233431816`*^9}, {3.6625850538826027`*^9, 
   3.6625851659910145`*^9}, {3.6625852384581594`*^9, 3.662585248351725*^9}, {
   3.6625855287917657`*^9, 3.662585557085384*^9}, {3.6625857714536448`*^9, 
   3.662586049738562*^9}, 3.6625861539305215`*^9, {3.6625862172251415`*^9, 
   3.6625862476578827`*^9}, {3.662586853055509*^9, 3.66258686426315*^9}, 
   3.6625869236995497`*^9, {3.6626465200279026`*^9, 3.662646778802704*^9}, {
   3.6626473544626293`*^9, 3.6626474371963615`*^9}, {3.662649387942938*^9, 
   3.6626493907020955`*^9}, {3.66264951543023*^9, 3.6626495163492823`*^9}, 
   3.662655597559108*^9, {3.662655635403272*^9, 3.662655669305211*^9}, {
   3.6626557060853148`*^9, 3.662655753515028*^9}, {3.662656099080793*^9, 
   3.662656117263833*^9}, {3.6626562386467757`*^9, 3.662656243846073*^9}, {
   3.66265628819761*^9, 3.662656325861764*^9}, {3.6626563872542753`*^9, 
   3.662656465708763*^9}, {3.6626566267979765`*^9, 3.662656628653083*^9}, 
   3.662656683483219*^9, {3.6626601105242343`*^9, 3.662660115427515*^9}, {
   3.662660582643238*^9, 3.6626606008662806`*^9}, {3.662660894425071*^9, 
   3.6626609044126425`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"b", "=", "1500000000000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Timing", "[", 
  RowBox[{"NewPrime", "[", "b", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Timing", "[", 
  RowBox[{"Prime", "[", 
   RowBox[{"b", "*", 
    RowBox[{"12", "/", "10"}]}], "]"}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.6626552170713453`*^9, {3.6626557788184752`*^9, 3.662655796656495*^9}, {
   3.662656080230715*^9, 3.66265608083875*^9}, {3.6626561408711834`*^9, 
   3.6626561547419767`*^9}, {3.6626566545955667`*^9, 3.662656673411643*^9}, {
   3.662656805105175*^9, 3.6626568063692474`*^9}, {3.6626578924903703`*^9, 
   3.6626578946494937`*^9}, {3.6626599255796566`*^9, 
   3.6626599260196815`*^9}, {3.6626605452630997`*^9, 
   3.6626605619270535`*^9}, {3.6626606313270226`*^9, 3.662660677126642*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"181.6475644`", ",", "45624190113149"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6626558173086767`*^9, 3.6626560727772884`*^9, {3.662656130400584*^9, 
   3.662656147672572*^9}, 3.6626565887047977`*^9, {3.6626566410357914`*^9, 
   3.6626566669142714`*^9}, 3.662656731090942*^9, 3.6626578637807283`*^9, 
   3.6626578958015594`*^9, 3.6626600927982206`*^9, 3.662660397281636*^9, {
   3.6626605462901587`*^9, 3.6626605625280876`*^9}, {3.662660636800336*^9, 
   3.662660672643386*^9}, 3.6626608605211315`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "55088764206233"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6626558173086767`*^9, 3.6626560727772884`*^9, {3.662656130400584*^9, 
   3.662656147672572*^9}, 3.6626565887047977`*^9, {3.6626566410357914`*^9, 
   3.6626566669142714`*^9}, 3.662656731090942*^9, 3.6626578637807283`*^9, 
   3.6626578958015594`*^9, 3.6626600927982206`*^9, 3.662660397281636*^9, {
   3.6626605462901587`*^9, 3.6626605625280876`*^9}, {3.662660636800336*^9, 
   3.662660672643386*^9}, 3.662660860524132*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"b", "=", "1400000000000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Timing", "[", 
  RowBox[{"NewPrime", "[", "b", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Timing", "[", 
  RowBox[{"Prime", "[", 
   RowBox[{"b", "*", 
    RowBox[{"14", "/", "10"}]}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6626608809493003`*^9, 3.6626608868526382`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"74.1628754`", ",", "42482567965289"}], "}"}]], "Output",
 CellChangeTimes->{3.6626606138270216`*^9, 3.6626609945117955`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"31.1845999`", ",", "60158302816223"}], "}"}]], "Output",
 CellChangeTimes->{3.6626606138270216`*^9, 3.6626610257125807`*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Beep", "[", "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.662660253217396*^9, 3.6626602538084297`*^9}, {
  3.662660530208239*^9, 3.662660538822732*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Timing", "[", 
   RowBox[{"Prime", "[", "1008000000010", "]"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6626552144311943`*^9, 3.6626552161082897`*^9}, {
  3.6626567638988185`*^9, 3.662656789889305*^9}, {3.6626602154332347`*^9, 
  3.66266022112156*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19.0633222`", ",", "30244513361819"}], "}"}]], "Output",
 CellChangeTimes->{{3.6626567769175634`*^9, 3.6626568096904373`*^9}}]
}, Closed]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"b", "=", "500000000000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NEstimateTest", "=", 
   RowBox[{"PrimePi", "[", 
    RowBox[{"PrimeApprox", "[", "b", "]"}], "]"}]}], ";", 
  RowBox[{"NewNEstimate", "=", 
   RowBox[{"b", "-", 
    RowBox[{"(", 
     RowBox[{"NEstimateTest", "-", "b"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PrimeEstimate", "=", 
   RowBox[{"PrimeApprox", "[", "b", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CycleOffset", "=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NoCycle", "=", "True"}], ";"}]}], "Input",
 CellChangeTimes->{
  3.6626550728310947`*^9, {3.6626551681565475`*^9, 3.662655168412562*^9}, {
   3.662655956170619*^9, 3.6626559624229765`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Abs", "[", 
       FractionBox[
        RowBox[{"NEstimateTest", "-", "b"}], "b"], "]"}], ">", 
      SuperscriptBox["10", 
       RowBox[{"-", "12"}]]}], "||", 
     RowBox[{
      RowBox[{"Abs", "[", 
       RowBox[{"NEstimateTest", "-", "b"}], "]"}], ">", "5"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NewNEstimate", "=", 
      RowBox[{"NewNEstimate", "-", 
       RowBox[{"(", 
        RowBox[{"NEstimateTest", "-", "b"}], ")"}]}]}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NewNEstimate", "=", 
      RowBox[{"NewNEstimate", "-", 
       FractionBox[
        RowBox[{"(", 
         RowBox[{"NEstimateTest", "-", "b"}], ")"}], "10"]}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PrimeEstimate", "=", 
   RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NEstimateTest", "=", 
    RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"NEstimateTest", "==", "StoredNEstimate"}], "&&", 
     RowBox[{"NEstimateTest", ">", "b"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NoCycle", "=", "False"}], ";"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{"CycleOffset", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"CycleOffset", "=", "False"}], ";", "\[IndentingNewLine]", 
     RowBox[{"StoredNEstimate", "=", "NEstimateTest"}], ";"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"CycleOffset", "=", "True"}], ";"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", "PrimeEstimate", "\[IndentingNewLine]", \
"NEstimateTest", "\[IndentingNewLine]", "StoredNEstimate", "\
\[IndentingNewLine]", "NoCycle", "\[IndentingNewLine]", "CycleOffset"}], \
"Input",
 CellChangeTimes->{{3.662655227972968*^9, 3.6626553943234835`*^9}, {
  3.6626554308285713`*^9, 3.66265543149961*^9}, {3.6626555210697327`*^9, 
  3.6626555272750874`*^9}, {3.6626559213446274`*^9, 3.662655943847914*^9}}],

Cell[BoxData["14638944639799"], "Output",
 CellChangeTimes->{{3.6626552734175677`*^9, 3.6626553792186193`*^9}, {
   3.6626554433652887`*^9, 3.6626554645244985`*^9}, {3.6626555317203417`*^9, 
   3.662655539688798*^9}, 3.6626559020685244`*^9, {3.662655967108245*^9, 
   3.6626559727325664`*^9}}],

Cell[BoxData["500000000005"], "Output",
 CellChangeTimes->{{3.6626552734175677`*^9, 3.6626553792186193`*^9}, {
   3.6626554433652887`*^9, 3.6626554645244985`*^9}, {3.6626555317203417`*^9, 
   3.662655539688798*^9}, 3.6626559020685244`*^9, {3.662655967108245*^9, 
   3.662655972737567*^9}}],

Cell[BoxData["500000000005"], "Output",
 CellChangeTimes->{{3.6626552734175677`*^9, 3.6626553792186193`*^9}, {
   3.6626554433652887`*^9, 3.6626554645244985`*^9}, {3.6626555317203417`*^9, 
   3.662655539688798*^9}, 3.6626559020685244`*^9, {3.662655967108245*^9, 
   3.6626559727415667`*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.6626552734175677`*^9, 3.6626553792186193`*^9}, {
   3.6626554433652887`*^9, 3.6626554645244985`*^9}, {3.6626555317203417`*^9, 
   3.662655539688798*^9}, 3.6626559020685244`*^9, {3.662655967108245*^9, 
   3.662655972744567*^9}}],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.6626552734175677`*^9, 3.6626553792186193`*^9}, {
   3.6626554433652887`*^9, 3.6626554645244985`*^9}, {3.6626555317203417`*^9, 
   3.662655539688798*^9}, 3.6626559020685244`*^9, {3.662655967108245*^9, 
   3.662655972748567*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6626545852322063`*^9, 3.662654586280266*^9}, {
  3.6626546308338137`*^9, 3.662654643633546*^9}, {3.662655095351383*^9, 
  3.6626550954463882`*^9}, {3.6626551298613567`*^9, 3.6626551343096113`*^9}, {
  3.662655181013283*^9, 3.6626552002293816`*^9}}],

Cell[BoxData["14638944639799"], "Output",
 CellChangeTimes->{{3.6626546110896845`*^9, 3.6626546442115793`*^9}}],

Cell[BoxData["500000000005"], "Output",
 CellChangeTimes->{{3.6626546110896845`*^9, 3.6626546442155795`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"b", "=", "500000000000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NEstimateTest", "=", 
   RowBox[{"PrimePi", "[", 
    RowBox[{"PrimeApprox", "[", "b", "]"}], "]"}]}], ";", 
  RowBox[{"NewNEstimate", "=", 
   RowBox[{"b", "-", 
    RowBox[{"(", 
     RowBox[{"NEstimateTest", "-", "b"}], ")"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PrimeEstimate", "=", 
   RowBox[{"PrimeApprox", "[", "b", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CycleOffset", "=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NoCycle", "=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"NEstimateTest", "\[NotEqual]", "b"}], "&&", "NoCycle"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Abs", "[", 
          FractionBox[
           RowBox[{"NEstimateTest", "-", "b"}], "b"], "]"}], ">", 
         SuperscriptBox["10", 
          RowBox[{"-", "12"}]]}], "||", 
        RowBox[{
         RowBox[{"Abs", "[", 
          RowBox[{"NEstimateTest", "-", "b"}], "]"}], ">", "5"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NewNEstimate", "=", 
         RowBox[{"NewNEstimate", "-", 
          RowBox[{"(", 
           RowBox[{"NEstimateTest", "-", "b"}], ")"}]}]}], ";"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NewNEstimate", "=", 
         RowBox[{"NewNEstimate", "-", 
          FractionBox[
           RowBox[{"(", 
            RowBox[{"NEstimateTest", "-", "b"}], ")"}], "10"]}]}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"PrimeEstimate", "=", 
      RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"NEstimateTest", "=", 
      RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"NEstimateTest", "==", "StoredNEstimate"}], "&&", 
        RowBox[{"NEstimateTest", ">", "b"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NoCycle", "=", "False"}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"CycleOffset", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"CycleOffset", "=", "False"}], ";", "\[IndentingNewLine]", 
        RowBox[{"StoredNEstimate", "=", "NEstimateTest"}], ";"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"CycleOffset", "=", "True"}], ";"}]}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"EvenQ", "[", "PrimeEstimate", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PrimeEstimate", "=", 
      RowBox[{"PrimeEstimate", "-", "1"}]}], ";"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"While", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"PrimePi", "[", 
       RowBox[{"PrimeEstimate", "-", "2"}], "]"}], "\[GreaterEqual]", "b"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"PrimeEstimate", "=", 
       RowBox[{"PrimeEstimate", "-", "2"}]}], ";"}]}], "\[IndentingNewLine]", 
    "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", "PrimeEstimate", "\
\[IndentingNewLine]", 
 RowBox[{"Prime", "[", "b", "]"}]}], "Input",
 CellChangeTimes->{
  3.662653375201996*^9, {3.662653692832164*^9, 3.662653693343193*^9}, {
   3.662654011358382*^9, 3.6626540243901277`*^9}, {3.662654102109573*^9, 
   3.6626541210776577`*^9}, {3.662654153005484*^9, 3.662654204364422*^9}, {
   3.6626543466275587`*^9, 3.662654356499123*^9}, {3.662654411724282*^9, 
   3.6626544585059576`*^9}, {3.6626547610582623`*^9, 3.662654763912426*^9}, {
   3.662654890824685*^9, 3.6626550352139435`*^9}, {3.662655121750893*^9, 
   3.6626551456702614`*^9}, 3.662655234398336*^9, 3.6626555691414824`*^9, 
   3.662655617996277*^9}],

Cell[BoxData["14638944639703"], "Output",
 CellChangeTimes->{{3.6626544448001738`*^9, 3.662654466346406*^9}, 
   3.662654593036652*^9, 3.662655046153569*^9, 3.6626551550087953`*^9, 
   3.662655573365724*^9, 3.662655998020013*^9, 3.6626560596675386`*^9}],

Cell[BoxData["14638944639703"], "Output",
 CellChangeTimes->{{3.6626544448001738`*^9, 3.662654466346406*^9}, 
   3.662654593036652*^9, 3.662655046153569*^9, 3.6626551550087953`*^9, 
   3.662655573365724*^9, 3.662655998020013*^9, 3.662656059668539*^9}]
}, Closed]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.6626544332895155`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Once", " ", "the", " ", "PrimeEstimate", " ", "gives", " ", "the", " ", 
     "n", " ", "fed", " ", "to", " ", "the", " ", "function"}], ",", " ", 
    RowBox[{
    "we", " ", "know", " ", "we", " ", "are", " ", "greater", " ", "than", 
     " ", "or", " ", "equal", " ", "to", " ", "the", " ", "nth", " ", 
     RowBox[{"prime", ".", " ", "We"}], " ", "decrement", " ", "by", " ", 
     "two", " ", "until", " ", "it", " ", "is", " ", "no", " ", "longer", " ", 
     RowBox[{"equal", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"PrimeEstimate", "\[IndentingNewLine]", 
   RowBox[{"Prime", "[", "b", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.66265331548258*^9, 3.662653369466668*^9}, {
   3.6626537571118402`*^9, 3.6626537597429905`*^9}, {3.662654314587726*^9, 
   3.662654317178874*^9}, 3.66265439945258*^9}],

Cell[BoxData["7368787"], "Output",
 CellChangeTimes->{
  3.662653653620921*^9, {3.6626543105034924`*^9, 3.662654317942918*^9}, {
   3.662654362427462*^9, 3.6626543774373207`*^9}}],

Cell[BoxData["7368787"], "Output",
 CellChangeTimes->{
  3.662653653620921*^9, {3.6626543105034924`*^9, 3.662654317942918*^9}, {
   3.662654362427462*^9, 3.662654377440321*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["PrimeEstimate"], "Input"],

Cell[BoxData["32"], "Output",
 CellChangeTimes->{3.662653465818179*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Timing", "[", 
   RowBox[{"NewPrime", "[", "10", "]"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.6625868853383555`*^9, 3.6625869053775015`*^9}, 
   3.662647787057372*^9, {3.66264928464703*^9, 3.662649285110056*^9}, {
   3.6626532803315697`*^9, 3.662653280546582*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.6625893087725143`*^9, 3.662647745854016*^9, 
  3.662647977448262*^9, 3.6626532204791465`*^9, 3.6626532865179234`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"NewPrime", "[", "500000", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.662647880478716*^9, 3.6626478945675216`*^9}, {
  3.662649119688595*^9, 3.6626491205756454`*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.6626480188596306`*^9, 3.6626494047368984`*^9, 
  3.662653165719014*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Prime", "[", "600000", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6626477321362314`*^9, 3.662647762896991*^9}, {
  3.6626491387186832`*^9, 3.6626491476311927`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"20.9353342`", ",", "33415796732441"}], "}"}]], "Output",
 CellChangeTimes->{3.6626477510923157`*^9, 3.662647784695237*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Timing", "[", 
    RowBox[{"NewPrime", "[", "1500000000000", "]"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Beep", "[", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6625851768356347`*^9, 3.6625851837900324`*^9}, {
   3.6625852928472705`*^9, 3.6625853052769814`*^9}, {3.6625853497585254`*^9, 
   3.6625853578049855`*^9}, {3.662585403317589*^9, 3.662585406524772*^9}, {
   3.662586065416459*^9, 3.6625861037676525`*^9}, {3.6625862652718897`*^9, 
   3.662586272806321*^9}, {3.6625867305415015`*^9, 3.6625867324916134`*^9}, 
   3.662586882316183*^9, {3.6626494732208157`*^9, 3.662649474892911*^9}, {
   3.6626662784160175`*^9, 3.662666285662432*^9}, {3.6626687711185923`*^9, 
   3.6626687727486854`*^9}}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{
  3.662585184496073*^9, 3.6625852533210096`*^9, 3.6625853059350185`*^9, 
   3.662585354276784*^9, {3.6625853920539446`*^9, 3.66258540754183*^9}, {
   3.6625860537887936`*^9, 3.662586080265308*^9}, 3.6625861210116386`*^9, 
   3.662586179726997*^9, 3.6625862533032055`*^9, 3.6626661966033382`*^9, 
   3.6626662862154636`*^9, 3.6626663297549543`*^9, 3.662666805951191*^9, 
   3.6626674436896677`*^9, 3.6626675098114495`*^9, 3.6626679046180315`*^9, 
   3.662668743972039*^9, 3.662669294798545*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Timing", "[", 
  RowBox[{"Prime", "[", "1500000000000", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Beep", "[", "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.662666528748336*^9, 3.6626665298603992`*^9}, {
  3.662667451895137*^9, 3.6626674790226884`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"26.52017`", ",", "45624190113149"}], "}"}]], "Output",
 CellChangeTimes->{3.6626675061902423`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"Timing", "[", 
  RowBox[{"Prime", "[", "810000000000", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Timing", "[", 
  RowBox[{"NewPrime", "[", "810000000000", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.662586285117025*^9, 3.662586322358155*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"PrimeApprox", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"x", ",", "_Real"}], "}"}], "}"}], ",", 
     RowBox[{"(", 
      RowBox[{"IntegerPart", "[", 
       RowBox[{"x", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Log", "[", "x", "]"}], "+", 
          RowBox[{"Log", "[", 
           RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "1", "+", 
          FractionBox[
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Log", "[", 
              RowBox[{"Log", "[", "x", "]"}], "]"}], "-", "2"}], ")"}], 
           RowBox[{"Log", "[", "x", "]"}]], "-", 
          FractionBox[
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"Log", "[", 
                RowBox[{"Log", "[", "x", "]"}], "]"}], ")"}], "2"], "-", 
             RowBox[{"6", 
              RowBox[{"Log", "[", 
               RowBox[{"Log", "[", "x", "]"}], "]"}]}], "+", "11"}], ")"}], 
           RowBox[{"2", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"Log", "[", "x", "]"}], ")"}], "2"]}]]}], ")"}]}], 
       "]"}], ")"}]}], "]"}]}], ";"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"b", "=", "1500000000000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"PrimeEstimate", "=", 
  RowBox[{"PrimeApprox", "[", "b", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"NEstimateTest", "=", 
  RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"NewNEstimate", "=", 
  RowBox[{"b", "-", 
   RowBox[{"(", 
    RowBox[{"NEstimateTest", "-", "b"}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NoCycleDetected", "=", "True"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"NEstimateTestArray", "=", 
  RowBox[{"{", "NEstimateTest", "}"}]}]}], "Input",
 CellChangeTimes->{
  3.6626677479240685`*^9, {3.662667862092599*^9, 3.6626678636746893`*^9}, {
   3.6626679353637896`*^9, 3.662667945530371*^9}, {3.6626681382183924`*^9, 
   3.6626681510251245`*^9}}],

Cell[BoxData["45624319925998"], "Output",
 CellChangeTimes->{3.662668147993952*^9, 3.662668199582902*^9}],

Cell[BoxData["1500004129815"], "Output",
 CellChangeTimes->{3.662668147993952*^9, 3.6626682261774235`*^9}],

Cell[BoxData["1499995870185"], "Output",
 CellChangeTimes->{3.662668147993952*^9, 3.6626682261804237`*^9}],

Cell[BoxData[
 RowBox[{"{", "1500004129815", "}"}]], "Output",
 CellChangeTimes->{3.662668147993952*^9, 3.6626682261824236`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Abs", "[", 
        FractionBox[
         RowBox[{"NEstimateTest", "-", "b"}], "b"], "]"}], ">", 
       SuperscriptBox["10", 
        RowBox[{"-", "12"}]]}], "||", 
      RowBox[{
       RowBox[{"Abs", "[", 
        RowBox[{"NEstimateTest", "-", "b"}], "]"}], ">", "10"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NewNEstimate", "=", 
       RowBox[{"NewNEstimate", "-", 
        RowBox[{"(", 
         RowBox[{"NEstimateTest", "-", "b"}], ")"}]}]}], ";"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"NewNEstimate", "=", 
       RowBox[{"NewNEstimate", "-", 
        FractionBox[
         RowBox[{"(", 
          RowBox[{"NEstimateTest", "-", "b"}], ")"}], "10"]}]}], ";"}]}], 
    "\[IndentingNewLine]", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"PrimeEstimate", "=", 
  RowBox[{"PrimeApprox", "[", "NewNEstimate", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NEstimateTest", "=", 
   RowBox[{"PrimePi", "[", "PrimeEstimate", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"MemberQ", "[", 
       RowBox[{"NEstimateTestArray", ",", "NEstimateTest"}], "]"}], 
      RowBox[{"(*", 
       RowBox[{"||", 
        RowBox[{"(", 
         RowBox[{"0", "<", 
          RowBox[{"NEstimateTest", "-", "b"}], "<", "5"}], ")"}]}], "*)"}], 
      ")"}], "&&", 
     RowBox[{"NEstimateTest", ">", "b"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NoCycleDetected", "=", "False"}], ";"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"NEstimateTestArray", "=", 
  RowBox[{"Prepend", "[", 
   RowBox[{"NEstimateTestArray", ",", "NEstimateTest"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.662667732085163*^9, 3.6626678677489223`*^9}, {
  3.66266839098485*^9, 3.662668482616091*^9}}],

Cell[BoxData["45624190113180"], "Output",
 CellChangeTimes->{3.662668239647194*^9, 3.6626682721980553`*^9, 
  3.6626683099522147`*^9, 3.662668484258185*^9}],

Cell[BoxData["1500000000001"], "Output",
 CellChangeTimes->{3.662668239647194*^9, 3.6626682721980553`*^9, 
  3.6626683099522147`*^9, 3.6626685108607063`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1500000000001", ",", "1500000000002", ",", "1500000000491", ",", 
   "1499995867269", ",", "1500004129815"}], "}"}]], "Output",
 CellChangeTimes->{3.662668239647194*^9, 3.6626682721980553`*^9, 
  3.6626683099522147`*^9, 3.6626685108637066`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Prime", "[", "1500000000000", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Prime", "[", "1500000000491", "]"}]}], "Input",
 CellChangeTimes->{{3.6626685232254133`*^9, 3.662668539654353*^9}, {
  3.662668708983038*^9, 3.6626687145493565`*^9}, {3.6626687816601954`*^9, 
  3.6626687847483716`*^9}}],

Cell[BoxData["45624190113149"], "Output",
 CellChangeTimes->{3.662668540038375*^9, 3.662669303358034*^9}],

Cell[BoxData["45624190128631"], "Output",
 CellChangeTimes->{3.662668540038375*^9, 3.662669303370035*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"EvenQ", "[", "PrimeEstimate", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PrimeEstimate", "=", 
      RowBox[{"PrimeEstimate", "-", "1"}]}], ";"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"PrimePi", "[", 
      RowBox[{"PrimeEstimate", "-", "2"}], "]"}], "\[GreaterEqual]", "b"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"PrimeEstimate", "=", 
     RowBox[{"PrimeEstimate", "-", "2"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.662667810235633*^9, {3.6626678740622835`*^9, 3.6626678812346935`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"NewPrime", "[", "500000004003", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.662669337909011*^9, 3.6626693834646163`*^9}, {
  3.6626695159761953`*^9, 3.662669517871304*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"35.1938256`", ",", "14638944764287"}], "}"}]], "Output",
 CellChangeTimes->{{3.6626693457034564`*^9, 3.662669376639226*^9}, 
   3.6626694196766877`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Prime", "[", "499001576249", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6626694769739647`*^9, 3.6626695132160378`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"11.7156751`", ",", "14608678925171"}], "}"}]], "Output",
 CellChangeTimes->{3.6626695055996017`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"NewPrime", "[", "900000004003", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.662669536871391*^9, 3.6626695370474005`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"52.9311393`", ",", "26898370354591"}], "}"}]], "Output",
 CellChangeTimes->{3.662669836305517*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Prime", "[", "899001576249", "]"}], "]"}]], "Input",
 CellChangeTimes->{3.662669542551716*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"17.5813127`", ",", "26867497262959"}], "}"}]], "Output",
 CellChangeTimes->{3.66266956081076*^9}]
}, Open  ]]
}, Closed]]
}, Closed]]
},
WindowSize->{818, 945},
WindowMargins->{{Automatic, 17}, {Automatic, 7}},
Magnification:>1.2 Inherited,
FrontEndVersion->"10.3 for Microsoft Windows (64-bit) (December 10, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 181, 2, 47, "Subsubsection"],
Cell[763, 26, 517, 9, 148, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1317, 40, 98, 1, 84, "Section"],
Cell[1418, 43, 618, 13, 58, "Text"],
Cell[2039, 58, 236, 5, 59, "Text"],
Cell[2278, 65, 237, 6, 59, "Text"],
Cell[2518, 73, 394, 8, 36, "Input"],
Cell[2915, 83, 93, 1, 35, "Text"],
Cell[CellGroupData[{
Cell[3033, 88, 235, 7, 36, "Input"],
Cell[3271, 97, 98, 1, 36, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3406, 103, 416, 13, 36, "Input"],
Cell[3825, 118, 444, 11, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4306, 134, 255, 7, 36, "Input"],
Cell[4564, 143, 464, 12, 53, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5065, 160, 186, 2, 58, "Subsection"],
Cell[5254, 164, 13664, 269, 1864, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18955, 438, 100, 1, 58, "Subsection"],
Cell[19058, 441, 2731, 53, 583, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[21826, 499, 169, 2, 47, "Subsection"],
Cell[21998, 503, 391, 7, 99, "Input"],
Cell[22392, 512, 15011, 285, 2229, "Input"],
Cell[CellGroupData[{
Cell[37428, 801, 2413, 65, 355, "Input"],
Cell[39844, 868, 525, 8, 43, "Output"],
Cell[40372, 878, 525, 8, 43, "Output"],
Cell[40900, 888, 525, 8, 43, "Output"],
Cell[41428, 898, 784, 14, 43, "Output"],
Cell[42215, 914, 793, 15, 43, "Output"],
Cell[43011, 931, 818, 16, 60, "Output"],
Cell[43832, 949, 523, 8, 43, "Output"],
Cell[44358, 959, 862, 18, 63, "Output"],
Cell[45223, 979, 525, 8, 43, "Output"],
Cell[45751, 989, 820, 16, 60, "Output"],
Cell[46574, 1007, 782, 14, 43, "Output"],
Cell[47359, 1023, 802, 15, 111, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48198, 1043, 1411, 42, 194, "Input"],
Cell[49612, 1087, 198, 4, 43, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49847, 1096, 1503, 38, 154, "Input"],
Cell[51353, 1136, 615, 13, 31, "Message"],
Cell[51971, 1151, 497, 15, 43, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52505, 1171, 818, 25, 99, "Input"],
Cell[53326, 1198, 472, 13, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53835, 1216, 865, 25, 99, "Input"],
Cell[54703, 1243, 536, 15, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55276, 1263, 1138, 31, 154, "Input"],
Cell[56417, 1296, 338, 9, 43, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56792, 1310, 1264, 36, 154, "Input"],
Cell[58059, 1348, 1021, 27, 112, "Output"],
Cell[59083, 1377, 1820, 49, 211, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60940, 1431, 2717, 76, 417, "Input"],
Cell[63660, 1509, 809, 21, 87, "Output"],
Cell[64472, 1532, 1241, 33, 192, "Output"],
Cell[65716, 1567, 329, 6, 51, "Output"],
Cell[66048, 1575, 287, 5, 51, "Output"]
}, Open  ]],
Cell[66350, 1583, 70, 1, 51, "Input"],
Cell[66423, 1586, 511, 9, 118, "Input"],
Cell[CellGroupData[{
Cell[66959, 1599, 1366, 40, 184, "Input"],
Cell[68328, 1641, 474, 12, 51, "Output"],
Cell[68805, 1655, 536, 14, 86, "Output"]
}, Open  ]],
Cell[69356, 1672, 714, 19, 118, "Input"],
Cell[CellGroupData[{
Cell[70095, 1695, 2383, 60, 450, "Input"],
Cell[72481, 1757, 272, 4, 51, "Output"],
Cell[72756, 1763, 275, 4, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73068, 1772, 1040, 29, 194, "Input"],
Cell[74111, 1803, 240, 6, 51, "Output"]
}, Open  ]],
Cell[74366, 1812, 323, 7, 51, "Input"],
Cell[CellGroupData[{
Cell[74714, 1823, 691, 21, 118, "Input"],
Cell[75408, 1846, 726, 20, 134, "Output"],
Cell[76137, 1868, 798, 24, 180, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76972, 1897, 1318, 34, 170, "Input"],
Cell[78293, 1933, 357, 9, 51, "Output"]
}, Open  ]],
Cell[78665, 1945, 215, 5, 57, "Input"],
Cell[CellGroupData[{
Cell[78905, 1954, 309, 9, 82, "Input"],
Cell[79217, 1965, 102, 1, 51, "Output"]
}, Open  ]],
Cell[79334, 1969, 703, 20, 57, "Input"],
Cell[CellGroupData[{
Cell[80062, 1993, 1012, 32, 90, "Input"],
Cell[81077, 2027, 153, 3, 51, "Output"],
Cell[81233, 2032, 152, 3, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81422, 2040, 521, 17, 75, "Input"],
Cell[81946, 2059, 90, 2, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82073, 2066, 236, 6, 57, "Input"],
Cell[82312, 2074, 122, 2, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82471, 2081, 513, 13, 75, "Input"],
Cell[82987, 2096, 592, 11, 61, "Message"],
Cell[83582, 2109, 545, 11, 61, "Message"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84164, 2125, 584, 16, 75, "Input"],
Cell[84751, 2143, 525, 11, 69, "Message"],
Cell[85279, 2156, 166, 4, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85482, 2165, 736, 23, 134, "Input"],
Cell[86221, 2190, 244, 4, 51, "Output"],
Cell[86468, 2196, 32421, 543, 411, "Output"]
}, Open  ]],
Cell[118904, 2742, 315, 8, 72, "Input"],
Cell[119222, 2752, 299, 9, 75, "Input"],
Cell[CellGroupData[{
Cell[119546, 2765, 1198, 36, 93, "Input"],
Cell[120747, 2803, 113, 2, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120897, 2810, 569, 13, 57, "Input"],
Cell[121469, 2825, 519, 14, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122025, 2844, 1018, 25, 152, "Input"],
Cell[123046, 2871, 515, 13, 75, "Output"],
Cell[123564, 2886, 733, 23, 93, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124334, 2914, 324, 9, 94, "Input"],
Cell[124661, 2925, 150, 3, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124848, 2933, 259, 7, 72, "Input"],
Cell[125110, 2942, 320, 9, 72, "Output"]
}, Open  ]],
Cell[125445, 2954, 1225, 36, 139, "Input"],
Cell[CellGroupData[{
Cell[126695, 2994, 867, 26, 120, "Input"],
Cell[127565, 3022, 733, 21, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128335, 3048, 555, 18, 72, "Input"],
Cell[128893, 3068, 172, 4, 72, "Output"]
}, Open  ]],
Cell[129080, 3075, 1758, 53, 266, "Input"],
Cell[130841, 3130, 970, 27, 75, "Input"],
Cell[131814, 3159, 260, 5, 51, "Input"],
Cell[CellGroupData[{
Cell[132099, 3168, 625, 17, 86, "Input"],
Cell[132727, 3187, 714, 23, 174, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[133478, 3215, 752, 23, 176, "Input"],
Cell[134233, 3240, 195, 3, 72, "Output"],
Cell[134431, 3245, 195, 3, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134663, 3253, 689, 19, 118, "Input"],
Cell[135355, 3274, 794, 24, 174, "Output"],
Cell[136152, 3300, 286, 7, 84, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136475, 3312, 755, 21, 152, "Input"],
Cell[137233, 3335, 1126, 36, 244, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138396, 3376, 1742, 48, 350, "Input"],
Cell[140141, 3426, 147, 3, 72, "Output"],
Cell[140291, 3431, 238, 6, 51, "Output"]
}, Open  ]],
Cell[140544, 3440, 995, 22, 184, "Input"],
Cell[CellGroupData[{
Cell[141564, 3466, 918, 24, 218, "Input"],
Cell[142485, 3492, 235, 4, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142757, 3501, 934, 25, 252, "Input"],
Cell[143694, 3528, 76, 1, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143807, 3534, 835, 21, 184, "Input"],
Cell[144645, 3557, 294, 9, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144976, 3571, 839, 22, 199, "Input"],
Cell[145818, 3595, 816, 24, 93, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146671, 3624, 379, 7, 51, "Input"],
Cell[147053, 3633, 1335, 40, 174, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[148425, 3678, 240, 5, 51, "Input"],
Cell[148668, 3685, 74, 1, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[148779, 3691, 814, 19, 152, "Input"],
Cell[149596, 3712, 298, 8, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149931, 3725, 199, 4, 51, "Input"],
Cell[150133, 3731, 404, 11, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150574, 3747, 381, 8, 86, "Input"],
Cell[150958, 3757, 220, 5, 51, "Output"],
Cell[151181, 3764, 177, 3, 51, "Output"]
}, Open  ]],
Cell[151373, 3770, 2104, 55, 470, "Input"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[153526, 3831, 96, 1, 84, "Section"],
Cell[153625, 3834, 324, 7, 124, "Text"],
Cell[153952, 3843, 242, 5, 123, "Text"],
Cell[154197, 3850, 95, 1, 123, "Text"],
Cell[CellGroupData[{
Cell[154317, 3855, 220, 5, 124, "Input"],
Cell[154540, 3862, 92, 1, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154669, 3868, 165, 3, 124, "Input"],
Cell[154837, 3873, 99, 1, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154973, 3879, 199, 4, 124, "Input"],
Cell[155175, 3885, 119, 2, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155331, 3892, 231, 5, 124, "Input"],
Cell[155565, 3899, 96, 1, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155698, 3905, 209, 5, 124, "Input"],
Cell[155910, 3912, 211, 5, 124, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[156170, 3923, 146, 2, 66, "Section"],
Cell[156319, 3927, 380, 7, 116, "Text"],
Cell[CellGroupData[{
Cell[156724, 3938, 98, 1, 82, "Subsection"],
Cell[156825, 3941, 224, 4, 82, "Text"],
Cell[CellGroupData[{
Cell[157074, 3949, 97, 1, 67, "Subsubsection"],
Cell[157174, 3952, 5326, 123, 1278, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[162537, 4080, 102, 1, 55, "Subsubsection"],
Cell[162642, 4083, 4976, 109, 1080, "Input"],
Cell[167621, 4194, 6154, 111, 842, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[173824, 4311, 168, 2, 67, "Subsection"],
Cell[CellGroupData[{
Cell[174017, 4317, 102, 1, 67, "Subsubsection"],
Cell[174122, 4320, 3231, 76, 748, "Input"],
Cell[177356, 4398, 5348, 95, 742, "Input"],
Cell[182707, 4495, 6948, 152, 1689, "Input"],
Cell[CellGroupData[{
Cell[189680, 4651, 147, 3, 51, "Input"],
Cell[189830, 4656, 70, 1, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189937, 4662, 583, 11, 86, "Input"],
Cell[190523, 4675, 511, 10, 51, "Output"],
Cell[191037, 4687, 379, 6, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191453, 4698, 144, 2, 51, "Input"],
Cell[191600, 4702, 138, 3, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191775, 4710, 204, 4, 51, "Input"],
Cell[191982, 4716, 614, 12, 37, "Message"],
Cell[192599, 4730, 150, 3, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192786, 4738, 148, 3, 51, "Input"],
Cell[192937, 4743, 121, 3, 51, "Output"]
}, Open  ]],
Cell[193073, 4749, 94, 1, 51, "Input"],
Cell[CellGroupData[{
Cell[193192, 4754, 1129, 27, 434, "Input"],
Cell[194324, 4783, 506, 9, 51, "Output"],
Cell[194833, 4794, 506, 9, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[195376, 4808, 1494, 32, 465, "Input"],
Cell[196873, 4842, 700, 10, 51, "Output"],
Cell[197576, 4854, 680, 9, 51, "Output"],
Cell[198259, 4865, 702, 10, 51, "Output"],
Cell[198964, 4877, 680, 9, 51, "Output"]
}, Open  ]],
Cell[199659, 4889, 95, 3, 51, "Input"],
Cell[CellGroupData[{
Cell[199779, 4896, 2286, 57, 583, "Input"],
Cell[202068, 4955, 369, 5, 51, "Output"],
Cell[202440, 4962, 369, 5, 51, "Output"],
Cell[202812, 4969, 382, 6, 51, "Output"],
Cell[203197, 4977, 387, 6, 51, "Output"],
Cell[203587, 4985, 387, 6, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[204011, 4996, 1089, 28, 318, "Input"],
Cell[205103, 5026, 110, 1, 37, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205250, 5032, 36, 0, 51, "Input"],
Cell[205289, 5034, 139, 3, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205465, 5042, 168, 3, 51, "Input"],
Cell[205636, 5047, 569, 11, 37, "Message"],
Cell[206208, 5060, 91, 2, 37, "Print"],
Cell[206302, 5064, 569, 11, 37, "Message"],
Cell[206874, 5077, 113, 3, 37, "Print"],
Cell[206990, 5082, 569, 11, 37, "Message"],
Cell[207562, 5095, 579, 11, 37, "Message"]
}, Open  ]],
Cell[208156, 5109, 96, 1, 51, "Input"],
Cell[CellGroupData[{
Cell[208277, 5114, 188, 5, 75, "Input"],
Cell[208468, 5121, 125, 3, 51, "Output"]
}, Open  ]],
Cell[208608, 5127, 93, 1, 51, "Input"],
Cell[208704, 5130, 94, 1, 51, "Input"],
Cell[208801, 5133, 407, 12, 152, "Input"],
Cell[CellGroupData[{
Cell[209233, 5149, 246, 5, 51, "Input"],
Cell[209482, 5156, 386, 12, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209905, 5173, 283, 8, 51, "Input"],
Cell[210191, 5183, 311, 9, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210539, 5197, 293, 6, 86, "Input"],
Cell[210835, 5205, 127, 3, 51, "Output"],
Cell[210965, 5210, 115, 3, 51, "Output"]
}, Open  ]],
Cell[211095, 5216, 1734, 49, 318, "Input"],
Cell[CellGroupData[{
Cell[212854, 5269, 125, 3, 51, "Input"],
Cell[212982, 5274, 861, 19, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[213880, 5298, 295, 6, 86, "Input"],
Cell[214178, 5306, 798, 13, 51, "Output"],
Cell[214979, 5321, 789, 13, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215805, 5339, 3442, 87, 516, "Input"],
Cell[219250, 5428, 623, 19, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219910, 5452, 663, 18, 118, "Input"],
Cell[220576, 5472, 398, 12, 51, "Output"]
}, Open  ]],
Cell[220989, 5487, 853, 23, 184, "Input"],
Cell[221845, 5512, 2755, 69, 748, "Input"],
Cell[CellGroupData[{
Cell[224625, 5585, 531, 10, 86, "Input"],
Cell[225159, 5597, 225, 5, 51, "Output"],
Cell[225387, 5604, 95, 1, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[225519, 5610, 392, 7, 51, "Input"],
Cell[225914, 5619, 589, 16, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226540, 5640, 263, 5, 86, "Input"],
Cell[226806, 5647, 169, 3, 51, "Output"],
Cell[226978, 5652, 168, 3, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[227183, 5660, 2741, 72, 715, "Input"],
Cell[229927, 5734, 243, 5, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230207, 5744, 274, 6, 51, "Input"],
Cell[230484, 5752, 687, 17, 51, "Output"]
}, Open  ]],
Cell[231186, 5772, 488, 14, 51, InheritFromParent],
Cell[CellGroupData[{
Cell[231699, 5790, 5710, 131, 1278, "Input"],
Cell[237412, 5923, 629, 14, 51, "Output"],
Cell[238044, 5939, 574, 12, 51, "Output"],
Cell[238621, 5953, 496, 9, 51, "Output"],
Cell[239120, 5964, 535, 10, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239692, 5979, 205, 5, 86, "Input"],
Cell[239900, 5986, 489, 14, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240426, 6005, 399, 10, 86, "Input"],
Cell[240828, 6017, 561, 15, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241426, 6037, 66, 1, 51, "Input"],
Cell[241495, 6040, 94, 1, 51, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[241638, 6047, 105, 1, 55, "Subsubsection"],
Cell[241746, 6050, 2955, 67, 1011, "Input"],
Cell[CellGroupData[{
Cell[244726, 6121, 216, 4, 51, "Input"],
Cell[244945, 6127, 125, 2, 51, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245107, 6134, 628, 16, 246, "Input"],
Cell[245738, 6152, 100, 1, 51, "Output"],
Cell[245841, 6155, 98, 1, 51, "Output"]
}, Open  ]],
Cell[245954, 6159, 1715, 42, 577, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[247706, 6206, 101, 1, 55, "Subsubsection"],
Cell[247810, 6209, 6019, 128, 1012, "Input"],
Cell[253832, 6339, 7891, 186, 1509, "Input"],
Cell[CellGroupData[{
Cell[261748, 6529, 181, 3, 61, "Input"],
Cell[261932, 6534, 147, 2, 61, "Output"]
}, Open  ]],
Cell[262094, 6539, 225, 5, 61, "Input"],
Cell[CellGroupData[{
Cell[262344, 6548, 172, 4, 61, "Input"],
Cell[262519, 6554, 89, 2, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[262645, 6561, 1512, 42, 261, "Input"],
Cell[264160, 6605, 144, 3, 61, "Output"],
Cell[264307, 6610, 153, 3, 61, "Output"],
Cell[264463, 6615, 153, 3, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264653, 6623, 457, 13, 182, "Input"],
Cell[265113, 6638, 162, 4, 61, "Output"],
Cell[265278, 6644, 160, 4, 61, "Output"],
Cell[265441, 6650, 161, 4, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[265639, 6659, 1013, 32, 154, "Input"],
Cell[266655, 6693, 167, 2, 61, "Output"],
Cell[266825, 6697, 167, 2, 61, "Output"],
Cell[266995, 6701, 155, 2, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[267187, 6708, 328, 8, 103, "Input"],
Cell[267518, 6718, 8423, 211, 267, "Output"],
Cell[275944, 6931, 8427, 211, 267, "Output"],
Cell[284374, 7144, 126, 2, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[284537, 7151, 1583, 37, 420, "Input"],
Cell[286123, 7190, 593, 11, 61, "Output"],
Cell[286719, 7203, 632, 13, 61, "Output"],
Cell[287354, 7218, 505, 9, 61, "Output"],
Cell[287862, 7229, 497, 9, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[288396, 7243, 144, 2, 61, "Input"],
Cell[288543, 7247, 135, 3, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[288715, 7255, 305, 7, 61, "Input"],
Cell[289023, 7264, 242, 5, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[289302, 7274, 188, 4, 61, "Input"],
Cell[289493, 7280, 164, 4, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[289694, 7289, 542, 12, 141, "Input"],
Cell[290239, 7303, 412, 8, 61, "Output"],
Cell[290654, 7313, 270, 4, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[290961, 7322, 365, 8, 103, "Input"],
Cell[291329, 7332, 245, 3, 61, "Output"],
Cell[291577, 7337, 244, 3, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[291858, 7345, 164, 4, 61, "Input"],
Cell[292025, 7351, 143, 2, 61, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[292205, 7358, 1938, 46, 699, "Input"],
Cell[294146, 7406, 272, 4, 61, "Output"],
Cell[294421, 7412, 425, 9, 61, "Output"],
Cell[294849, 7423, 272, 4, 61, "Output"],
Cell[295124, 7429, 286, 5, 61, "Output"],
Cell[295413, 7436, 391, 8, 61, "Output"],
Cell[295807, 7446, 268, 4, 61, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[296148, 7458, 96, 1, 66, "Section"],
Cell[296247, 7461, 419, 10, 118, "Text"],
Cell[296669, 7473, 954, 19, 152, "Input"],
Cell[297626, 7494, 1478, 29, 252, "Input"],
Cell[CellGroupData[{
Cell[299129, 7527, 102, 1, 82, "Subsection"],
Cell[299234, 7530, 1105, 22, 219, "Input"],
Cell[300342, 7554, 14346, 300, 2978, "Input",
 Evaluatable->False],
Cell[314691, 7856, 186, 4, 117, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[314914, 7865, 209, 3, 67, "Subsection"],
Cell[315126, 7870, 8427, 201, 2016, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[323590, 8076, 124, 1, 67, "Subsection"],
Cell[CellGroupData[{
Cell[323739, 8081, 132, 2, 73, "Input"],
Cell[323874, 8085, 143, 2, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[324054, 8092, 437, 11, 123, "Input"],
Cell[324494, 8105, 8824, 159, 580, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[333355, 8269, 1987, 51, 385, "Input"],
Cell[335345, 8322, 582088, 9579, 540, "Output"]
}, Open  ]],
Cell[917448, 17904, 1514, 38, 408, "Input"],
Cell[CellGroupData[{
Cell[918987, 17946, 379, 8, 158, "Input"],
Cell[919369, 17956, 576, 8, 73, "Output"],
Cell[919948, 17966, 577, 8, 73, "Output"]
}, Closed]],
Cell[920540, 17977, 613, 11, 201, "Input"],
Cell[921156, 17990, 239, 3, 123, "Input"],
Cell[CellGroupData[{
Cell[921420, 17997, 381, 8, 123, "Input"],
Cell[921804, 18007, 384, 6, 73, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[922225, 18018, 516, 8, 55, "Input"],
Cell[922744, 18028, 629, 9, 73, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[923410, 18042, 351, 8, 91, "Input"],
Cell[923764, 18052, 383, 5, 73, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[924184, 18062, 128, 2, 55, "Input"],
Cell[924315, 18066, 90, 1, 73, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[924442, 18072, 262, 5, 91, "Input"],
Cell[924707, 18079, 129, 2, 73, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[924873, 18086, 1206, 34, 493, "Input"],
Cell[926082, 18122, 80, 1, 73, "Output"]
}, Closed]],
Cell[926177, 18126, 1304, 36, 600, "Input"],
Cell[CellGroupData[{
Cell[927506, 18166, 2951, 67, 835, "Input"],
Cell[930460, 18235, 436, 6, 73, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[930933, 18246, 135, 2, 55, "Input"],
Cell[931071, 18250, 80, 1, 73, "Output"]
}, Closed]],
Cell[931166, 18254, 9579, 202, 3199, "Input"],
Cell[CellGroupData[{
Cell[940770, 18460, 853, 17, 218, "Input"],
Cell[941626, 18479, 544, 9, 73, "Output"],
Cell[942173, 18490, 533, 9, 73, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[942743, 18504, 389, 9, 154, "Input"],
Cell[943135, 18515, 164, 3, 73, "Output"],
Cell[943302, 18520, 164, 3, 73, "Output"]
}, Closed]],
Cell[943481, 18526, 205, 4, 105, "Input"],
Cell[CellGroupData[{
Cell[943711, 18534, 314, 7, 123, "Input"],
Cell[944028, 18543, 166, 3, 73, "Output"]
}, Closed]],
Cell[944209, 18549, 793, 21, 296, "Input"],
Cell[CellGroupData[{
Cell[945027, 18574, 2248, 61, 1032, "Input"],
Cell[947278, 18637, 293, 4, 73, "Output"],
Cell[947574, 18643, 289, 4, 73, "Output"],
Cell[947866, 18649, 291, 4, 73, "Output"],
Cell[948160, 18655, 282, 4, 73, "Output"],
Cell[948445, 18661, 282, 4, 73, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[948764, 18670, 297, 4, 55, "Input"],
Cell[949064, 18676, 111, 1, 73, "Output"],
Cell[949178, 18679, 109, 1, 73, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[949324, 18685, 4094, 106, 1581, "Input"],
Cell[953421, 18793, 253, 3, 73, "Output"],
Cell[953677, 18798, 251, 3, 73, "Output"]
}, Closed]],
Cell[953943, 18804, 70, 1, 55, "Input"],
Cell[CellGroupData[{
Cell[954038, 18809, 939, 18, 408, "Input"],
Cell[954980, 18829, 179, 3, 73, "Output"],
Cell[955162, 18834, 177, 3, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[955376, 18842, 39, 0, 73, "Input"],
Cell[955418, 18844, 71, 1, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[955526, 18850, 328, 7, 123, "Input"],
Cell[955857, 18859, 174, 2, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[956068, 18866, 218, 4, 73, "Input"],
Cell[956289, 18872, 128, 2, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[956454, 18879, 217, 4, 73, "Input"],
Cell[956674, 18885, 162, 3, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[956873, 18893, 775, 14, 169, "Input"],
Cell[957651, 18909, 549, 8, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[958237, 18922, 300, 5, 169, "Input"],
Cell[958540, 18929, 138, 3, 73, "Output"]
}, Open  ]],
Cell[958693, 18935, 276, 5, 123, "Input"],
Cell[958972, 18942, 1254, 36, 424, "Input"],
Cell[CellGroupData[{
Cell[960251, 18982, 822, 18, 313, "Input"],
Cell[961076, 19002, 105, 1, 73, "Output"],
Cell[961184, 19005, 106, 1, 73, "Output"],
Cell[961293, 19008, 106, 1, 73, "Output"],
Cell[961402, 19011, 128, 2, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[961567, 19018, 2000, 57, 794, "Input"],
Cell[963570, 19077, 156, 2, 73, "Output"],
Cell[963729, 19081, 157, 2, 73, "Output"],
Cell[963889, 19085, 287, 6, 123, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[964213, 19096, 354, 7, 169, "Input"],
Cell[964570, 19105, 105, 1, 73, "Output"],
Cell[964678, 19108, 105, 1, 73, "Output"]
}, Open  ]],
Cell[964798, 19112, 708, 20, 264, "Input"],
Cell[CellGroupData[{
Cell[965531, 19136, 224, 4, 73, "Input"],
Cell[965758, 19142, 192, 4, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[965987, 19151, 172, 3, 73, "Input"],
Cell[966162, 19156, 140, 3, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[966339, 19164, 173, 3, 73, "Input"],
Cell[966515, 19169, 138, 3, 140, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[966690, 19177, 144, 3, 73, "Input"],
Cell[966837, 19182, 137, 3, 73, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}
]
*)

(* End of internal cache information *)
